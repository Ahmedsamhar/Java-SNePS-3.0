package sneps.snepslog;
import java.lang.System;
import java.io.*;
import java_cup.runtime.Symbol;


class Lexer implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

//initialize  variables to be used by class
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	Lexer (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	Lexer (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Lexer () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;

//Add code to be executed on initialization of the lexer
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int yy_state_dtrans[] = {
		0
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NO_ANCHOR,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NO_ANCHOR,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NO_ANCHOR,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NOT_ACCEPT,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NOT_ACCEPT,
		/* 111 */ YY_NO_ANCHOR,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NO_ANCHOR,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NO_ANCHOR,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NO_ANCHOR,
		/* 167 */ YY_NOT_ACCEPT,
		/* 168 */ YY_NO_ANCHOR,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NO_ANCHOR,
		/* 171 */ YY_NOT_ACCEPT,
		/* 172 */ YY_NO_ANCHOR,
		/* 173 */ YY_NOT_ACCEPT,
		/* 174 */ YY_NO_ANCHOR,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NO_ANCHOR,
		/* 177 */ YY_NOT_ACCEPT,
		/* 178 */ YY_NO_ANCHOR,
		/* 179 */ YY_NOT_ACCEPT,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NO_ANCHOR,
		/* 183 */ YY_NOT_ACCEPT,
		/* 184 */ YY_NO_ANCHOR,
		/* 185 */ YY_NOT_ACCEPT,
		/* 186 */ YY_NO_ANCHOR,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NO_ANCHOR,
		/* 189 */ YY_NOT_ACCEPT,
		/* 190 */ YY_NO_ANCHOR,
		/* 191 */ YY_NOT_ACCEPT,
		/* 192 */ YY_NO_ANCHOR,
		/* 193 */ YY_NOT_ACCEPT,
		/* 194 */ YY_NO_ANCHOR,
		/* 195 */ YY_NOT_ACCEPT,
		/* 196 */ YY_NO_ANCHOR,
		/* 197 */ YY_NOT_ACCEPT,
		/* 198 */ YY_NO_ANCHOR,
		/* 199 */ YY_NOT_ACCEPT,
		/* 200 */ YY_NO_ANCHOR,
		/* 201 */ YY_NOT_ACCEPT,
		/* 202 */ YY_NO_ANCHOR,
		/* 203 */ YY_NOT_ACCEPT,
		/* 204 */ YY_NO_ANCHOR,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NO_ANCHOR,
		/* 207 */ YY_NOT_ACCEPT,
		/* 208 */ YY_NO_ANCHOR,
		/* 209 */ YY_NOT_ACCEPT,
		/* 210 */ YY_NO_ANCHOR,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NO_ANCHOR,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NO_ANCHOR,
		/* 215 */ YY_NOT_ACCEPT,
		/* 216 */ YY_NO_ANCHOR,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NO_ANCHOR,
		/* 219 */ YY_NOT_ACCEPT,
		/* 220 */ YY_NO_ANCHOR,
		/* 221 */ YY_NOT_ACCEPT,
		/* 222 */ YY_NO_ANCHOR,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NO_ANCHOR,
		/* 225 */ YY_NOT_ACCEPT,
		/* 226 */ YY_NO_ANCHOR,
		/* 227 */ YY_NOT_ACCEPT,
		/* 228 */ YY_NO_ANCHOR,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NO_ANCHOR,
		/* 231 */ YY_NOT_ACCEPT,
		/* 232 */ YY_NO_ANCHOR,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NO_ANCHOR,
		/* 235 */ YY_NOT_ACCEPT,
		/* 236 */ YY_NO_ANCHOR,
		/* 237 */ YY_NOT_ACCEPT,
		/* 238 */ YY_NO_ANCHOR,
		/* 239 */ YY_NOT_ACCEPT,
		/* 240 */ YY_NO_ANCHOR,
		/* 241 */ YY_NOT_ACCEPT,
		/* 242 */ YY_NO_ANCHOR,
		/* 243 */ YY_NOT_ACCEPT,
		/* 244 */ YY_NO_ANCHOR,
		/* 245 */ YY_NOT_ACCEPT,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NOT_ACCEPT,
		/* 248 */ YY_NO_ANCHOR,
		/* 249 */ YY_NOT_ACCEPT,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NOT_ACCEPT,
		/* 252 */ YY_NO_ANCHOR,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NO_ANCHOR,
		/* 255 */ YY_NOT_ACCEPT,
		/* 256 */ YY_NO_ANCHOR,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NO_ANCHOR,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NO_ANCHOR,
		/* 261 */ YY_NOT_ACCEPT,
		/* 262 */ YY_NO_ANCHOR,
		/* 263 */ YY_NOT_ACCEPT,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NOT_ACCEPT,
		/* 266 */ YY_NO_ANCHOR,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NO_ANCHOR,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NO_ANCHOR,
		/* 271 */ YY_NOT_ACCEPT,
		/* 272 */ YY_NO_ANCHOR,
		/* 273 */ YY_NOT_ACCEPT,
		/* 274 */ YY_NO_ANCHOR,
		/* 275 */ YY_NOT_ACCEPT,
		/* 276 */ YY_NO_ANCHOR,
		/* 277 */ YY_NOT_ACCEPT,
		/* 278 */ YY_NO_ANCHOR,
		/* 279 */ YY_NOT_ACCEPT,
		/* 280 */ YY_NO_ANCHOR,
		/* 281 */ YY_NOT_ACCEPT,
		/* 282 */ YY_NO_ANCHOR,
		/* 283 */ YY_NOT_ACCEPT,
		/* 284 */ YY_NO_ANCHOR,
		/* 285 */ YY_NOT_ACCEPT,
		/* 286 */ YY_NO_ANCHOR,
		/* 287 */ YY_NOT_ACCEPT,
		/* 288 */ YY_NO_ANCHOR,
		/* 289 */ YY_NOT_ACCEPT,
		/* 290 */ YY_NO_ANCHOR,
		/* 291 */ YY_NOT_ACCEPT,
		/* 292 */ YY_NO_ANCHOR,
		/* 293 */ YY_NOT_ACCEPT,
		/* 294 */ YY_NO_ANCHOR,
		/* 295 */ YY_NOT_ACCEPT,
		/* 296 */ YY_NO_ANCHOR,
		/* 297 */ YY_NOT_ACCEPT,
		/* 298 */ YY_NO_ANCHOR,
		/* 299 */ YY_NOT_ACCEPT,
		/* 300 */ YY_NO_ANCHOR,
		/* 301 */ YY_NOT_ACCEPT,
		/* 302 */ YY_NO_ANCHOR,
		/* 303 */ YY_NOT_ACCEPT,
		/* 304 */ YY_NO_ANCHOR,
		/* 305 */ YY_NOT_ACCEPT,
		/* 306 */ YY_NO_ANCHOR,
		/* 307 */ YY_NOT_ACCEPT,
		/* 308 */ YY_NO_ANCHOR,
		/* 309 */ YY_NOT_ACCEPT,
		/* 310 */ YY_NO_ANCHOR,
		/* 311 */ YY_NOT_ACCEPT,
		/* 312 */ YY_NO_ANCHOR,
		/* 313 */ YY_NOT_ACCEPT,
		/* 314 */ YY_NO_ANCHOR,
		/* 315 */ YY_NOT_ACCEPT,
		/* 316 */ YY_NO_ANCHOR,
		/* 317 */ YY_NOT_ACCEPT,
		/* 318 */ YY_NO_ANCHOR,
		/* 319 */ YY_NOT_ACCEPT,
		/* 320 */ YY_NO_ANCHOR,
		/* 321 */ YY_NOT_ACCEPT,
		/* 322 */ YY_NO_ANCHOR,
		/* 323 */ YY_NOT_ACCEPT,
		/* 324 */ YY_NO_ANCHOR,
		/* 325 */ YY_NOT_ACCEPT,
		/* 326 */ YY_NO_ANCHOR,
		/* 327 */ YY_NOT_ACCEPT,
		/* 328 */ YY_NO_ANCHOR,
		/* 329 */ YY_NOT_ACCEPT,
		/* 330 */ YY_NO_ANCHOR,
		/* 331 */ YY_NOT_ACCEPT,
		/* 332 */ YY_NO_ANCHOR,
		/* 333 */ YY_NOT_ACCEPT,
		/* 334 */ YY_NO_ANCHOR,
		/* 335 */ YY_NOT_ACCEPT,
		/* 336 */ YY_NO_ANCHOR,
		/* 337 */ YY_NOT_ACCEPT,
		/* 338 */ YY_NO_ANCHOR,
		/* 339 */ YY_NOT_ACCEPT,
		/* 340 */ YY_NO_ANCHOR,
		/* 341 */ YY_NOT_ACCEPT,
		/* 342 */ YY_NO_ANCHOR,
		/* 343 */ YY_NOT_ACCEPT,
		/* 344 */ YY_NO_ANCHOR,
		/* 345 */ YY_NOT_ACCEPT,
		/* 346 */ YY_NO_ANCHOR,
		/* 347 */ YY_NOT_ACCEPT,
		/* 348 */ YY_NO_ANCHOR,
		/* 349 */ YY_NOT_ACCEPT,
		/* 350 */ YY_NO_ANCHOR,
		/* 351 */ YY_NOT_ACCEPT,
		/* 352 */ YY_NO_ANCHOR,
		/* 353 */ YY_NOT_ACCEPT,
		/* 354 */ YY_NO_ANCHOR,
		/* 355 */ YY_NOT_ACCEPT,
		/* 356 */ YY_NO_ANCHOR,
		/* 357 */ YY_NOT_ACCEPT,
		/* 358 */ YY_NO_ANCHOR,
		/* 359 */ YY_NOT_ACCEPT,
		/* 360 */ YY_NO_ANCHOR,
		/* 361 */ YY_NOT_ACCEPT,
		/* 362 */ YY_NO_ANCHOR,
		/* 363 */ YY_NOT_ACCEPT,
		/* 364 */ YY_NO_ANCHOR,
		/* 365 */ YY_NOT_ACCEPT,
		/* 366 */ YY_NO_ANCHOR,
		/* 367 */ YY_NOT_ACCEPT,
		/* 368 */ YY_NO_ANCHOR,
		/* 369 */ YY_NOT_ACCEPT,
		/* 370 */ YY_NO_ANCHOR,
		/* 371 */ YY_NOT_ACCEPT,
		/* 372 */ YY_NO_ANCHOR,
		/* 373 */ YY_NOT_ACCEPT,
		/* 374 */ YY_NO_ANCHOR,
		/* 375 */ YY_NOT_ACCEPT,
		/* 376 */ YY_NO_ANCHOR,
		/* 377 */ YY_NOT_ACCEPT,
		/* 378 */ YY_NO_ANCHOR,
		/* 379 */ YY_NOT_ACCEPT,
		/* 380 */ YY_NO_ANCHOR,
		/* 381 */ YY_NOT_ACCEPT,
		/* 382 */ YY_NO_ANCHOR,
		/* 383 */ YY_NOT_ACCEPT,
		/* 384 */ YY_NO_ANCHOR,
		/* 385 */ YY_NO_ANCHOR,
		/* 386 */ YY_NO_ANCHOR,
		/* 387 */ YY_NO_ANCHOR,
		/* 388 */ YY_NO_ANCHOR,
		/* 389 */ YY_NO_ANCHOR,
		/* 390 */ YY_NO_ANCHOR,
		/* 391 */ YY_NO_ANCHOR,
		/* 392 */ YY_NO_ANCHOR,
		/* 393 */ YY_NO_ANCHOR,
		/* 394 */ YY_NO_ANCHOR,
		/* 395 */ YY_NOT_ACCEPT,
		/* 396 */ YY_NO_ANCHOR,
		/* 397 */ YY_NOT_ACCEPT,
		/* 398 */ YY_NOT_ACCEPT,
		/* 399 */ YY_NO_ANCHOR,
		/* 400 */ YY_NOT_ACCEPT,
		/* 401 */ YY_NO_ANCHOR,
		/* 402 */ YY_NOT_ACCEPT,
		/* 403 */ YY_NOT_ACCEPT,
		/* 404 */ YY_NO_ANCHOR,
		/* 405 */ YY_NOT_ACCEPT,
		/* 406 */ YY_NO_ANCHOR,
		/* 407 */ YY_NOT_ACCEPT,
		/* 408 */ YY_NO_ANCHOR,
		/* 409 */ YY_NOT_ACCEPT,
		/* 410 */ YY_NOT_ACCEPT,
		/* 411 */ YY_NOT_ACCEPT,
		/* 412 */ YY_NO_ANCHOR,
		/* 413 */ YY_NOT_ACCEPT,
		/* 414 */ YY_NO_ANCHOR,
		/* 415 */ YY_NOT_ACCEPT,
		/* 416 */ YY_NOT_ACCEPT,
		/* 417 */ YY_NOT_ACCEPT,
		/* 418 */ YY_NO_ANCHOR,
		/* 419 */ YY_NOT_ACCEPT,
		/* 420 */ YY_NOT_ACCEPT,
		/* 421 */ YY_NO_ANCHOR,
		/* 422 */ YY_NOT_ACCEPT,
		/* 423 */ YY_NO_ANCHOR,
		/* 424 */ YY_NO_ANCHOR,
		/* 425 */ YY_NOT_ACCEPT,
		/* 426 */ YY_NO_ANCHOR,
		/* 427 */ YY_NO_ANCHOR,
		/* 428 */ YY_NOT_ACCEPT,
		/* 429 */ YY_NO_ANCHOR,
		/* 430 */ YY_NOT_ACCEPT,
		/* 431 */ YY_NOT_ACCEPT,
		/* 432 */ YY_NOT_ACCEPT,
		/* 433 */ YY_NOT_ACCEPT,
		/* 434 */ YY_NO_ANCHOR,
		/* 435 */ YY_NO_ANCHOR,
		/* 436 */ YY_NOT_ACCEPT,
		/* 437 */ YY_NOT_ACCEPT,
		/* 438 */ YY_NOT_ACCEPT,
		/* 439 */ YY_NO_ANCHOR,
		/* 440 */ YY_NOT_ACCEPT,
		/* 441 */ YY_NO_ANCHOR,
		/* 442 */ YY_NO_ANCHOR,
		/* 443 */ YY_NO_ANCHOR,
		/* 444 */ YY_NO_ANCHOR,
		/* 445 */ YY_NOT_ACCEPT,
		/* 446 */ YY_NO_ANCHOR,
		/* 447 */ YY_NO_ANCHOR,
		/* 448 */ YY_NOT_ACCEPT,
		/* 449 */ YY_NO_ANCHOR,
		/* 450 */ YY_NOT_ACCEPT,
		/* 451 */ YY_NO_ANCHOR,
		/* 452 */ YY_NO_ANCHOR,
		/* 453 */ YY_NO_ANCHOR,
		/* 454 */ YY_NOT_ACCEPT,
		/* 455 */ YY_NO_ANCHOR,
		/* 456 */ YY_NOT_ACCEPT,
		/* 457 */ YY_NO_ANCHOR,
		/* 458 */ YY_NOT_ACCEPT,
		/* 459 */ YY_NO_ANCHOR,
		/* 460 */ YY_NO_ANCHOR,
		/* 461 */ YY_NO_ANCHOR,
		/* 462 */ YY_NO_ANCHOR,
		/* 463 */ YY_NO_ANCHOR,
		/* 464 */ YY_NO_ANCHOR,
		/* 465 */ YY_NO_ANCHOR,
		/* 466 */ YY_NO_ANCHOR,
		/* 467 */ YY_NOT_ACCEPT,
		/* 468 */ YY_NO_ANCHOR,
		/* 469 */ YY_NO_ANCHOR,
		/* 470 */ YY_NO_ANCHOR,
		/* 471 */ YY_NO_ANCHOR,
		/* 472 */ YY_NOT_ACCEPT,
		/* 473 */ YY_NO_ANCHOR,
		/* 474 */ YY_NO_ANCHOR,
		/* 475 */ YY_NO_ANCHOR,
		/* 476 */ YY_NO_ANCHOR,
		/* 477 */ YY_NO_ANCHOR,
		/* 478 */ YY_NO_ANCHOR,
		/* 479 */ YY_NOT_ACCEPT,
		/* 480 */ YY_NOT_ACCEPT,
		/* 481 */ YY_NOT_ACCEPT,
		/* 482 */ YY_NOT_ACCEPT,
		/* 483 */ YY_NO_ANCHOR,
		/* 484 */ YY_NO_ANCHOR,
		/* 485 */ YY_NOT_ACCEPT,
		/* 486 */ YY_NO_ANCHOR,
		/* 487 */ YY_NOT_ACCEPT,
		/* 488 */ YY_NO_ANCHOR,
		/* 489 */ YY_NO_ANCHOR,
		/* 490 */ YY_NO_ANCHOR,
		/* 491 */ YY_NO_ANCHOR,
		/* 492 */ YY_NOT_ACCEPT,
		/* 493 */ YY_NO_ANCHOR,
		/* 494 */ YY_NO_ANCHOR,
		/* 495 */ YY_NO_ANCHOR,
		/* 496 */ YY_NO_ANCHOR,
		/* 497 */ YY_NO_ANCHOR,
		/* 498 */ YY_NO_ANCHOR,
		/* 499 */ YY_NO_ANCHOR,
		/* 500 */ YY_NO_ANCHOR,
		/* 501 */ YY_NO_ANCHOR,
		/* 502 */ YY_NO_ANCHOR,
		/* 503 */ YY_NOT_ACCEPT,
		/* 504 */ YY_NO_ANCHOR,
		/* 505 */ YY_NO_ANCHOR,
		/* 506 */ YY_NOT_ACCEPT,
		/* 507 */ YY_NO_ANCHOR,
		/* 508 */ YY_NOT_ACCEPT,
		/* 509 */ YY_NO_ANCHOR,
		/* 510 */ YY_NO_ANCHOR,
		/* 511 */ YY_NO_ANCHOR,
		/* 512 */ YY_NO_ANCHOR,
		/* 513 */ YY_NO_ANCHOR,
		/* 514 */ YY_NO_ANCHOR,
		/* 515 */ YY_NO_ANCHOR,
		/* 516 */ YY_NO_ANCHOR,
		/* 517 */ YY_NOT_ACCEPT,
		/* 518 */ YY_NO_ANCHOR,
		/* 519 */ YY_NO_ANCHOR,
		/* 520 */ YY_NO_ANCHOR,
		/* 521 */ YY_NOT_ACCEPT,
		/* 522 */ YY_NO_ANCHOR,
		/* 523 */ YY_NO_ANCHOR,
		/* 524 */ YY_NO_ANCHOR,
		/* 525 */ YY_NO_ANCHOR,
		/* 526 */ YY_NO_ANCHOR,
		/* 527 */ YY_NO_ANCHOR,
		/* 528 */ YY_NO_ANCHOR,
		/* 529 */ YY_NO_ANCHOR,
		/* 530 */ YY_NO_ANCHOR,
		/* 531 */ YY_NO_ANCHOR,
		/* 532 */ YY_NO_ANCHOR,
		/* 533 */ YY_NO_ANCHOR,
		/* 534 */ YY_NO_ANCHOR,
		/* 535 */ YY_NO_ANCHOR,
		/* 536 */ YY_NO_ANCHOR,
		/* 537 */ YY_NO_ANCHOR,
		/* 538 */ YY_NO_ANCHOR,
		/* 539 */ YY_NO_ANCHOR,
		/* 540 */ YY_NO_ANCHOR,
		/* 541 */ YY_NO_ANCHOR,
		/* 542 */ YY_NO_ANCHOR,
		/* 543 */ YY_NOT_ACCEPT,
		/* 544 */ YY_NO_ANCHOR,
		/* 545 */ YY_NO_ANCHOR,
		/* 546 */ YY_NO_ANCHOR,
		/* 547 */ YY_NO_ANCHOR,
		/* 548 */ YY_NOT_ACCEPT,
		/* 549 */ YY_NO_ANCHOR,
		/* 550 */ YY_NOT_ACCEPT,
		/* 551 */ YY_NOT_ACCEPT,
		/* 552 */ YY_NOT_ACCEPT,
		/* 553 */ YY_NO_ANCHOR,
		/* 554 */ YY_NOT_ACCEPT,
		/* 555 */ YY_NOT_ACCEPT,
		/* 556 */ YY_NOT_ACCEPT,
		/* 557 */ YY_NOT_ACCEPT,
		/* 558 */ YY_NOT_ACCEPT,
		/* 559 */ YY_NOT_ACCEPT,
		/* 560 */ YY_NOT_ACCEPT,
		/* 561 */ YY_NOT_ACCEPT,
		/* 562 */ YY_NOT_ACCEPT,
		/* 563 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,130,
"2:9,4,0,2:2,0,2:18,3,11,35,2:3,41,2,47,48,2:2,45,14,12,37,43,32,33,34,42:6," +
"46,1,38,39,40,31,2,51,36:3,53,36,54,36:8,52,36:10,2:4,55,2,5,23,6,13,10,20," +
"30,22,8,36,19,24,27,16,15,28,36,26,18,7,25,9,21,17,29,36,49,2,50,44,2,56:2")[0];

	private int yy_rmap[] = unpackFromString(1,564,
"0,1,2,3,4,2:3,5,2:8,6,2:2,7,8,6:2,2,9,6:2,2:3,6:8,10,6:16,2,6:13,2:4,6,2:6," +
"6,2:17,11,12,13,14,15:3,16,17,18,19,20,21,22,12,23,24,25,26,27,28,29,30,31," +
"32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56," +
"57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81," +
"82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,1" +
"05,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123," +
"124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142" +
",143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,16" +
"1,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,1" +
"80,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198," +
"199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217" +
",218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,23" +
"6,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,2" +
"55,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273," +
"274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292" +
",293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,31" +
"1,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,3" +
"30,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348," +
"349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367" +
",368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,38" +
"6,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,4" +
"05,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423," +
"424,425,426,427,428,429,430,431,432,433,434,435,436,437,6,438,439,440,441,4" +
"42,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460," +
"461,462,463,464,465,466,467,468,469,470,471")[0];

	private int yy_nxt[][] = unpackFromString(472,57,
"-1,1,2,3,101,4,388,462,497,102,514,5,6,522,2,106,523,524,525,526,527,528,52" +
"9,530,531,532,533,534,535,529:2,7,8:3,100,529,105,108,111,2,389,8,103,9,10," +
"11,12,13,14,15,536,537,538,539,2,16,-1,1:55,-1:61,3,-1:58,529,540,529:4,-1," +
"99,541,-1,529,109,529,112,529:5,114,116,529:5,-1,529:3,-1,529,104,-1:4,529:" +
"2,-1:7,529:4,118,-1:6,104:6,-1,99,104,-1,104:16,-1,8:3,-1,104:2,-1,110,-1:2" +
",8:2,-1:7,104:4,-1:7,529:6,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529" +
":2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,220,529:15,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:6,529:3,427,529:2,-1,99,529,-1,529:6,222,529:9,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:12" +
",230,529:3,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,5" +
"29,-1,529,452,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:19,11" +
"9,-1:41,113,-1,113:6,-1:2,113,-1,113:16,-1,113:3,18,113,-1:5,113:2,-1:7,113" +
":4,-1:6,101,-1:57,529:6,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1,107,-1:2" +
",529:2,-1:7,529:4,118,-1:6,104:6,-1,99,104,-1,104:16,-1,104:3,-1,104:2,-1:4" +
",104:2,-1:7,104:4,-1:7,529:6,-1,99,529,-1,529:11,17,529:4,-1,529:3,-1,529,1" +
"04,-1:4,529:2,-1:7,529:4,118,-1:41,24,-1:55,115,-1:22,529:6,-1,99,20,-1,529" +
":16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:41,28,-1:56,19,-1:21,5" +
"29:6,-1,99,529,-1,529:4,21,529:11,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4" +
",118,-1:6,529:6,-1,99,529,-1,529:9,22,529:6,-1,529:3,-1,529,104,-1:4,529:2," +
"-1:7,529:4,118,-1:41,29,-1:21,529:2,164,529:3,-1,99,529,-1,529:16,-1,529:3," +
"-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:41,30,-1:21,118:6,-1:2,118,-1,118:1" +
"6,-1,118:3,-1,118,-1:5,118:2,-1:7,118:5,-1:17,123,-1:45,529:6,-1,99,529,-1," +
"529:3,499,529:12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:28,129,-1" +
":34,529:6,-1,99,529,-1,529,166,529:10,468,168,529:2,-1,529:3,-1,529,104,-1:" +
"4,529:2,-1:7,529:4,118,-1:11,131,-1:51,529:5,501,-1,99,529,-1,529:16,-1,529" +
":3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,395,-1:54,529:6,-1,99,529,-1,5" +
"29:11,170,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:7,467,-1:6" +
",133,-1:13,543,-1:34,172,529:5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4" +
",529:2,-1:7,529:4,118,-1:16,135,-1:46,529:6,-1,99,529,-1,529:5,406,529:10,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:29,139,-1:33,529:6,-1,99,17" +
"4,-1,529:5,23,529:10,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,14" +
"7,-1:51,529:6,-1,99,529,-1,529:13,176,529:2,-1,529:3,-1,529,104,-1:4,529:2," +
"-1:7,529:4,118,-1:14,149,-1:48,529:6,-1,99,529,-1,529:3,408,529,404,529:10," +
"-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,398,151,153,-1:54,529:6," +
"-1,99,529,-1,529:12,180,529:3,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118" +
",-1:19,157,-1:43,529:6,-1,99,529,-1,529,182,529:14,-1,529:3,-1,529,104,-1:4" +
",529:2,-1:7,529:4,118,-1:15,159,-1:47,529:6,-1,99,529,-1,529,184,529:9,25,5" +
"29:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:9,400,-1:53,529:6,-1," +
"99,529,-1,529:11,26,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:" +
"17,163,-1:45,529:6,-1,99,529,-1,188,529:15,-1,529:3,-1,529,104,-1:4,529:2,-" +
"1:7,529:4,118,-1:21,165,-1:41,529:6,-1,99,529,-1,529:9,190,529:6,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,56,-1:51,529:6,-1,99,529,-1,529:5" +
",27,529:10,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,169,-1:46,52" +
"9,198,529:4,-1,99,529,-1,529,200,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7" +
",529:4,118,-1:11,403,-1:51,529:6,-1,99,529,121,529:16,-1,529:3,-1,529,104,-" +
"1:4,529:2,-1:7,529:4,118,-1:27,171,-1:35,529:2,204,529:3,-1,99,553,-1,529:9" +
",474,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:25,175,-1:37,52" +
"9:6,-1,99,418,-1,529:12,208,529:3,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4" +
",118,-1:7,410,-1:55,529:3,218,529:2,-1,99,529,-1,529:16,-1,529:3,-1,529,104" +
",-1:4,529:2,-1:7,529:4,118,-1:19,407,-1,177,-1:5,472,-1,405,-1:33,529:6,-1," +
"99,529,125,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,503,-1" +
":54,529:6,-1,99,529,-1,31,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4," +
"118,-1:6,179,-1:56,529:4,516,529,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:19,517,-1:43,529:6,-1,99,529,-1,529:14,423,529,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,185,-1:45,529:5,426,-1,9" +
"9,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,189,-1:" +
"51,529,224,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,52" +
"9:4,118,-1:21,411,-1:41,529:6,-1,99,529,-1,32,529:15,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:16,191,-1:46,421,529:4,518,-1,99,529,-1,529:16,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:27,415,-1:35,529:2,226,529:" +
"3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:26,4" +
"22,-1:36,228,529:5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7," +
"529:4,118,-1:15,203,-1:47,529:6,-1,99,33,-1,529:16,-1,529:3,-1,529,104,-1:4" +
",529:2,-1:7,529:4,118,-1:6,207,-1:56,529:5,34,-1,99,529,-1,529:16,-1,529:3," +
"-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,420,-1:54,529:6,-1,99,529,127,529" +
":16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:28,211,-1:34,529:6,-1," +
"99,529,-1,529:6,35,529:9,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:1" +
"9,215,-1:43,529:6,-1,99,529,-1,529:10,234,529:5,-1,529:3,-1,529,104,-1:4,52" +
"9:2,-1:7,529:4,118,-1:31,70,-1:31,529:6,-1,99,529,-1,529:6,435,529:9,-1,529" +
":3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,428,-1:45,529:6,-1,99,529,-1," +
"529:7,236,529:8,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,219,-1:" +
"51,529:6,-1,99,529,-1,529,238,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,52" +
"9:4,118,-1:7,430,221,-1:54,529:6,-1,99,529,-1,529:4,240,529:11,-1,529:3,-1," +
"529,104,-1:4,529:2,-1:7,529:4,118,-1:25,432,-1:37,529:6,-1,99,529,-1,529:15" +
",36,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:18,229,-1:44,529:6,-1," +
"99,37,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:33,71,72,7" +
"3,-1:27,529:6,-1,99,529,-1,529:11,484,529:4,-1,529:3,-1,529,104,-1:4,529:2," +
"-1:7,529:4,118,-1:26,233,-1:36,529:6,-1,99,529,-1,529:15,439,-1,529:3,-1,52" +
"9,104,-1:4,529:2,-1:7,529:4,118,-1:24,480,-1:38,529:6,-1,99,529,-1,250,529:" +
"15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:27,506,-1:35,529:6,-1,9" +
"9,529,-1,529:3,545,529:12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:" +
"19,75,-1:43,529:6,-1,99,529,-1,529:5,252,529:10,-1,529:3,-1,529,104,-1:4,52" +
"9:2,-1:7,529:4,118,-1:29,482,-1:33,529:6,-1,99,529,-1,529:16,-1,529:3,-1,52" +
"9,104,-1:4,529:2,-1:7,529,429,529:2,118,-1:8,237,-1:54,529:6,-1,99,529,-1,5" +
"29:9,254,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,433,-1:4" +
"6,529:4,520,529,-1,99,529,-1,529,256,529:14,-1,529:3,-1,529,104,-1:4,529:2," +
"-1:7,529:4,118,-1:27,76,-1:35,529:6,-1,99,529,-1,529:11,38,529:4,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,437,-1:51,529:6,-1,99,529,-1,529:" +
"7,39,529:8,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,550,-1:56,529" +
":5,40,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:" +
"28,239,-1:34,529:6,-1,99,529,-1,529:14,41,529,-1,529:3,-1,529,104,-1:4,529:" +
"2,-1:7,529:4,118,-1:23,77,-1:39,529:3,443,529:2,-1,99,529,-1,529:16,-1,529:" +
"3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,78,-1:54,274,529:5,-1,99,529,-1" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:9,245,-1:53,529:6," +
"-1,99,529,-1,529:11,42,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118," +
"-1:17,247,-1:45,529:6,-1,99,529,-1,529:3,43,529:12,-1,529:3,-1,529,104,-1:4" +
",529:2,-1:7,529:4,118,-1:18,438,-1:44,447,529:5,-1,99,529,-1,529:3,489,529:" +
"12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:27,440,-1:35,529:5,546," +
"-1,99,276,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,79," +
"-1:51,529:6,-1,99,529,-1,529:6,278,529:9,-1,529:3,-1,529,104,-1:4,529:2,-1:" +
"7,529:4,118,-1:8,487,-1:54,529:5,280,-1,99,529,-1,529:16,-1,529:3,-1,529,10" +
"4,-1:4,529:2,-1:7,529:4,118,-1:15,261,-1:47,529:6,-1,99,529,137,529:16,-1,5" +
"29:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,80,-1:54,529:6,-1,99,529,-1," +
"529:8,284,529:7,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:9,263,-1:5" +
"3,529,288,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:26,265,-1:36,529:4,451,529,-1,99,529,-1,529:16,-1,529:3,-1,529,10" +
"4,-1:4,529:2,-1:7,529:4,118,-1:11,267,-1:51,529:6,-1,99,529,-1,511,529:15,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:18,273,-1:44,529:6,-1,99,52" +
"9,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529,493,529:2,118,-1:19,275" +
",-1:43,529:6,-1,99,529,-1,529:15,44,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:27,277,-1:35,529:6,-1,99,529,-1,529,296,529:14,-1,529:3,-1,529,10" +
"4,-1:4,529:2,-1:7,529:4,118,-1:28,279,-1:34,529:6,-1,99,529,-1,529:11,494,5" +
"29:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:7,450,-1:55,529:6,-1," +
"99,529,-1,529:3,298,529:12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1" +
":8,82,-1:54,529:6,-1,99,529,143,529:4,302,529:11,-1,529:3,-1,529,104,-1:4,5" +
"29:2,-1:7,529:4,118,-1:8,83,-1:54,529:6,-1,99,529,-1,529:7,45,529:8,-1,529:" +
"3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:14,285,-1:48,529:6,-1,99,529,-1,5" +
"29:9,495,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:19,84,-1:43" +
",529:6,-1,99,46,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:" +
"23,85,-1:39,529:2,47,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529" +
":2,-1:7,529:4,118,-1:8,86,-1:54,529:6,-1,99,529,-1,529:9,48,529:6,-1,529:3," +
"-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,289,-1:54,529:6,-1,99,529,-1,49,5" +
"29:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,291,-1:51,316,529" +
":5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:19," +
"87,-1:43,529:6,-1,99,529,-1,529:5,318,529:10,-1,529:3,-1,529,104,-1:4,529:2" +
",-1:7,529:4,118,-1:9,295,-1:53,529:3,453,529:2,-1,99,529,-1,529:16,-1,529:3" +
",-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,297,-1:46,529:5,322,-1,99,529,-" +
"1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:15,303,-1:47,529:" +
"6,-1,99,529,155,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,8" +
"8,-1:54,529:5,50,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,52" +
"9:4,118,-1:27,305,-1:35,529:6,-1,99,529,-1,529:9,51,529:6,-1,529:3,-1,529,1" +
"04,-1:4,529:2,-1:7,529:4,118,-1:19,307,-1:43,529:2,52,529:3,-1,99,529,-1,52" +
"9:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:18,309,-1:44,529:2,33" +
"4,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-" +
"1:7,89,-1:55,529:6,-1,99,529,-1,336,529:15,-1,529:3,-1,529,104,-1:4,529:2,-" +
"1:7,529:4,118,-1:17,90,-1:45,529:5,53,-1,99,529,-1,529:16,-1,529:3,-1,529,1" +
"04,-1:4,529:2,-1:7,529:4,118,-1:8,91,-1:54,529:6,-1,99,529,-1,529:15,342,-1" +
",529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,454,-1:45,529:6,-1,99,529" +
",-1,529:8,54,529:7,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:22,311," +
"-1:40,529:6,-1,99,529,-1,529,344,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7" +
",529:4,118,-1:9,313,-1:53,529:6,-1,99,529,-1,529:8,348,529:7,-1,529:3,-1,52" +
"9,104,-1:4,529:2,-1:7,529:4,118,-1:8,315,-1:54,529:6,-1,99,529,161,529:16,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,92,-1:54,529:6,-1,99,350," +
"-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:21,456,-1:41,529" +
":6,-1,99,529,-1,529:9,55,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,11" +
"8,-1:7,319,-1:55,529:6,-1,99,529,-1,529:12,352,529:3,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:27,321,-1:35,529:6,-1,99,529,-1,529:11,354,529:4" +
",-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,323,-1:51,529:6,-1,99," +
"529,-1,529:3,356,529:12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8," +
"327,-1:54,529:5,57,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7," +
"529:4,118,-1:9,329,-1:53,529:6,-1,99,529,-1,529:9,496,529:6,-1,529:3,-1,529" +
",104,-1:4,529:2,-1:7,529:4,118,-1:18,331,-1:44,529:6,-1,99,529,173,529:16,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:19,93,-1:43,529:6,-1,99,529" +
",-1,529:15,58,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:15,335,-1:47" +
",529:6,-1,99,529,-1,529:12,59,529:3,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:7,337,-1:55,529:6,-1,99,529,-1,529,60,529:14,-1,529:3,-1,529,104," +
"-1:4,529:2,-1:7,529:4,118,-1:8,94,-1:54,360,529:5,-1,99,529,-1,529:16,-1,52" +
"9:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,95,-1:54,529:5,61,-1,99,529,-" +
"1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:21,339,-1:2,341,-" +
"1:38,529:2,62,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7" +
",529:4,118,-1:8,96,-1:54,529:2,63,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529" +
",104,-1:4,529:2,-1:7,529:4,118,-1:16,343,-1:46,529:5,64,-1,99,529,-1,529:16" +
",-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,345,-1:56,529:6,-1,99,5" +
"29,-1,529:7,362,529:8,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:27,3" +
"47,-1:35,529,364,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-" +
"1:7,529:4,118,-1:7,349,-1:55,529:6,-1,99,529,-1,529:2,461,529:13,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:22,351,-1:40,529:5,366,-1,99,529,-1," +
"529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:20,353,-1:42,529:6," +
"-1,99,529,413,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,355" +
",-1:56,529:5,65,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:22,357,-1:40,529:6,-1,99,368,-1,529:16,-1,529:3,-1,529,104,-1:4,5" +
"29:2,-1:7,529:4,118,-1:27,359,-1:35,529:6,-1,99,529,183,529:16,-1,529:3,-1," +
"529,104,-1:4,529:2,-1:7,529:4,118,-1:6,361,-1:56,529:3,374,529:2,-1,99,529," +
"-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:14,363,-1:48,529" +
":6,-1,99,529,-1,529,66,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118" +
",-1:27,365,-1:35,529:2,67,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:" +
"4,529:2,-1:7,529:4,118,-1:15,367,-1:47,529:5,68,-1,99,529,-1,529:16,-1,529:" +
"3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:14,369,-1:48,529:6,-1,99,529,197," +
"529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:26,371,-1:36,529:6," +
"-1,99,529,205,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:15,37" +
"3,-1:47,529:6,-1,99,529,213,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:" +
"4,118,-1:17,375,-1:45,529:6,-1,99,69,-1,529:16,-1,529:3,-1,529,104,-1:4,529" +
":2,-1:7,529:4,118,-1:26,377,-1:36,529:2,382,529:3,-1,99,529,-1,529:16,-1,52" +
"9:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:9,379,-1:53,529:6,-1,99,529,425" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,381,-1:45,529:4" +
",384,529,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118," +
"-1:8,97,-1:54,529:6,-1,99,529,-1,74,529:15,-1,529:3,-1,529,104,-1:4,529:2,-" +
"1:7,529:4,118,-1:9,383,-1:53,529:3,385,529:2,-1,99,529,-1,529:16,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,98,-1:54,529:5,386,-1,99,529,-1,52" +
"9:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1," +
"387,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,5" +
"29,257,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,9" +
"9,529,-1,529,81,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,1" +
"20,529:5,-1,99,529,-1,122,529:8,124,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1" +
":7,529:4,118,-1:40,117,-1:22,529:2,186,529:3,-1,99,529,-1,529:16,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:3,412,529:1" +
"2,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:5,196,-1,99,529,-1" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529," +
"-1,529:11,192,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,202," +
"529:5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:" +
"16,141,-1:46,529:6,-1,99,529,-1,529:13,178,529:2,-1,529:3,-1,529,104,-1:4,5" +
"29:2,-1:7,529:4,118,-1:14,402,-1:61,167,-1:43,529:6,-1,99,529,-1,529,206,52" +
"9:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,409,-1:45,529:6,-1" +
",99,529,-1,529:9,470,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1" +
":11,181,-1:72,187,-1:35,529:3,476,529:2,-1,99,529,-1,529:16,-1,529:3,-1,529" +
",104,-1:4,529:2,-1:7,529:4,118,-1:6,416,-1:56,529:5,504,-1,99,529,-1,529:16" +
",-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,417,-1:51,529,549,529:" +
"4,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:21,1" +
"95,-1:51,193,-1:67,217,-1:35,529:2,244,529:3,-1,99,529,-1,529:16,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:26,419,-1:36,232,529:5,-1,99,529,-1," +
"529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,225,-1:58,227,-1:" +
"76,223,-1:34,529:6,-1,99,529,-1,529:10,248,529:5,-1,529:3,-1,529,104,-1:4,5" +
"29:2,-1:7,529:4,118,-1:17,231,-1:50,235,-1:51,529:6,-1,99,529,-1,529,270,52" +
"9:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:25,479,-1:37,529:6,-1" +
",99,529,-1,529:11,434,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-" +
"1:6,529:6,-1,99,529,-1,262,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4" +
",118,-1:27,481,-1:35,529:6,-1,99,529,-1,529:3,266,529:12,-1,529:3,-1,529,10" +
"4,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:5,258,529:10,-1,529" +
":3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,431,-1:54,529:6,-1,99,529,-1,5" +
"29:9,449,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,436,-1:5" +
"1,253,-1:51,241,-1:78,560,-1:34,529:3,300,529:2,-1,99,529,-1,529:16,-1,529:" +
"3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,491,529:5,-1,99,529,-1,529:16,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:17,508,-1:66,259,-1:37,269," +
"-1:54,529:5,286,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:9,445,-1:53,529,292,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,104" +
",-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,510,529:15,-1,529:3,-1,5" +
"29,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529,563,529:14,-1," +
"529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11,4" +
"46,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:7,287,-1:55,529:6" +
",-1,99,529,-1,529:3,340,529:12,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,11" +
"8,-1:6,529:6,-1,99,529,-1,529:9,312,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1" +
":7,529:4,118,-1:11,293,-1:51,330,529:5,-1,99,529,-1,529:16,-1,529:3,-1,529," +
"104,-1:4,529:2,-1:7,529:4,118,-1:16,301,-1:46,529:5,324,-1,99,529,-1,529:16" +
",-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,338," +
"529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-" +
"1,529,459,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,317,-1:" +
"54,529:6,-1,99,358,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118," +
"-1:21,325,-1:41,529:6,-1,99,529,-1,529:12,513,529:3,-1,529:3,-1,529,104,-1:" +
"4,529:2,-1:7,529:4,118,-1:18,333,-1:44,529:5,370,-1,99,529,-1,529:16,-1,529" +
":3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,380,-1,529:16,-1,5" +
"29:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:3,378,529:2,-1,99,529,-1" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529," +
"-1,529:7,126,529:3,128,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118," +
"-1:6,529:2,414,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:" +
"7,529:4,118,-1:6,529:5,473,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529" +
":2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11,210,529:4,-1,529:3,-1,529," +
"104,-1:4,529:2,-1:7,529:4,118,-1:6,216,529:5,-1,99,529,-1,529:16,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,145,-1:46,529:6,-1,99,529,-1,529:" +
"13,424,529:2,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99" +
",529,-1,529,475,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,5" +
"29:3,242,529:2,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:" +
"4,118,-1:6,529:5,505,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:" +
"7,529:4,118,-1:11,199,-1:51,529,442,529:4,-1,99,529,-1,529:16,-1,529:3,-1,5" +
"29,104,-1:4,529:2,-1:7,529:4,118,-1:6,246,529:5,-1,99,529,-1,529:16,-1,529:" +
"3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:10,507,5" +
"29:5,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1," +
"529,509,529:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1," +
"99,529,-1,529:11,264,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1" +
":6,529:6,-1,99,529,-1,529:5,260,529:10,-1,529:3,-1,529,104,-1:4,529:2,-1:7," +
"529:4,118,-1:8,243,-1:64,249,-1:51,255,-1:51,485,-1:56,529:3,306,529:2,-1,9" +
"9,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,488,529:" +
"5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,27" +
"1,-1:54,529:5,304,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,5" +
"29:4,118,-1:9,283,-1:53,529,320,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,1" +
"04,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,314,529:15,-1,529:3,-1" +
",529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529,326,529:14,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11" +
",310,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:7,299,-1:55,529" +
":6,-1,99,529,-1,529:9,332,529:6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,1" +
"18,-1:6,457,529:5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,5" +
"29:4,118,-1:6,529:5,346,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2," +
"-1:7,529:4,118,-1:6,529:5,372,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4," +
"529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529,130,529:3,132,529:5,542,52" +
"9:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:2,194,529:3,-1,9" +
"9,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:5,47" +
"8,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,52" +
"9:6,-1,99,529,-1,529:11,212,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4" +
",118,-1:6,477,529:5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7" +
",529:4,118,-1:6,529:5,441,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:" +
"2,-1:7,529:4,118,-1:11,201,-1:51,529:6,-1,99,529,-1,529:11,486,529:4,-1,529" +
":3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:5,268,5" +
"29:10,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,251,-1:54,290,529:" +
"5,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,44" +
"8,-1:54,529:5,308,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,5" +
"29:4,118,-1:6,529:6,-1,99,529,-1,529,455,529:14,-1,529:3,-1,529,104,-1:4,52" +
"9:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11,328,529:4,-1,529:3,-1,529" +
",104,-1:4,529:2,-1:7,529:4,118,-1:6,529:5,547,-1,99,529,-1,529:16,-1,529:3," +
"-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:5,376,-1,99,529,-1,529:16,-1," +
"529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:2,13" +
"4,529:9,396,529:3,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:2," +
"214,529:3,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118" +
",-1:6,529:5,444,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529" +
":4,118,-1:11,209,-1:51,529:6,-1,99,529,-1,529:11,272,529:4,-1,529:3,-1,529," +
"104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:5,282,529:10,-1,5" +
"29:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,294,529:5,-1,99,529,-1,529:1" +
"6,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:8,281,-1:54,529:5,136,-1" +
",99,529,-1,138,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,14" +
"0,529:5,-1,99,529,-1,142,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,1" +
"18,-1:6,529:6,-1,99,529,-1,144,529:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,5" +
"29:4,118,-1:6,529:5,390,-1,99,529,-1,529:7,146,529:8,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:3,463,529:9,148,529:2,-" +
"1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,393,52" +
"9:15,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:3,498,529:2,-1," +
"99,529,-1,529:5,150,529,392,529:8,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4" +
",118,-1:6,152,529:4,401,-1,99,529,-1,529:11,154,529:4,-1,529:3,-1,529,104,-" +
"1:4,529:2,-1:7,529:4,118,-1:6,529:3,391,529:2,-1,99,529,-1,394,529:15,-1,52" +
"9:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529,156,52" +
"9:14,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,399,529:4,158,-1,99" +
",529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,469,529:5" +
",-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,465" +
",529:4,500,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,11" +
"8,-1:6,529,515,529:4,-1,99,529,-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:" +
"7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11,464,529:4,-1,529:3,-1,529,104,-1" +
":4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:5,544,529:10,-1,529:3,-" +
"1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,466,529:15,-1,5" +
"29:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:2,160,529:3,-1,99,529,-1" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,162," +
"-1,529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,52" +
"9,-1,529:11,471,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:16,3" +
"97,-1:46,529:6,-1,99,529,-1,529:5,502,529:10,-1,529:3,-1,529,104,-1:4,529:2" +
",-1:7,529:4,118,-1:6,529:3,490,529:2,-1,99,529,-1,529:16,-1,529:3,-1,529,10" +
"4,-1:4,529:2,-1:7,529:4,118,-1:6,529:4,512,529,-1,99,529,-1,529:16,-1,529:3" +
",-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:6,529:6,-1,99,529,-1,529:11,460,52" +
"9:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1:11,458,-1:51,529:6,-1," +
"99,529,-1,529:11,483,529:4,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1" +
":17,521,-1:48,492,-1:55,548,-1:54,529:5,519,-1,99,529,-1,529:16,-1,529:3,-1" +
",529,104,-1:4,529:2,-1:7,529:4,118,-1:27,551,-1:46,552,-1:55,555,-1:48,554," +
"-1:55,556,-1:68,557,-1:52,558,-1:52,559,-1:72,561,-1:35,529:6,-1,99,529,562" +
",529:16,-1,529:3,-1,529,104,-1:4,529:2,-1:7,529:4,118,-1");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

//Add code to be executed when the end of the file is reached
	return (new Symbol(sym.EOF,""));
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						{
}
					case -2:
						break;
					case 2:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -3:
						break;
					case 3:
						{
}
					case -4:
						break;
					case 4:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -5:
						break;
					case 5:
						{ 
	return (new Symbol(sym.BANG,yytext()));
}
					case -6:
						break;
					case 6:
						{ 
	return (new Symbol(sym.DOT,yytext()));
}
					case -7:
						break;
					case 7:
						{ 
	return (new Symbol(sym.QUESTION_MARK,yytext()));
}
					case -8:
						break;
					case 8:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -9:
						break;
					case 9:
						{ 
	return (new Symbol(sym.NOT,yytext()));
}
					case -10:
						break;
					case 10:
						{ 
	return (new Symbol(sym.COMMA,yytext()));
}
					case -11:
						break;
					case 11:
						{ 
	return (new Symbol(sym.COLON,yytext()));
}
					case -12:
						break;
					case 12:
						{ 
	return (new Symbol(sym.OPEN_PARAN,yytext()));
}
					case -13:
						break;
					case 13:
						{ 
	return (new Symbol(sym.CLOSE_PARAN,yytext()));
}
					case -14:
						break;
					case 14:
						{ 
	return (new Symbol(sym.OPEN_CURLY,yytext()));
}
					case -15:
						break;
					case 15:
						{ 
	return (new Symbol(sym.CLOSE_CURLY,yytext()));
}
					case -16:
						break;
					case 16:
						
					case -17:
						break;
					case 17:
						{ 
	return (new Symbol(sym.OR,yytext()));
}
					case -18:
						break;
					case 18:
						{ 
	return (new Symbol(sym.STRING_LIT,yytext()));
}
					case -19:
						break;
					case 19:
						{ 
	return (new Symbol(sym.IMPLICATION,yytext()));
}
					case -20:
						break;
					case 20:
						{ 
	return (new Symbol(sym.AND,yytext()));
}
					case -21:
						break;
					case 21:
						{ 
	return (new Symbol(sym.ASK,yytext()));
}
					case -22:
						break;
					case 22:
						{ 
	return (new Symbol(sym.ALL,yytext()));
}
					case -23:
						break;
					case 23:
						{ 
	return (new Symbol(sym.IFF,yytext()));
}
					case -24:
						break;
					case 24:
						{ 
	return (new Symbol(sym.OR_ENTAILMENT,yytext()));
}
					case -25:
						break;
					case 25:
						{ 
	return (new Symbol(sym.NOR,yytext()));
}
					case -26:
						break;
					case 26:
						{ 
	return (new Symbol(sym.XOR,yytext()));
}
					case -27:
						break;
					case 27:
						{ 
	return (new Symbol(sym.WFF,yytext()));
}
					case -28:
						break;
					case 28:
						{ 
	return (new Symbol(sym.NUMERICAL_ENTAILMENT,yytext()));
}
					case -29:
						break;
					case 29:
						{ 
	return (new Symbol(sym.EQUALITY,yytext()));
}
					case -30:
						break;
					case 30:
						{ 
	return (new Symbol(sym.AND_ENTAILMENT,yytext()));
}
					case -31:
						break;
					case 31:
						{ 
	return (new Symbol(sym.AUTO,yytext()));
}
					case -32:
						break;
					case 32:
						{ 
	return (new Symbol(sym.IFDO,yytext()));
}
					case -33:
						break;
					case 33:
						{ 
	return (new Symbol(sym.NAND,yytext()));
}
					case -34:
						break;
					case 34:
						{ 
	return (new Symbol(sym.NONE,yytext()));
}
					case -35:
						break;
					case 35:
						{ 
	return (new Symbol(sym.SHOW,yytext()));
}
					case -36:
						break;
					case 36:
						{ 
	return (new Symbol(sym.BANGPATH,yytext()));
}
					case -37:
						break;
					case 37:
						{ 
	return (new Symbol(sym.LOAD,yytext()));
}
					case -38:
						break;
					case 38:
						{ 
	return (new Symbol(sym.ANDOR,yytext()));
}
					case -39:
						break;
					case 39:
						{ 
	return (new Symbol(sym.ASKWH,yytext()));
}
					case -40:
						break;
					case 40:
						{ 
	return (new Symbol(sym.TRACE,yytext()));
}
					case -41:
						break;
					case 41:
						{ 
	return (new Symbol(sym.EMPTYPATH,yytext()));
}
					case -42:
						break;
					case 42:
						{ 
	return (new Symbol(sym.KSTAR,yytext()));
}
					case -43:
						break;
					case 43:
						{ 
	return (new Symbol(sym.KPLUS,yytext()));
}
					case -44:
						break;
					case 44:
						{ 
	return (new Symbol(sym.ACTING,yytext()));
}
					case -45:
						break;
					case 45:
						{ 
	return (new Symbol(sym.THRESH,yytext()));
}
					case -46:
						break;
					case 46:
						{ 
	return (new Symbol(sym.EXPAND,yytext()));
}
					case -47:
						break;
					case 47:
						{ 
	return (new Symbol(sym.EXPERT,yytext()));
}
					case -48:
						break;
					case 48:
						{ 
	return (new Symbol(sym.NORMAL,yytext()));
}
					case -49:
						break;
					case 49:
						{ 
	return (new Symbol(sym.WHENDO,yytext()));
}
					case -50:
						break;
					case 50:
						{ 
	return (new Symbol(sym.REDUCE,yytext()));
}
					case -51:
						break;
					case 51:
						{ 
	return (new Symbol(sym.MANUAL,yytext()));
}
					case -52:
						break;
					case 52:
						{ 
	return (new Symbol(sym.EFFECT,yytext()));
}
					case -53:
						break;
					case 53:
						{ 
	return (new Symbol(sym.COMPOSE,yytext()));
}
					case -54:
						break;
					case 54:
						{ 
	return (new Symbol(sym.CLEARKB,yytext()));
}
					case -55:
						break;
					case 55:
						{ 
	return (new Symbol(sym.WITHALL,yytext()));
}
					case -56:
						break;
					case 56:
						{ 
	return (new Symbol(sym.BR_MODE,yytext()));
}
					case -57:
						break;
					case 57:
						{ 
	return (new Symbol(sym.UNTRACE,yytext()));
}
					case -58:
						break;
					case 58:
						{ 
	return (new Symbol(sym.PARSING,yytext()));
}
					case -59:
						break;
					case 59:
						{ 
	return (new Symbol(sym.PERFORM,yytext()));
}
					case -60:
						break;
					case 60:
						{ 
	return (new Symbol(sym.ACTPLAN,yytext()));
}
					case -61:
						break;
					case 61:
						{ 
	return (new Symbol(sym.ACTIVATE,yytext()));
}
					case -62:
						break;
					case 62:
						{ 
	return (new Symbol(sym.ASKIFNOT,yytext()));
}
					case -63:
						break;
					case 63:
						{ 
	return (new Symbol(sym.ASKWHNOT,yytext()));
}
					case -64:
						break;
					case 64:
						{ 
	return (new Symbol(sym.CONVERSE,yytext()));
}
					case -65:
						break;
					case 65:
						{ 
	return (new Symbol(sym.WITHSOME,yytext()));
}
					case -66:
						break;
					case 66:
						{ 
	return (new Symbol(sym.GOALPLAN,yytext()));
}
					case -67:
						break;
					case 67:
						{ 
	return (new Symbol(sym.COPYRIGHT,yytext()));
}
					case -68:
						break;
					case 68:
						{ 
	return (new Symbol(sym.INFERENCE,yytext()));
}
					case -69:
						break;
					case 69:
						{ 
	return (new Symbol(sym.UNLABELED,yytext()));
}
					case -70:
						break;
					case 70:
						{ 
	return (new Symbol(sym.FILEPATH,yytext()));
}
					case -71:
						break;
					case 71:
						{ 
	return (new Symbol(sym.SET_MODE_1,yytext()));
}
					case -72:
						break;
					case 72:
						{ 
	return (new Symbol(sym.SET_MODE_2,yytext()));
}
					case -73:
						break;
					case 73:
						{ 
	return (new Symbol(sym.SET_MODE_3,yytext()));
}
					case -74:
						break;
					case 74:
						{ 
	return (new Symbol(sym.WHENEVERDO,yytext()));
}
					case -75:
						break;
					case 75:
						{ 
	return (new Symbol(sym.LIST_TERMS,yytext()));
}
					case -76:
						break;
					case 76:
						{ 
	return (new Symbol(sym.CLEAR_INFER,yytext()));
}
					case -77:
						break;
					case 77:
						{ 
	return (new Symbol(sym.DEFINE_PATH,yytext()));
}
					case -78:
						break;
					case 78:
						{ 
	return (new Symbol(sym.SET_CONTEXT,yytext()));
}
					case -79:
						break;
					case 79:
						{ 
	return (new Symbol(sym.DEFINE_FRAME,yytext()));
}
					case -80:
						break;
					case 80:
						{ 
	return (new Symbol(sym.FUNIT,yytext()));
}
					case -81:
						break;
					case 81:
						{ 
	return (new Symbol(sym.PRECONDITION,yytext()));
}
					case -82:
						break;
					case 82:
						{ 
	return (new Symbol(sym.BUNIT,yytext()));
}
					case -83:
						break;
					case 83:
						{ 
	return (new Symbol(sym.BELIEFS_ABOUT,yytext()));
}
					case -84:
						break;
					case 84:
						{ 
	return (new Symbol(sym.LIST_CONTEXTS,yytext()));
}
					case -85:
						break;
					case 85:
						{ 
	return (new Symbol(sym.UNDEFINE_PATH,yytext()));
}
					case -86:
						break;
					case 86:
						{ 
	return (new Symbol(sym.ADD_TO_CONTEXT,yytext()));
}
					case -87:
						break;
					case 87:
						{ 
	return (new Symbol(sym.DESCRIBE_TERMS,yytext()));
}
					case -88:
						break;
					case 88:
						{ 
	return (new Symbol(sym.RANGE_RESTRICT,yytext()));
}
					case -89:
						break;
					case 89:
						{ 
	return (new Symbol(sym.DEFINE_SEMANTIC,yytext()));
}
					case -90:
						break;
					case 90:
						{ 
	return (new Symbol(sym.DEFINE_RELATION,yytext()));
}
					case -91:
						break;
					case 91:
						{ 
	return (new Symbol(sym.DOMAIN_RESTRICT,yytext()));
}
					case -92:
						break;
					case 92:
						{ 
	return (new Symbol(sym.DESCRIBE_CONTEXT,yytext()));
}
					case -93:
						break;
					case 93:
						{ 
	return (new Symbol(sym.LIST_ASSERTED_WFFS,yytext()));
}
					case -94:
						break;
					case 94:
						{ 
	return (new Symbol(sym.SET_DEFAULT_CONTEXT,yytext()));
}
					case -95:
						break;
					case 95:
						{ 
	return (new Symbol(sym.REMOVE_FROM_CONTEXT,yytext()));
}
					case -96:
						break;
					case 96:
						{ 
	return (new Symbol(sym.IRREFLEXIVE_RESTRICT,yytext()));
}
					case -97:
						break;
					case 97:
						{ 
	return (new Symbol(sym.CFRESFUNIT,yytext()));
}
					case -98:
						break;
					case 98:
						{ 
	return (new Symbol(sym.CFRESBUNIT,yytext()));
}
					case -99:
						break;
					case 100:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -100:
						break;
					case 101:
						{
}
					case -101:
						break;
					case 102:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -102:
						break;
					case 103:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -103:
						break;
					case 105:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -104:
						break;
					case 106:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -105:
						break;
					case 108:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -106:
						break;
					case 109:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -107:
						break;
					case 111:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -108:
						break;
					case 112:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -109:
						break;
					case 114:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -110:
						break;
					case 116:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -111:
						break;
					case 118:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -112:
						break;
					case 120:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -113:
						break;
					case 122:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -114:
						break;
					case 124:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -115:
						break;
					case 126:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -116:
						break;
					case 128:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -117:
						break;
					case 130:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -118:
						break;
					case 132:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -119:
						break;
					case 134:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -120:
						break;
					case 136:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -121:
						break;
					case 138:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -122:
						break;
					case 140:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -123:
						break;
					case 142:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -124:
						break;
					case 144:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -125:
						break;
					case 146:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -126:
						break;
					case 148:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -127:
						break;
					case 150:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -128:
						break;
					case 152:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -129:
						break;
					case 154:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -130:
						break;
					case 156:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -131:
						break;
					case 158:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -132:
						break;
					case 160:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -133:
						break;
					case 162:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -134:
						break;
					case 164:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -135:
						break;
					case 166:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -136:
						break;
					case 168:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -137:
						break;
					case 170:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -138:
						break;
					case 172:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -139:
						break;
					case 174:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -140:
						break;
					case 176:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -141:
						break;
					case 178:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -142:
						break;
					case 180:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -143:
						break;
					case 182:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -144:
						break;
					case 184:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -145:
						break;
					case 186:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -146:
						break;
					case 188:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -147:
						break;
					case 190:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -148:
						break;
					case 192:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -149:
						break;
					case 194:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -150:
						break;
					case 196:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -151:
						break;
					case 198:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -152:
						break;
					case 200:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -153:
						break;
					case 202:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -154:
						break;
					case 204:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -155:
						break;
					case 206:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -156:
						break;
					case 208:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -157:
						break;
					case 210:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -158:
						break;
					case 212:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -159:
						break;
					case 214:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -160:
						break;
					case 216:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -161:
						break;
					case 218:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -162:
						break;
					case 220:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -163:
						break;
					case 222:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -164:
						break;
					case 224:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -165:
						break;
					case 226:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -166:
						break;
					case 228:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -167:
						break;
					case 230:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -168:
						break;
					case 232:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -169:
						break;
					case 234:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -170:
						break;
					case 236:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -171:
						break;
					case 238:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -172:
						break;
					case 240:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -173:
						break;
					case 242:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -174:
						break;
					case 244:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -175:
						break;
					case 246:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -176:
						break;
					case 248:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -177:
						break;
					case 250:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -178:
						break;
					case 252:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -179:
						break;
					case 254:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -180:
						break;
					case 256:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -181:
						break;
					case 258:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -182:
						break;
					case 260:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -183:
						break;
					case 262:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -184:
						break;
					case 264:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -185:
						break;
					case 266:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -186:
						break;
					case 268:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -187:
						break;
					case 270:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -188:
						break;
					case 272:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -189:
						break;
					case 274:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -190:
						break;
					case 276:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -191:
						break;
					case 278:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -192:
						break;
					case 280:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -193:
						break;
					case 282:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -194:
						break;
					case 284:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -195:
						break;
					case 286:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -196:
						break;
					case 288:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -197:
						break;
					case 290:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -198:
						break;
					case 292:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -199:
						break;
					case 294:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -200:
						break;
					case 296:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -201:
						break;
					case 298:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -202:
						break;
					case 300:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -203:
						break;
					case 302:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -204:
						break;
					case 304:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -205:
						break;
					case 306:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -206:
						break;
					case 308:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -207:
						break;
					case 310:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -208:
						break;
					case 312:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -209:
						break;
					case 314:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -210:
						break;
					case 316:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -211:
						break;
					case 318:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -212:
						break;
					case 320:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -213:
						break;
					case 322:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -214:
						break;
					case 324:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -215:
						break;
					case 326:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -216:
						break;
					case 328:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -217:
						break;
					case 330:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -218:
						break;
					case 332:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -219:
						break;
					case 334:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -220:
						break;
					case 336:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -221:
						break;
					case 338:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -222:
						break;
					case 340:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -223:
						break;
					case 342:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -224:
						break;
					case 344:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -225:
						break;
					case 346:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -226:
						break;
					case 348:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -227:
						break;
					case 350:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -228:
						break;
					case 352:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -229:
						break;
					case 354:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -230:
						break;
					case 356:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -231:
						break;
					case 358:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -232:
						break;
					case 360:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -233:
						break;
					case 362:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -234:
						break;
					case 364:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -235:
						break;
					case 366:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -236:
						break;
					case 368:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -237:
						break;
					case 370:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -238:
						break;
					case 372:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -239:
						break;
					case 374:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -240:
						break;
					case 376:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -241:
						break;
					case 378:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -242:
						break;
					case 380:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -243:
						break;
					case 382:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -244:
						break;
					case 384:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -245:
						break;
					case 385:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -246:
						break;
					case 386:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -247:
						break;
					case 387:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -248:
						break;
					case 388:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -249:
						break;
					case 389:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -250:
						break;
					case 390:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -251:
						break;
					case 391:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -252:
						break;
					case 392:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -253:
						break;
					case 393:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -254:
						break;
					case 394:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -255:
						break;
					case 396:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -256:
						break;
					case 399:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -257:
						break;
					case 401:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -258:
						break;
					case 404:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -259:
						break;
					case 406:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -260:
						break;
					case 408:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -261:
						break;
					case 412:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -262:
						break;
					case 414:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -263:
						break;
					case 418:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -264:
						break;
					case 421:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -265:
						break;
					case 423:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -266:
						break;
					case 424:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -267:
						break;
					case 426:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -268:
						break;
					case 427:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -269:
						break;
					case 429:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -270:
						break;
					case 434:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -271:
						break;
					case 435:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -272:
						break;
					case 439:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -273:
						break;
					case 441:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -274:
						break;
					case 442:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -275:
						break;
					case 443:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -276:
						break;
					case 444:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -277:
						break;
					case 446:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -278:
						break;
					case 447:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -279:
						break;
					case 449:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -280:
						break;
					case 451:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -281:
						break;
					case 452:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -282:
						break;
					case 453:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -283:
						break;
					case 455:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -284:
						break;
					case 457:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -285:
						break;
					case 459:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -286:
						break;
					case 460:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -287:
						break;
					case 461:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -288:
						break;
					case 462:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -289:
						break;
					case 463:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -290:
						break;
					case 464:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -291:
						break;
					case 465:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -292:
						break;
					case 466:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -293:
						break;
					case 468:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -294:
						break;
					case 469:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -295:
						break;
					case 470:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -296:
						break;
					case 471:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -297:
						break;
					case 473:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -298:
						break;
					case 474:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -299:
						break;
					case 475:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -300:
						break;
					case 476:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -301:
						break;
					case 477:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -302:
						break;
					case 478:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -303:
						break;
					case 483:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -304:
						break;
					case 484:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -305:
						break;
					case 486:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -306:
						break;
					case 488:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -307:
						break;
					case 489:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -308:
						break;
					case 490:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -309:
						break;
					case 491:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -310:
						break;
					case 493:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -311:
						break;
					case 494:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -312:
						break;
					case 495:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -313:
						break;
					case 496:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -314:
						break;
					case 497:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -315:
						break;
					case 498:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -316:
						break;
					case 499:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -317:
						break;
					case 500:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -318:
						break;
					case 501:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -319:
						break;
					case 502:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -320:
						break;
					case 504:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -321:
						break;
					case 505:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -322:
						break;
					case 507:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -323:
						break;
					case 509:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -324:
						break;
					case 510:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -325:
						break;
					case 511:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -326:
						break;
					case 512:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -327:
						break;
					case 513:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -328:
						break;
					case 514:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -329:
						break;
					case 515:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -330:
						break;
					case 516:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -331:
						break;
					case 518:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -332:
						break;
					case 519:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -333:
						break;
					case 520:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -334:
						break;
					case 522:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -335:
						break;
					case 523:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -336:
						break;
					case 524:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -337:
						break;
					case 525:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -338:
						break;
					case 526:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -339:
						break;
					case 527:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -340:
						break;
					case 528:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -341:
						break;
					case 529:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -342:
						break;
					case 530:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -343:
						break;
					case 531:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -344:
						break;
					case 532:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -345:
						break;
					case 533:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -346:
						break;
					case 534:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -347:
						break;
					case 535:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -348:
						break;
					case 536:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -349:
						break;
					case 537:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -350:
						break;
					case 538:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -351:
						break;
					case 539:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -352:
						break;
					case 540:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -353:
						break;
					case 541:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -354:
						break;
					case 542:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -355:
						break;
					case 544:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -356:
						break;
					case 545:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -357:
						break;
					case 546:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -358:
						break;
					case 547:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -359:
						break;
					case 549:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -360:
						break;
					case 553:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -361:
						break;
					case 563:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -362:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
