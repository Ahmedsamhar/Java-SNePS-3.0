package sneps.snepslog;
import java.lang.System;
import java.io.*;
import java_cup.runtime.Symbol;


class Lexer implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

//initialize  variables to be used by class
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	Lexer (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	Lexer (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Lexer () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;

//Add code to be executed on initialization of the lexer
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int yy_state_dtrans[] = {
		0
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NO_ANCHOR,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NO_ANCHOR,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NO_ANCHOR,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NO_ANCHOR,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NOT_ACCEPT,
		/* 107 */ YY_NO_ANCHOR,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NO_ANCHOR,
		/* 114 */ YY_NOT_ACCEPT,
		/* 115 */ YY_NO_ANCHOR,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NO_ANCHOR,
		/* 120 */ YY_NOT_ACCEPT,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NOT_ACCEPT,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NOT_ACCEPT,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NOT_ACCEPT,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NOT_ACCEPT,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NOT_ACCEPT,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NOT_ACCEPT,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NOT_ACCEPT,
		/* 135 */ YY_NO_ANCHOR,
		/* 136 */ YY_NOT_ACCEPT,
		/* 137 */ YY_NO_ANCHOR,
		/* 138 */ YY_NOT_ACCEPT,
		/* 139 */ YY_NO_ANCHOR,
		/* 140 */ YY_NOT_ACCEPT,
		/* 141 */ YY_NO_ANCHOR,
		/* 142 */ YY_NOT_ACCEPT,
		/* 143 */ YY_NO_ANCHOR,
		/* 144 */ YY_NOT_ACCEPT,
		/* 145 */ YY_NO_ANCHOR,
		/* 146 */ YY_NOT_ACCEPT,
		/* 147 */ YY_NO_ANCHOR,
		/* 148 */ YY_NOT_ACCEPT,
		/* 149 */ YY_NO_ANCHOR,
		/* 150 */ YY_NOT_ACCEPT,
		/* 151 */ YY_NO_ANCHOR,
		/* 152 */ YY_NOT_ACCEPT,
		/* 153 */ YY_NO_ANCHOR,
		/* 154 */ YY_NOT_ACCEPT,
		/* 155 */ YY_NO_ANCHOR,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NO_ANCHOR,
		/* 158 */ YY_NOT_ACCEPT,
		/* 159 */ YY_NO_ANCHOR,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NO_ANCHOR,
		/* 162 */ YY_NOT_ACCEPT,
		/* 163 */ YY_NO_ANCHOR,
		/* 164 */ YY_NOT_ACCEPT,
		/* 165 */ YY_NO_ANCHOR,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NOT_ACCEPT,
		/* 169 */ YY_NO_ANCHOR,
		/* 170 */ YY_NOT_ACCEPT,
		/* 171 */ YY_NO_ANCHOR,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NO_ANCHOR,
		/* 174 */ YY_NOT_ACCEPT,
		/* 175 */ YY_NO_ANCHOR,
		/* 176 */ YY_NOT_ACCEPT,
		/* 177 */ YY_NO_ANCHOR,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NO_ANCHOR,
		/* 180 */ YY_NOT_ACCEPT,
		/* 181 */ YY_NO_ANCHOR,
		/* 182 */ YY_NOT_ACCEPT,
		/* 183 */ YY_NO_ANCHOR,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NO_ANCHOR,
		/* 186 */ YY_NOT_ACCEPT,
		/* 187 */ YY_NO_ANCHOR,
		/* 188 */ YY_NOT_ACCEPT,
		/* 189 */ YY_NO_ANCHOR,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NO_ANCHOR,
		/* 192 */ YY_NOT_ACCEPT,
		/* 193 */ YY_NO_ANCHOR,
		/* 194 */ YY_NOT_ACCEPT,
		/* 195 */ YY_NO_ANCHOR,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NO_ANCHOR,
		/* 198 */ YY_NOT_ACCEPT,
		/* 199 */ YY_NO_ANCHOR,
		/* 200 */ YY_NOT_ACCEPT,
		/* 201 */ YY_NO_ANCHOR,
		/* 202 */ YY_NOT_ACCEPT,
		/* 203 */ YY_NO_ANCHOR,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NO_ANCHOR,
		/* 206 */ YY_NOT_ACCEPT,
		/* 207 */ YY_NO_ANCHOR,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NO_ANCHOR,
		/* 210 */ YY_NOT_ACCEPT,
		/* 211 */ YY_NO_ANCHOR,
		/* 212 */ YY_NOT_ACCEPT,
		/* 213 */ YY_NO_ANCHOR,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NO_ANCHOR,
		/* 216 */ YY_NOT_ACCEPT,
		/* 217 */ YY_NO_ANCHOR,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NO_ANCHOR,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NO_ANCHOR,
		/* 222 */ YY_NOT_ACCEPT,
		/* 223 */ YY_NO_ANCHOR,
		/* 224 */ YY_NOT_ACCEPT,
		/* 225 */ YY_NO_ANCHOR,
		/* 226 */ YY_NOT_ACCEPT,
		/* 227 */ YY_NO_ANCHOR,
		/* 228 */ YY_NOT_ACCEPT,
		/* 229 */ YY_NO_ANCHOR,
		/* 230 */ YY_NOT_ACCEPT,
		/* 231 */ YY_NO_ANCHOR,
		/* 232 */ YY_NOT_ACCEPT,
		/* 233 */ YY_NO_ANCHOR,
		/* 234 */ YY_NOT_ACCEPT,
		/* 235 */ YY_NO_ANCHOR,
		/* 236 */ YY_NOT_ACCEPT,
		/* 237 */ YY_NO_ANCHOR,
		/* 238 */ YY_NOT_ACCEPT,
		/* 239 */ YY_NO_ANCHOR,
		/* 240 */ YY_NOT_ACCEPT,
		/* 241 */ YY_NO_ANCHOR,
		/* 242 */ YY_NOT_ACCEPT,
		/* 243 */ YY_NO_ANCHOR,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NOT_ACCEPT,
		/* 246 */ YY_NOT_ACCEPT,
		/* 247 */ YY_NOT_ACCEPT,
		/* 248 */ YY_NOT_ACCEPT,
		/* 249 */ YY_NOT_ACCEPT,
		/* 250 */ YY_NOT_ACCEPT,
		/* 251 */ YY_NOT_ACCEPT,
		/* 252 */ YY_NOT_ACCEPT,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NOT_ACCEPT,
		/* 255 */ YY_NOT_ACCEPT,
		/* 256 */ YY_NOT_ACCEPT,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NOT_ACCEPT,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NOT_ACCEPT,
		/* 261 */ YY_NOT_ACCEPT,
		/* 262 */ YY_NOT_ACCEPT,
		/* 263 */ YY_NOT_ACCEPT,
		/* 264 */ YY_NOT_ACCEPT,
		/* 265 */ YY_NOT_ACCEPT,
		/* 266 */ YY_NOT_ACCEPT,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NOT_ACCEPT,
		/* 271 */ YY_NOT_ACCEPT,
		/* 272 */ YY_NOT_ACCEPT,
		/* 273 */ YY_NOT_ACCEPT,
		/* 274 */ YY_NOT_ACCEPT,
		/* 275 */ YY_NOT_ACCEPT,
		/* 276 */ YY_NOT_ACCEPT,
		/* 277 */ YY_NOT_ACCEPT,
		/* 278 */ YY_NOT_ACCEPT,
		/* 279 */ YY_NOT_ACCEPT,
		/* 280 */ YY_NOT_ACCEPT,
		/* 281 */ YY_NOT_ACCEPT,
		/* 282 */ YY_NOT_ACCEPT,
		/* 283 */ YY_NOT_ACCEPT,
		/* 284 */ YY_NOT_ACCEPT,
		/* 285 */ YY_NOT_ACCEPT,
		/* 286 */ YY_NOT_ACCEPT,
		/* 287 */ YY_NOT_ACCEPT,
		/* 288 */ YY_NOT_ACCEPT,
		/* 289 */ YY_NOT_ACCEPT,
		/* 290 */ YY_NOT_ACCEPT,
		/* 291 */ YY_NOT_ACCEPT,
		/* 292 */ YY_NOT_ACCEPT,
		/* 293 */ YY_NOT_ACCEPT,
		/* 294 */ YY_NOT_ACCEPT,
		/* 295 */ YY_NOT_ACCEPT,
		/* 296 */ YY_NOT_ACCEPT,
		/* 297 */ YY_NOT_ACCEPT,
		/* 298 */ YY_NOT_ACCEPT,
		/* 299 */ YY_NOT_ACCEPT,
		/* 300 */ YY_NOT_ACCEPT,
		/* 301 */ YY_NOT_ACCEPT,
		/* 302 */ YY_NOT_ACCEPT,
		/* 303 */ YY_NOT_ACCEPT,
		/* 304 */ YY_NOT_ACCEPT,
		/* 305 */ YY_NOT_ACCEPT,
		/* 306 */ YY_NOT_ACCEPT,
		/* 307 */ YY_NOT_ACCEPT,
		/* 308 */ YY_NOT_ACCEPT,
		/* 309 */ YY_NOT_ACCEPT,
		/* 310 */ YY_NOT_ACCEPT,
		/* 311 */ YY_NOT_ACCEPT,
		/* 312 */ YY_NOT_ACCEPT,
		/* 313 */ YY_NOT_ACCEPT,
		/* 314 */ YY_NOT_ACCEPT,
		/* 315 */ YY_NOT_ACCEPT,
		/* 316 */ YY_NOT_ACCEPT,
		/* 317 */ YY_NOT_ACCEPT,
		/* 318 */ YY_NO_ANCHOR,
		/* 319 */ YY_NO_ANCHOR,
		/* 320 */ YY_NOT_ACCEPT,
		/* 321 */ YY_NOT_ACCEPT,
		/* 322 */ YY_NOT_ACCEPT,
		/* 323 */ YY_NOT_ACCEPT,
		/* 324 */ YY_NOT_ACCEPT,
		/* 325 */ YY_NOT_ACCEPT,
		/* 326 */ YY_NOT_ACCEPT,
		/* 327 */ YY_NOT_ACCEPT,
		/* 328 */ YY_NOT_ACCEPT,
		/* 329 */ YY_NOT_ACCEPT,
		/* 330 */ YY_NOT_ACCEPT,
		/* 331 */ YY_NOT_ACCEPT,
		/* 332 */ YY_NOT_ACCEPT,
		/* 333 */ YY_NOT_ACCEPT,
		/* 334 */ YY_NOT_ACCEPT,
		/* 335 */ YY_NOT_ACCEPT,
		/* 336 */ YY_NOT_ACCEPT,
		/* 337 */ YY_NOT_ACCEPT,
		/* 338 */ YY_NOT_ACCEPT,
		/* 339 */ YY_NOT_ACCEPT,
		/* 340 */ YY_NOT_ACCEPT,
		/* 341 */ YY_NOT_ACCEPT,
		/* 342 */ YY_NOT_ACCEPT,
		/* 343 */ YY_NOT_ACCEPT,
		/* 344 */ YY_NOT_ACCEPT,
		/* 345 */ YY_NOT_ACCEPT,
		/* 346 */ YY_NOT_ACCEPT,
		/* 347 */ YY_NOT_ACCEPT,
		/* 348 */ YY_NOT_ACCEPT,
		/* 349 */ YY_NOT_ACCEPT,
		/* 350 */ YY_NOT_ACCEPT,
		/* 351 */ YY_NOT_ACCEPT,
		/* 352 */ YY_NOT_ACCEPT,
		/* 353 */ YY_NOT_ACCEPT,
		/* 354 */ YY_NO_ANCHOR,
		/* 355 */ YY_NOT_ACCEPT,
		/* 356 */ YY_NOT_ACCEPT,
		/* 357 */ YY_NOT_ACCEPT,
		/* 358 */ YY_NOT_ACCEPT,
		/* 359 */ YY_NOT_ACCEPT,
		/* 360 */ YY_NOT_ACCEPT,
		/* 361 */ YY_NOT_ACCEPT,
		/* 362 */ YY_NOT_ACCEPT,
		/* 363 */ YY_NOT_ACCEPT,
		/* 364 */ YY_NO_ANCHOR,
		/* 365 */ YY_NOT_ACCEPT,
		/* 366 */ YY_NOT_ACCEPT,
		/* 367 */ YY_NOT_ACCEPT,
		/* 368 */ YY_NO_ANCHOR,
		/* 369 */ YY_NOT_ACCEPT,
		/* 370 */ YY_NOT_ACCEPT,
		/* 371 */ YY_NO_ANCHOR,
		/* 372 */ YY_NO_ANCHOR,
		/* 373 */ YY_NO_ANCHOR,
		/* 374 */ YY_NO_ANCHOR,
		/* 375 */ YY_NO_ANCHOR,
		/* 376 */ YY_NO_ANCHOR,
		/* 377 */ YY_NO_ANCHOR,
		/* 378 */ YY_NO_ANCHOR,
		/* 379 */ YY_NO_ANCHOR,
		/* 380 */ YY_NO_ANCHOR,
		/* 381 */ YY_NO_ANCHOR,
		/* 382 */ YY_NO_ANCHOR,
		/* 383 */ YY_NO_ANCHOR,
		/* 384 */ YY_NO_ANCHOR,
		/* 385 */ YY_NO_ANCHOR,
		/* 386 */ YY_NO_ANCHOR,
		/* 387 */ YY_NO_ANCHOR,
		/* 388 */ YY_NO_ANCHOR,
		/* 389 */ YY_NO_ANCHOR,
		/* 390 */ YY_NO_ANCHOR,
		/* 391 */ YY_NO_ANCHOR,
		/* 392 */ YY_NO_ANCHOR,
		/* 393 */ YY_NO_ANCHOR,
		/* 394 */ YY_NO_ANCHOR,
		/* 395 */ YY_NO_ANCHOR,
		/* 396 */ YY_NO_ANCHOR,
		/* 397 */ YY_NO_ANCHOR,
		/* 398 */ YY_NO_ANCHOR,
		/* 399 */ YY_NO_ANCHOR,
		/* 400 */ YY_NO_ANCHOR,
		/* 401 */ YY_NO_ANCHOR,
		/* 402 */ YY_NO_ANCHOR,
		/* 403 */ YY_NO_ANCHOR,
		/* 404 */ YY_NO_ANCHOR,
		/* 405 */ YY_NO_ANCHOR,
		/* 406 */ YY_NO_ANCHOR,
		/* 407 */ YY_NO_ANCHOR,
		/* 408 */ YY_NO_ANCHOR,
		/* 409 */ YY_NO_ANCHOR,
		/* 410 */ YY_NO_ANCHOR,
		/* 411 */ YY_NO_ANCHOR,
		/* 412 */ YY_NO_ANCHOR,
		/* 413 */ YY_NO_ANCHOR,
		/* 414 */ YY_NO_ANCHOR,
		/* 415 */ YY_NO_ANCHOR,
		/* 416 */ YY_NO_ANCHOR,
		/* 417 */ YY_NO_ANCHOR,
		/* 418 */ YY_NO_ANCHOR,
		/* 419 */ YY_NO_ANCHOR,
		/* 420 */ YY_NO_ANCHOR,
		/* 421 */ YY_NO_ANCHOR,
		/* 422 */ YY_NOT_ACCEPT,
		/* 423 */ YY_NOT_ACCEPT,
		/* 424 */ YY_NOT_ACCEPT,
		/* 425 */ YY_NOT_ACCEPT,
		/* 426 */ YY_NOT_ACCEPT,
		/* 427 */ YY_NO_ANCHOR,
		/* 428 */ YY_NO_ANCHOR,
		/* 429 */ YY_NO_ANCHOR,
		/* 430 */ YY_NO_ANCHOR,
		/* 431 */ YY_NO_ANCHOR,
		/* 432 */ YY_NO_ANCHOR,
		/* 433 */ YY_NO_ANCHOR,
		/* 434 */ YY_NO_ANCHOR,
		/* 435 */ YY_NO_ANCHOR,
		/* 436 */ YY_NO_ANCHOR,
		/* 437 */ YY_NO_ANCHOR,
		/* 438 */ YY_NO_ANCHOR,
		/* 439 */ YY_NO_ANCHOR,
		/* 440 */ YY_NO_ANCHOR,
		/* 441 */ YY_NO_ANCHOR,
		/* 442 */ YY_NO_ANCHOR,
		/* 443 */ YY_NO_ANCHOR,
		/* 444 */ YY_NO_ANCHOR,
		/* 445 */ YY_NO_ANCHOR,
		/* 446 */ YY_NO_ANCHOR,
		/* 447 */ YY_NO_ANCHOR,
		/* 448 */ YY_NO_ANCHOR,
		/* 449 */ YY_NO_ANCHOR,
		/* 450 */ YY_NO_ANCHOR,
		/* 451 */ YY_NO_ANCHOR,
		/* 452 */ YY_NO_ANCHOR,
		/* 453 */ YY_NO_ANCHOR,
		/* 454 */ YY_NO_ANCHOR,
		/* 455 */ YY_NO_ANCHOR,
		/* 456 */ YY_NO_ANCHOR,
		/* 457 */ YY_NO_ANCHOR,
		/* 458 */ YY_NO_ANCHOR,
		/* 459 */ YY_NO_ANCHOR,
		/* 460 */ YY_NO_ANCHOR,
		/* 461 */ YY_NO_ANCHOR,
		/* 462 */ YY_NO_ANCHOR,
		/* 463 */ YY_NO_ANCHOR,
		/* 464 */ YY_NO_ANCHOR,
		/* 465 */ YY_NO_ANCHOR,
		/* 466 */ YY_NO_ANCHOR,
		/* 467 */ YY_NO_ANCHOR,
		/* 468 */ YY_NO_ANCHOR,
		/* 469 */ YY_NO_ANCHOR,
		/* 470 */ YY_NOT_ACCEPT,
		/* 471 */ YY_NOT_ACCEPT,
		/* 472 */ YY_NOT_ACCEPT,
		/* 473 */ YY_NO_ANCHOR,
		/* 474 */ YY_NO_ANCHOR,
		/* 475 */ YY_NO_ANCHOR,
		/* 476 */ YY_NO_ANCHOR,
		/* 477 */ YY_NO_ANCHOR,
		/* 478 */ YY_NO_ANCHOR,
		/* 479 */ YY_NO_ANCHOR,
		/* 480 */ YY_NO_ANCHOR,
		/* 481 */ YY_NO_ANCHOR,
		/* 482 */ YY_NO_ANCHOR,
		/* 483 */ YY_NO_ANCHOR,
		/* 484 */ YY_NO_ANCHOR,
		/* 485 */ YY_NO_ANCHOR,
		/* 486 */ YY_NO_ANCHOR,
		/* 487 */ YY_NO_ANCHOR,
		/* 488 */ YY_NO_ANCHOR,
		/* 489 */ YY_NO_ANCHOR,
		/* 490 */ YY_NO_ANCHOR,
		/* 491 */ YY_NO_ANCHOR,
		/* 492 */ YY_NO_ANCHOR,
		/* 493 */ YY_NO_ANCHOR,
		/* 494 */ YY_NO_ANCHOR,
		/* 495 */ YY_NO_ANCHOR,
		/* 496 */ YY_NO_ANCHOR,
		/* 497 */ YY_NO_ANCHOR,
		/* 498 */ YY_NO_ANCHOR,
		/* 499 */ YY_NO_ANCHOR,
		/* 500 */ YY_NO_ANCHOR,
		/* 501 */ YY_NO_ANCHOR,
		/* 502 */ YY_NO_ANCHOR,
		/* 503 */ YY_NO_ANCHOR,
		/* 504 */ YY_NO_ANCHOR,
		/* 505 */ YY_NO_ANCHOR,
		/* 506 */ YY_NO_ANCHOR,
		/* 507 */ YY_NO_ANCHOR,
		/* 508 */ YY_NO_ANCHOR,
		/* 509 */ YY_NO_ANCHOR,
		/* 510 */ YY_NO_ANCHOR,
		/* 511 */ YY_NO_ANCHOR,
		/* 512 */ YY_NO_ANCHOR,
		/* 513 */ YY_NO_ANCHOR,
		/* 514 */ YY_NO_ANCHOR,
		/* 515 */ YY_NO_ANCHOR,
		/* 516 */ YY_NO_ANCHOR,
		/* 517 */ YY_NO_ANCHOR,
		/* 518 */ YY_NO_ANCHOR,
		/* 519 */ YY_NO_ANCHOR,
		/* 520 */ YY_NO_ANCHOR,
		/* 521 */ YY_NO_ANCHOR,
		/* 522 */ YY_NO_ANCHOR,
		/* 523 */ YY_NO_ANCHOR,
		/* 524 */ YY_NO_ANCHOR,
		/* 525 */ YY_NO_ANCHOR,
		/* 526 */ YY_NO_ANCHOR,
		/* 527 */ YY_NO_ANCHOR,
		/* 528 */ YY_NO_ANCHOR,
		/* 529 */ YY_NO_ANCHOR,
		/* 530 */ YY_NO_ANCHOR,
		/* 531 */ YY_NO_ANCHOR,
		/* 532 */ YY_NO_ANCHOR,
		/* 533 */ YY_NO_ANCHOR,
		/* 534 */ YY_NO_ANCHOR,
		/* 535 */ YY_NOT_ACCEPT,
		/* 536 */ YY_NOT_ACCEPT,
		/* 537 */ YY_NO_ANCHOR,
		/* 538 */ YY_NO_ANCHOR,
		/* 539 */ YY_NO_ANCHOR,
		/* 540 */ YY_NO_ANCHOR,
		/* 541 */ YY_NO_ANCHOR,
		/* 542 */ YY_NO_ANCHOR,
		/* 543 */ YY_NO_ANCHOR,
		/* 544 */ YY_NO_ANCHOR,
		/* 545 */ YY_NO_ANCHOR,
		/* 546 */ YY_NO_ANCHOR,
		/* 547 */ YY_NO_ANCHOR,
		/* 548 */ YY_NO_ANCHOR,
		/* 549 */ YY_NO_ANCHOR,
		/* 550 */ YY_NO_ANCHOR,
		/* 551 */ YY_NO_ANCHOR,
		/* 552 */ YY_NO_ANCHOR,
		/* 553 */ YY_NO_ANCHOR,
		/* 554 */ YY_NO_ANCHOR,
		/* 555 */ YY_NO_ANCHOR,
		/* 556 */ YY_NO_ANCHOR,
		/* 557 */ YY_NO_ANCHOR,
		/* 558 */ YY_NO_ANCHOR,
		/* 559 */ YY_NO_ANCHOR,
		/* 560 */ YY_NO_ANCHOR,
		/* 561 */ YY_NO_ANCHOR,
		/* 562 */ YY_NO_ANCHOR,
		/* 563 */ YY_NOT_ACCEPT,
		/* 564 */ YY_NOT_ACCEPT,
		/* 565 */ YY_NOT_ACCEPT,
		/* 566 */ YY_NOT_ACCEPT,
		/* 567 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,130,
"2:9,4,0,2:2,0,2:18,3,11,35,2:3,41,2,47,48,2:2,45,14,12,37,43,32,33,34,42:6," +
"46,1,38,39,40,31,2,51,36:3,53,36,54,36:8,52,36:10,2:4,55,2,5,23,6,13,10,20," +
"30,22,8,36,19,24,27,16,15,28,36,26,18,7,25,9,21,17,29,36,49,2,50,44,2,56:2")[0];

	private int yy_rmap[] = unpackFromString(1,568,
"0,1,2,3,4,5,6,2:2,7,8,2,9,2:8,10:3,2:2,11,12,10:2,2,13,10:2,2:3,10:9,14,10:" +
"16,2,10:13,2:4,10,2:6,10,2:17,15,16,17,18,19:3,20,21,22,23,24,25,26,16,27,2" +
"8,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,5" +
"3,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,7" +
"8,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,10" +
"2,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1" +
"21,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139," +
"140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158" +
",159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,17" +
"7,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,1" +
"96,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214," +
"215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233" +
",234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,25" +
"2,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,2" +
"71,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289," +
"290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308" +
",309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,32" +
"7,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,3" +
"46,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364," +
"365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383" +
",384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,40" +
"2,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,4" +
"21,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439," +
"440,441,442,443,444,445,446,447,448,449,10,450,451,452,453,454,455,456,457," +
"458,459,460,461,462,463,464,465,466,467,468,469,470,471,472")[0];

	private int yy_nxt[][] = unpackFromString(473,57,
"-1,1,2,3,108,4,5,6,318,109,469,7,8,421,2,113,9,354,427,473,534,364,544,10,4" +
"28,549,553,555,556,544:2,11,12:3,107,544,112,115,118,2,319,12,110,13,14,15," +
"16,17,18,19,557,558,559,560,2,20,-1,1:55,-1:61,3,-1:58,544,474,544:2,21,544" +
",-1,106,368,-1,544,116,544,119,544:5,121,371,544:5,-1,544:3,-1,544,111,-1:4" +
",544:2,-1:7,544:4,123,-1:6,561,544:5,-1,106,544,-1,562,544:8,475,544:6,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:7,47" +
"6,544:3,429,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,373,54" +
"4:5,-1,106,544,-1,127,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123," +
"-1:6,376,544:3,23,483,-1,106,544,-1,544:11,133,544:4,-1,544:3,-1,544,111,-1" +
":4,544:2,-1:7,544:4,123,-1:6,111:6,-1,106,111,-1,111:16,-1,12:3,-1,111:2,-1" +
",117,-1:2,12:2,-1:7,111:4,-1:7,544:6,-1,106,544,-1,544:16,-1,544:3,-1,544,1" +
"11,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,155,544:15,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,507,544:2,-1,106,544,-1,544:" +
"6,157,544:9,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106" +
",544,-1,544:12,388,544:3,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:6,-1,106,544,-1,544,405,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544" +
":4,123,-1:19,126,-1:41,120,-1,120:6,-1:2,120,-1,120:16,-1,120:3,24,120,-1:5" +
",120:2,-1:7,120:4,-1:6,108,-1:57,544:6,-1,106,544,-1,544:16,-1,544:3,-1,544" +
",111,-1,114,-1:2,544:2,-1:7,544:4,123,-1:6,111:6,-1,106,111,-1,111:16,-1,11" +
"1:3,-1,111:2,-1:4,111:2,-1:7,111:4,-1:7,544:6,-1,106,544,-1,544:11,22,544:4" +
",-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:41,30,-1:55,122,-1:22,544" +
":6,-1,106,26,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:41," +
"34,-1:56,25,-1:21,544:6,-1,106,544,-1,544:4,27,544:11,-1,544:3,-1,544,111,-" +
"1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:9,28,544:6,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:41,35,-1:21,123:6,-1:2,123,-1,123:16" +
",-1,123:3,-1,123,-1:5,123:2,-1:7,123:5,-1:41,36,-1:21,544:6,-1,106,139,-1,5" +
"44:5,29,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:17,130,-1:4" +
"5,544:6,-1,106,544,-1,544,145,544:9,31,544:4,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:28,136,-1:34,544:6,-1,106,544,-1,544:11,32,544:4,-1,544:" +
"3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:11,138,-1:51,544:6,-1,106,544,-1," +
"544:5,33,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:8,320,-1:5" +
"4,544:6,-1,106,544,128,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123" +
",-1:7,355,-1:6,140,-1:13,422,-1:34,544:6,-1,106,544,132,544:16,-1,544:3,-1," +
"544,111,-1:4,544:2,-1:7,544:4,123,-1:16,142,-1:46,544:6,-1,106,544,-1,37,54" +
"4:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:29,146,-1:33,544:6,-1" +
",106,544,-1,38,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:11,1" +
"54,-1:51,544:6,-1,106,544,-1,39,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:14,156,-1:48,544:6,-1,106,40,-1,544:16,-1,544:3,-1,544,111,-1:" +
"4,544:2,-1:7,544:4,123,-1:6,322,158,160,-1:54,544:5,41,-1,106,544,-1,544:16" +
",-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:19,164,-1:43,544:6,-1,106" +
",544,134,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:15,166,-1:" +
"47,544:6,-1,106,544,-1,544:6,42,544:9,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:9,323,-1:53,544:6,-1,106,544,-1,544:15,43,-1,544:3,-1,544,111,-" +
"1:4,544:2,-1:7,544:4,123,-1:17,170,-1:45,544:6,-1,106,44,-1,544:16,-1,544:3" +
",-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:21,172,-1:41,544:6,-1,106,544,-1,5" +
"44:11,45,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:11,63,-1:51" +
",544:6,-1,106,544,-1,544:7,46,544:8,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544" +
":4,123,-1:16,176,-1:46,544:5,47,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1" +
":4,544:2,-1:7,544:4,123,-1:11,325,-1:51,544:6,-1,106,544,-1,544:14,48,544,-" +
"1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:27,178,-1:35,544:6,-1,106,5" +
"44,-1,544:11,49,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:25,1" +
"82,-1:37,544:6,-1,106,544,-1,544:3,50,544:12,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:7,329,-1:55,544:6,-1,106,544,144,544:16,-1,544:3,-1,544," +
"111,-1:4,544:2,-1:7,544:4,123,-1:19,327,-1,184,-1:5,356,-1,326,-1:33,544:6," +
"-1,106,544,-1,544:15,51,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:8," +
"365,-1:54,544:6,-1,106,544,150,544:4,193,544:11,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:6,186,-1:56,544:6,-1,106,544,-1,544:7,52,544:8,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:19,369,-1:43,544:6,-1,106,53,-1," +
"544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:17,192,-1:45,544:2," +
"54,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123" +
",-1:11,196,-1:51,544:6,-1,106,544,-1,544:9,55,544:6,-1,544:3,-1,544,111,-1:" +
"4,544:2,-1:7,544:4,123,-1:21,330,-1:41,544:6,-1,106,544,-1,56,544:15,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:16,198,-1:46,544:6,-1,106,544,16" +
"2,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:27,332,-1:35,544:" +
"5,57,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"26,337,-1:36,544:6,-1,106,544,-1,544:9,58,544:6,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:15,210,-1:47,544:2,59,544:3,-1,106,544,-1,544:16,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,214,-1:56,544:5,60,-1,106,54" +
"4,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:8,336,-1:54,54" +
"4:6,-1,106,544,-1,544:8,61,544:7,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4," +
"123,-1:28,218,-1:34,544:6,-1,106,544,168,544:16,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:19,222,-1:43,544:6,-1,106,544,-1,544:9,62,544:6,-1,54" +
"4:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:31,77,-1:31,544:5,64,-1,106,544" +
",-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:17,339,-1:45,54" +
"4:6,-1,106,544,180,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"11,226,-1:51,544:6,-1,106,544,-1,544:15,65,-1,544:3,-1,544,111,-1:4,544:2,-" +
"1:7,544:4,123,-1:7,340,228,-1:54,544:6,-1,106,544,-1,544:12,66,544:3,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:25,342,-1:37,544:6,-1,106,544,-1" +
",544,67,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:18,236,-1:4" +
"4,544:5,68,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:33,78,79,80,-1:27,544:2,69,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544" +
",111,-1:4,544:2,-1:7,544:4,123,-1:26,240,-1:36,544:2,70,544:3,-1,106,544,-1" +
",544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:24,358,-1:38,544:5" +
",71,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:2" +
"7,366,-1:35,544:6,-1,106,544,331,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7" +
",544:4,123,-1:19,82,-1:43,544:5,72,-1,106,544,-1,544:16,-1,544:3,-1,544,111" +
",-1:4,544:2,-1:7,544:4,123,-1:29,360,-1:33,544:6,-1,106,544,190,544:16,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:8,244,-1:54,544:6,-1,106,544,-" +
"1,544,73,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:16,343,-1:" +
"46,544:2,74,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:27,83,-1:35,544:5,75,-1,106,544,-1,544:16,-1,544:3,-1,544,111," +
"-1:4,544:2,-1:7,544:4,123,-1:11,345,-1:51,544:6,-1,106,544,204,544:16,-1,54" +
"4:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,424,-1:56,544:6,-1,106,544,21" +
"2,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:28,245,-1:34,544:" +
"6,-1,106,544,220,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:23" +
",84,-1:39,544:6,-1,106,76,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544" +
":4,123,-1:8,85,-1:54,544:6,-1,106,544,338,544:16,-1,544:3,-1,544,111,-1:4,5" +
"44:2,-1:7,544:4,123,-1:9,248,-1:53,544:6,-1,106,544,-1,81,544:15,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:17,249,-1:45,544:6,-1,106,544,254,54" +
"4:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:18,346,-1:44,544:6,-1" +
",106,544,-1,544,88,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"27,347,-1:40,86,-1:53,362,-1:63,256,-1:49,87,-1:57,257,-1:73,258,-1:41,259," +
"-1:63,262,-1:57,263,-1:64,264,-1:57,265,-1:35,350,-1:57,89,-1:56,90,-1:62,2" +
"68,-1:61,91,-1:60,92,-1:41,93,-1:56,270,-1:59,271,-1:64,94,-1:46,273,-1:63," +
"274,-1:55,277,-1:49,95,-1:75,278,-1:48,279,-1:55,280,-1:45,96,-1:66,97,-1:4" +
"7,98,-1:65,351,-1:61,281,-1:43,282,-1:55,283,-1:56,99,-1:69,352,-1:42,285,-" +
"1:76,286,-1:40,287,-1:53,289,-1:57,290,-1:65,291,-1:57,100,-1:52,293,-1:48," +
"294,-1:57,101,-1:56,102,-1:69,295,-1:2,296,-1:40,103,-1:64,297,-1:46,298,-1" +
":77,299,-1:36,300,-1:71,301,-1:54,302,-1:42,303,-1:72,304,-1:61,305,-1:35,3" +
"06,-1:64,307,-1:69,308,-1:44,309,-1:55,310,-1:68,311,-1:45,312,-1:58,313,-1" +
":65,314,-1:39,315,-1:64,316,-1:47,104,-1:57,317,-1:55,105,-1:54,544:6,-1,10" +
"6,544,-1,544,477,544:3,125,544:5,478,544:4,-1,544:3,-1,544,111,-1:4,544:2,-" +
"1:7,544:4,123,-1:40,124,-1:32,148,-1:54,324,-1:61,174,-1:54,328,-1:50,188,-" +
"1:72,194,-1:35,333,-1:61,334,-1:66,202,-1:51,200,-1:67,224,-1:55,335,-1:36," +
"232,-1:58,234,-1:76,230,-1:45,238,-1:50,242,-1:70,357,-1:58,359,-1:37,341,-" +
"1:64,344,-1:51,252,-1:51,246,-1:78,564,-1:45,367,-1:66,255,-1:37,260,-1:57," +
"348,-1:54,269,-1:60,272,-1:61,276,-1:48,284,-1:69,288,-1:53,292,-1:44,544:6" +
",-1,106,544,-1,129,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"16,152,-1:51,206,-1:53,247,-1:64,250,-1:51,253,-1:51,361,-1:58,261,-1:57,26" +
"7,-1:54,275,-1:55,544:3,481,544:2,-1,106,544,-1,544:5,131,544,482,544:8,-1," +
"544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:11,208,-1:53,251,-1:56,349,-1" +
":54,544:6,-1,106,135,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,12" +
"3,-1:11,216,-1:53,266,-1:54,544:2,137,544:3,-1,106,544,-1,544:16,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:3,494,544," +
"495,544:6,141,544:3,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:" +
"6,-1,106,544,-1,544,143,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,12" +
"3,-1:6,544:2,147,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2," +
"-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,149,544:15,-1,544:3,-1,544,111,-1:4" +
",544:2,-1:7,544:4,123,-1:6,544,499,544:4,-1,106,544,-1,544,151,544:14,-1,54" +
"4:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,153,544:5,-1,106,544,-1,544:1" +
"6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544,159,544:4,-1,106,5" +
"44,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2,161,5" +
"44:3,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"6,163,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4," +
"123,-1:6,544:6,-1,106,544,-1,544:10,165,544:5,-1,544:3,-1,544,111,-1:4,544:" +
"2,-1:7,544:4,123,-1:6,544:2,167,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544," +
"111,-1:4,544:2,-1:7,544:4,123,-1:6,544:4,452,544,-1,106,544,-1,544,169,544:" +
"14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,5" +
"44:11,171,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1" +
",106,544,-1,544:3,173,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123," +
"-1:6,544:6,-1,106,544,-1,544,175,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7" +
",544:4,123,-1:6,544:6,-1,106,544,-1,544:11,177,544:4,-1,544:3,-1,544,111,-1" +
":4,544:2,-1:7,544:4,123,-1:6,179,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544" +
",111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,521,-1,106,181,-1,544:16,-1,544:3" +
",-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,183,-1,106,544,-1,544:16,-" +
"1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544,185,544:4,-1,106,544," +
"-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,187,544:5,-1,1" +
"06,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544,189" +
",544:4,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-" +
"1:6,544:6,-1,106,544,-1,544:3,191,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:" +
"7,544:4,123,-1:6,544:5,195,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544,567,544:14,-1,544:3,-1,544," +
"111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:9,197,544:6,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544,199,544:4,-1,106,544,-1," +
"544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,201,-1,106," +
"544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,1" +
"06,544,-1,544,203,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:6,-1,106,544,-1,544:11,205,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,207,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:6,544:2,209,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544,1" +
"11,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,211,544:15,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,213,544:15,-1," +
"544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:3,2" +
"15,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,2" +
"17,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,10" +
"6,544,-1,544:12,219,544:3,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"6,544:6,-1,106,544,-1,544:3,221,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:6,223,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:" +
"2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:7,225,544:8,-1,544:3,-1,544,1" +
"11,-1:4,544:2,-1:7,544:4,123,-1:6,544,227,544:4,-1,106,544,-1,544:16,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,229,-1,106,544,-1,544:16" +
",-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,231,-1,544" +
":16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,233,-1,106,544" +
",-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,235,-1," +
"106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5," +
"237,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:6,-1,106,239,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-" +
"1:6,544:5,241,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:" +
"4,123,-1:6,544:6,-1,106,544,-1,243,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1" +
":7,544:4,123,-1:6,544:5,372,-1,106,544,-1,480,544:15,-1,544:3,-1,544,111,-1" +
":4,544:2,-1:7,544:4,123,-1:16,321,-1:51,353,-1:62,370,-1:48,363,-1:55,423,-" +
"1:54,544:5,374,-1,106,544,-1,544:7,375,544:8,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:6,544:3,433,544:2,-1,106,544,-1,377,544:15,-1,544:3,-1,5" +
"44,111,-1:4,544:2,-1:7,544:4,123,-1:6,378,544:5,-1,106,544,-1,544:16,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:13,379" +
",544:2,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2,380,544:3,-" +
"1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:" +
"6,-1,106,544,-1,544:9,381,544:6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:6,544:6,-1,106,544,-1,544:3,382,544:12,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:6,544:3,383,544:2,-1,106,544,-1,544:16,-1,544:3,-1,544,1" +
"11,-1:4,544:2,-1:7,544:4,123,-1:6,384,544:5,-1,106,544,-1,544:16,-1,544:3,-" +
"1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,385,-1,106,544,-1,544:16,-1," +
"544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,386,544:4,387,-1,106,544,-1" +
",544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544" +
",-1,544,389,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6" +
",-1,106,544,-1,544:15,390,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"6,544:6,-1,106,544,-1,544:10,391,544:5,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:6,544:6,-1,106,544,-1,544:10,392,544:5,-1,544:3,-1,544,111,-1:" +
"4,544:2,-1:7,544:4,123,-1:6,544:5,393,-1,106,544,-1,544:16,-1,544:3,-1,544," +
"111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,394,544:15,-1,544:3," +
"-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544,395,544:1" +
"4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,396,544:2,-1,106" +
",544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,397,544:5" +
",-1,106,544,-1,544:3,456,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:6,398,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:6,544:4,399,544,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4," +
"544:2,-1:7,544:4,123,-1:6,544:3,400,544:2,-1,106,544,-1,544:16,-1,544:3,-1," +
"544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,401,544:15,-1,54" +
"4:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:9,402" +
",544:6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,403,544:5,-1,106," +
"544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,1" +
"06,544,-1,544,404,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:6,-1,106,544,-1,544:11,406,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,544:6,-1,106,544,-1,544:11,407,544:4,-1,544:3,-1,544,111,-1:4" +
",544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,408,544:15,-1,544:3,-1,544,1" +
"11,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:5,409,544:10,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:9,41" +
"0,544:6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544" +
",-1,544:15,411,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1," +
"106,544,-1,544,412,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"6,544:6,-1,106,544,-1,544:8,413,544:7,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,544:6,-1,106,544,-1,544:11,414,544:4,-1,544:3,-1,544,111,-1:4" +
",544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544,415,544:14,-1,544:3,-1,5" +
"44,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:9,416,544:6,-" +
"1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:1" +
"2,417,544:3,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106" +
",544,-1,544:11,418,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:4,419,544,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544" +
":4,123,-1:6,544:3,420,544:2,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,5" +
"44:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:2,479,544:9,430,544:3,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:27,425,-1:46,426,-1:55,471,-1:" +
"46,544:6,-1,106,544,-1,544:3,431,544:9,432,544:2,-1,544:3,-1,544,111,-1:4,5" +
"44:2,-1:7,544:4,123,-1:6,544:2,434,544:3,-1,106,544,-1,544:16,-1,544:3,-1,5" +
"44,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,435,-1,106,544,-1,544:16,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,436" +
",544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544," +
"-1,544:5,546,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:" +
"6,-1,106,544,-1,544:11,551,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4," +
"123,-1:6,544:6,-1,106,544,-1,544:13,437,544:2,-1,544:3,-1,544,111,-1:4,544:" +
"2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:12,496,544:3,-1,544:3,-1,544," +
"111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2,498,544:3,-1,106,544,-1,544:16,-1," +
"544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,438,-1,106,544,-1,544" +
":16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1," +
"544:9,500,544:6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2,50" +
"1,544:3,-1,106,554,-1,544:9,540,544:6,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,544:6,-1,106,544,-1,544,439,544:14,-1,544:3,-1,544,111,-1:4,5" +
"44:2,-1:7,544:4,123,-1:6,544:6,-1,106,440,-1,544:12,502,544:3,-1,544:3,-1,5" +
"44,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544,441,544:14,-1" +
",544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,541,-1,106,544,-1,54" +
"4:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1" +
",544:5,442,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,506,54" +
"4:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:4,509,544,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544" +
":4,123,-1:6,544:6,-1,106,544,-1,544:13,443,544:2,-1,544:3,-1,544,111,-1:4,5" +
"44:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:14,510,544,-1,544:3,-1,544" +
",111,-1:4,544:2,-1:7,544:4,123,-1:6,544,548,544:4,-1,106,544,-1,544:16,-1,5" +
"44:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,444,544:2,-1,106,544,-" +
"1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,445,544:5,-1,10" +
"6,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1" +
",106,544,-1,544:6,511,544:9,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-" +
"1:6,544:6,-1,106,544,-1,544:7,446,544:8,-1,544:3,-1,544,111,-1:4,544:2,-1:7" +
",544:4,123,-1:6,544:6,-1,106,544,-1,544:4,512,544:11,-1,544:3,-1,544,111,-1" +
":4,544:2,-1:7,544:4,123,-1:6,544:3,513,544:2,-1,106,544,-1,544:16,-1,544:3," +
"-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,447,54" +
"4:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1," +
"448,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106," +
"544,-1,544:3,449,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6," +
"544:6,-1,106,544,-1,544:5,450,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,54" +
"4:4,123,-1:6,544:6,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7" +
",544,451,544:2,123,-1:6,544:6,-1,106,544,-1,544:9,516,544:6,-1,544:3,-1,544" +
",111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:5,453,544:10,-1" +
",544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:5," +
"552,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,454,-1," +
"106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6," +
"-1,106,544,-1,544:11,517,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,12" +
"3,-1:6,455,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,544:6,-1,106,544,-1,544:6,522,544:9,-1,544:3,-1,544,111,-1:4," +
"544:2,-1:7,544:4,123,-1:6,544:5,457,-1,106,544,-1,544:16,-1,544:3,-1,544,11" +
"1,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:8,524,544:7,-1,544" +
":3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,525,544:15" +
",-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544" +
":16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544,458,544:2,123,-1:6,544:3,459,54" +
"4:2,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6" +
",544:5,460,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:6,544:6,-1,106,544,-1,544:9,527,544:6,-1,544:3,-1,544,111,-1:4,544:2," +
"-1:7,544:4,123,-1:6,544:3,461,544:2,-1,106,544,-1,544:16,-1,544:3,-1,544,11" +
"1,-1:4,544:2,-1:7,544:4,123,-1:6,544:4,528,544,-1,106,544,-1,544:16,-1,544:" +
"3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,462,544:5,-1,106,544,-1,544:16," +
"-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,463,544:2,-1,106,5" +
"44,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,464,-" +
"1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:" +
"6,-1,106,544,-1,544,529,544:14,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,12" +
"3,-1:6,465,544:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,5" +
"44:4,123,-1:6,544:5,530,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2" +
",-1:7,544:4,123,-1:6,544:5,466,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:" +
"4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,531,-1,544:16,-1,544:3,-1,544,111," +
"-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:2,532,544:13,-1,544:" +
"3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,533,544:2,-1,106,544,-1,5" +
"44:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:3,467,544:2,-1" +
",106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2" +
",468,544:3,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:6,544:6,-1,106,544,-1,537,544:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7," +
"544:4,123,-1:8,470,-1:55,472,-1:55,544:6,-1,106,544,-1,544:11,497,544:4,-1," +
"544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:2,505,544:3,-1,106,544," +
"-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,508,-1,1" +
"06,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,514,544" +
":5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6," +
"544,515,544:4,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:" +
"4,123,-1:6,544:6,-1,106,544,-1,544:5,519,544:10,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,518,544:4,-1,544:3,-1,54" +
"4,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,503,544:4,-" +
"1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,543,-1,106,544,-1,5" +
"44:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-" +
"1,544:5,523,544:10,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6" +
",-1,106,544,-1,544:11,520,544:4,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,1" +
"23,-1:6,544:6,-1,106,544,-1,544,484,544:14,-1,544:3,-1,544,111,-1:4,544:2,-" +
"1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,504,544:4,-1,544:3,-1,544,111" +
",-1:4,544:2,-1:7,544:4,123,-1:6,544:5,542,-1,106,544,-1,544:16,-1,544:3,-1," +
"544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,526,544:4" +
",-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,485,544:4,486,-1,106,54" +
"4,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:5,547,-1" +
",106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,487,5" +
"44:5,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:" +
"6,545,544:4,550,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,54" +
"4:4,123,-1:6,544,538,544:4,-1,106,544,-1,544:16,-1,544:3,-1,544,111,-1:4,54" +
"4:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:11,488,544:4,-1,544:3,-1,54" +
"4,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,544:5,489,544:10,-" +
"1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-1,490,5" +
"44:15,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6,-1,106,544,-" +
"1,544:3,539,544:12,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1:6,544:6" +
",-1,106,544,-1,544,491,544:10,492,493,544:2,-1,544:3,-1,544,111,-1:4,544:2," +
"-1:7,544:4,123,-1:19,535,-1:52,536,-1:52,563,-1:72,565,-1:35,544:6,-1,106,5" +
"44,566,544:16,-1,544:3,-1,544,111,-1:4,544:2,-1:7,544:4,123,-1");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

//Add code to be executed when the end of the file is reached
	return (new Symbol(sym.EOF,""));
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						{
}
					case -2:
						break;
					case 2:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -3:
						break;
					case 3:
						{
}
					case -4:
						break;
					case 4:
						{ 
	return (new Symbol(sym.OPTION_A,yytext()));
}
					case -5:
						break;
					case 5:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -6:
						break;
					case 6:
						{ 
	return (new Symbol(sym.OPTION_T,yytext()));
}
					case -7:
						break;
					case 7:
						{ 
	return (new Symbol(sym.BANG,yytext()));
}
					case -8:
						break;
					case 8:
						{ 
	return (new Symbol(sym.DOT,yytext()));
}
					case -9:
						break;
					case 9:
						{ 
	return (new Symbol(sym.OPTION_N,yytext()));
}
					case -10:
						break;
					case 10:
						{ 
	return (new Symbol(sym.OPTION_B,yytext()));
}
					case -11:
						break;
					case 11:
						{ 
	return (new Symbol(sym.QUESTION_MARK,yytext()));
}
					case -12:
						break;
					case 12:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -13:
						break;
					case 13:
						{ 
	return (new Symbol(sym.NOT,yytext()));
}
					case -14:
						break;
					case 14:
						{ 
	return (new Symbol(sym.COMMA,yytext()));
}
					case -15:
						break;
					case 15:
						{ 
	return (new Symbol(sym.COLON,yytext()));
}
					case -16:
						break;
					case 16:
						{ 
	return (new Symbol(sym.OPEN_PARAN,yytext()));
}
					case -17:
						break;
					case 17:
						{ 
	return (new Symbol(sym.CLOSE_PARAN,yytext()));
}
					case -18:
						break;
					case 18:
						{ 
	return (new Symbol(sym.OPEN_CURLY,yytext()));
}
					case -19:
						break;
					case 19:
						{ 
	return (new Symbol(sym.CLOSE_CURLY,yytext()));
}
					case -20:
						break;
					case 20:
						
					case -21:
						break;
					case 21:
						{ 
	return (new Symbol(sym.OPTION_AV,yytext()));
}
					case -22:
						break;
					case 22:
						{ 
	return (new Symbol(sym.OR,yytext()));
}
					case -23:
						break;
					case 23:
						{ 
	return (new Symbol(sym.OPTION_BV,yytext()));
}
					case -24:
						break;
					case 24:
						{ 
	return (new Symbol(sym.STRING_LIT,yytext()));
}
					case -25:
						break;
					case 25:
						{ 
	return (new Symbol(sym.IMPLICATION,yytext()));
}
					case -26:
						break;
					case 26:
						{ 
	return (new Symbol(sym.AND,yytext()));
}
					case -27:
						break;
					case 27:
						{ 
	return (new Symbol(sym.ASK,yytext()));
}
					case -28:
						break;
					case 28:
						{ 
	return (new Symbol(sym.ALL,yytext()));
}
					case -29:
						break;
					case 29:
						{ 
	return (new Symbol(sym.IFF,yytext()));
}
					case -30:
						break;
					case 30:
						{ 
	return (new Symbol(sym.OR_ENTAILMENT,yytext()));
}
					case -31:
						break;
					case 31:
						{ 
	return (new Symbol(sym.NOR,yytext()));
}
					case -32:
						break;
					case 32:
						{ 
	return (new Symbol(sym.XOR,yytext()));
}
					case -33:
						break;
					case 33:
						{ 
	return (new Symbol(sym.WFF,yytext()));
}
					case -34:
						break;
					case 34:
						{ 
	return (new Symbol(sym.NUMERICAL_ENTAILMENT,yytext()));
}
					case -35:
						break;
					case 35:
						{ 
	return (new Symbol(sym.EQUALITY,yytext()));
}
					case -36:
						break;
					case 36:
						{ 
	return (new Symbol(sym.AND_ENTAILMENT,yytext()));
}
					case -37:
						break;
					case 37:
						{ 
	return (new Symbol(sym.AUTO,yytext()));
}
					case -38:
						break;
					case 38:
						{ 
	return (new Symbol(sym.IFDO,yytext()));
}
					case -39:
						break;
					case 39:
						{ 
	return (new Symbol(sym.DEMO,yytext()));
}
					case -40:
						break;
					case 40:
						{ 
	return (new Symbol(sym.NAND,yytext()));
}
					case -41:
						break;
					case 41:
						{ 
	return (new Symbol(sym.NONE,yytext()));
}
					case -42:
						break;
					case 42:
						{ 
	return (new Symbol(sym.SHOW,yytext()));
}
					case -43:
						break;
					case 43:
						{ 
	return (new Symbol(sym.BANGPATH,yytext()));
}
					case -44:
						break;
					case 44:
						{ 
	return (new Symbol(sym.LOAD,yytext()));
}
					case -45:
						break;
					case 45:
						{ 
	return (new Symbol(sym.ANDOR,yytext()));
}
					case -46:
						break;
					case 46:
						{ 
	return (new Symbol(sym.ASKWH,yytext()));
}
					case -47:
						break;
					case 47:
						{ 
	return (new Symbol(sym.TRACE,yytext()));
}
					case -48:
						break;
					case 48:
						{ 
	return (new Symbol(sym.EMPTYPATH,yytext()));
}
					case -49:
						break;
					case 49:
						{ 
	return (new Symbol(sym.KSTAR,yytext()));
}
					case -50:
						break;
					case 50:
						{ 
	return (new Symbol(sym.KPLUS,yytext()));
}
					case -51:
						break;
					case 51:
						{ 
	return (new Symbol(sym.ACTING,yytext()));
}
					case -52:
						break;
					case 52:
						{ 
	return (new Symbol(sym.THRESH,yytext()));
}
					case -53:
						break;
					case 53:
						{ 
	return (new Symbol(sym.EXPAND,yytext()));
}
					case -54:
						break;
					case 54:
						{ 
	return (new Symbol(sym.EXPERT,yytext()));
}
					case -55:
						break;
					case 55:
						{ 
	return (new Symbol(sym.NORMAL,yytext()));
}
					case -56:
						break;
					case 56:
						{ 
	return (new Symbol(sym.WHENDO,yytext()));
}
					case -57:
						break;
					case 57:
						{ 
	return (new Symbol(sym.REDUCE,yytext()));
}
					case -58:
						break;
					case 58:
						{ 
	return (new Symbol(sym.MANUAL,yytext()));
}
					case -59:
						break;
					case 59:
						{ 
	return (new Symbol(sym.EFFECT,yytext()));
}
					case -60:
						break;
					case 60:
						{ 
	return (new Symbol(sym.COMPOSE,yytext()));
}
					case -61:
						break;
					case 61:
						{ 
	return (new Symbol(sym.CLEARKB,yytext()));
}
					case -62:
						break;
					case 62:
						{ 
	return (new Symbol(sym.WITHALL,yytext()));
}
					case -63:
						break;
					case 63:
						{ 
	return (new Symbol(sym.BR_MODE,yytext()));
}
					case -64:
						break;
					case 64:
						{ 
	return (new Symbol(sym.UNTRACE,yytext()));
}
					case -65:
						break;
					case 65:
						{ 
	return (new Symbol(sym.PARSING,yytext()));
}
					case -66:
						break;
					case 66:
						{ 
	return (new Symbol(sym.PERFORM,yytext()));
}
					case -67:
						break;
					case 67:
						{ 
	return (new Symbol(sym.ACTPLAN,yytext()));
}
					case -68:
						break;
					case 68:
						{ 
	return (new Symbol(sym.ACTIVATE,yytext()));
}
					case -69:
						break;
					case 69:
						{ 
	return (new Symbol(sym.ASKIFNOT,yytext()));
}
					case -70:
						break;
					case 70:
						{ 
	return (new Symbol(sym.ASKWHNOT,yytext()));
}
					case -71:
						break;
					case 71:
						{ 
	return (new Symbol(sym.CONVERSE,yytext()));
}
					case -72:
						break;
					case 72:
						{ 
	return (new Symbol(sym.WITHSOME,yytext()));
}
					case -73:
						break;
					case 73:
						{ 
	return (new Symbol(sym.GOALPLAN,yytext()));
}
					case -74:
						break;
					case 74:
						{ 
	return (new Symbol(sym.COPYRIGHT,yytext()));
}
					case -75:
						break;
					case 75:
						{ 
	return (new Symbol(sym.INFERENCE,yytext()));
}
					case -76:
						break;
					case 76:
						{ 
	return (new Symbol(sym.UNLABELED,yytext()));
}
					case -77:
						break;
					case 77:
						{ 
	return (new Symbol(sym.FILEPATH,yytext()));
}
					case -78:
						break;
					case 78:
						{ 
	return (new Symbol(sym.SET_MODE_1,yytext()));
}
					case -79:
						break;
					case 79:
						{ 
	return (new Symbol(sym.SET_MODE_2,yytext()));
}
					case -80:
						break;
					case 80:
						{ 
	return (new Symbol(sym.SET_MODE_3,yytext()));
}
					case -81:
						break;
					case 81:
						{ 
	return (new Symbol(sym.WHENEVERDO,yytext()));
}
					case -82:
						break;
					case 82:
						{ 
	return (new Symbol(sym.LIST_TERMS,yytext()));
}
					case -83:
						break;
					case 83:
						{ 
	return (new Symbol(sym.CLEAR_INFER,yytext()));
}
					case -84:
						break;
					case 84:
						{ 
	return (new Symbol(sym.DEFINE_PATH,yytext()));
}
					case -85:
						break;
					case 85:
						{ 
	return (new Symbol(sym.SET_CONTEXT,yytext()));
}
					case -86:
						break;
					case 86:
						{ 
	return (new Symbol(sym.DEFINE_FRAME,yytext()));
}
					case -87:
						break;
					case 87:
						{ 
	return (new Symbol(sym.FUNIT,yytext()));
}
					case -88:
						break;
					case 88:
						{ 
	return (new Symbol(sym.PRECONDITION,yytext()));
}
					case -89:
						break;
					case 89:
						{ 
	return (new Symbol(sym.BUNIT,yytext()));
}
					case -90:
						break;
					case 90:
						{ 
	return (new Symbol(sym.BELIEFS_ABOUT,yytext()));
}
					case -91:
						break;
					case 91:
						{ 
	return (new Symbol(sym.LIST_CONTEXTS,yytext()));
}
					case -92:
						break;
					case 92:
						{ 
	return (new Symbol(sym.UNDEFINE_PATH,yytext()));
}
					case -93:
						break;
					case 93:
						{ 
	return (new Symbol(sym.ADD_TO_CONTEXT,yytext()));
}
					case -94:
						break;
					case 94:
						{ 
	return (new Symbol(sym.DESCRIBE_TERMS,yytext()));
}
					case -95:
						break;
					case 95:
						{ 
	return (new Symbol(sym.RANGE_RESTRICT,yytext()));
}
					case -96:
						break;
					case 96:
						{ 
	return (new Symbol(sym.DEFINE_SEMANTIC,yytext()));
}
					case -97:
						break;
					case 97:
						{ 
	return (new Symbol(sym.DEFINE_RELATION,yytext()));
}
					case -98:
						break;
					case 98:
						{ 
	return (new Symbol(sym.DOMAIN_RESTRICT,yytext()));
}
					case -99:
						break;
					case 99:
						{ 
	return (new Symbol(sym.DESCRIBE_CONTEXT,yytext()));
}
					case -100:
						break;
					case 100:
						{ 
	return (new Symbol(sym.LIST_ASSERTED_WFFS,yytext()));
}
					case -101:
						break;
					case 101:
						{ 
	return (new Symbol(sym.SET_DEFAULT_CONTEXT,yytext()));
}
					case -102:
						break;
					case 102:
						{ 
	return (new Symbol(sym.REMOVE_FROM_CONTEXT,yytext()));
}
					case -103:
						break;
					case 103:
						{ 
	return (new Symbol(sym.IRREFLEXIVE_RESTRICT,yytext()));
}
					case -104:
						break;
					case 104:
						{ 
	return (new Symbol(sym.CFRESFUNIT,yytext()));
}
					case -105:
						break;
					case 105:
						{ 
	return (new Symbol(sym.CFRESBUNIT,yytext()));
}
					case -106:
						break;
					case 107:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -107:
						break;
					case 108:
						{
}
					case -108:
						break;
					case 109:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -109:
						break;
					case 110:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -110:
						break;
					case 112:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -111:
						break;
					case 113:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -112:
						break;
					case 115:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -113:
						break;
					case 116:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -114:
						break;
					case 118:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -115:
						break;
					case 119:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -116:
						break;
					case 121:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -117:
						break;
					case 123:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -118:
						break;
					case 125:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -119:
						break;
					case 127:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -120:
						break;
					case 129:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -121:
						break;
					case 131:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -122:
						break;
					case 133:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -123:
						break;
					case 135:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -124:
						break;
					case 137:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -125:
						break;
					case 139:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -126:
						break;
					case 141:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -127:
						break;
					case 143:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -128:
						break;
					case 145:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -129:
						break;
					case 147:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -130:
						break;
					case 149:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -131:
						break;
					case 151:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -132:
						break;
					case 153:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -133:
						break;
					case 155:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -134:
						break;
					case 157:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -135:
						break;
					case 159:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -136:
						break;
					case 161:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -137:
						break;
					case 163:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -138:
						break;
					case 165:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -139:
						break;
					case 167:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -140:
						break;
					case 169:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -141:
						break;
					case 171:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -142:
						break;
					case 173:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -143:
						break;
					case 175:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -144:
						break;
					case 177:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -145:
						break;
					case 179:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -146:
						break;
					case 181:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -147:
						break;
					case 183:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -148:
						break;
					case 185:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -149:
						break;
					case 187:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -150:
						break;
					case 189:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -151:
						break;
					case 191:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -152:
						break;
					case 193:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -153:
						break;
					case 195:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -154:
						break;
					case 197:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -155:
						break;
					case 199:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -156:
						break;
					case 201:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -157:
						break;
					case 203:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -158:
						break;
					case 205:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -159:
						break;
					case 207:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -160:
						break;
					case 209:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -161:
						break;
					case 211:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -162:
						break;
					case 213:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -163:
						break;
					case 215:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -164:
						break;
					case 217:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -165:
						break;
					case 219:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -166:
						break;
					case 221:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -167:
						break;
					case 223:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -168:
						break;
					case 225:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -169:
						break;
					case 227:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -170:
						break;
					case 229:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -171:
						break;
					case 231:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -172:
						break;
					case 233:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -173:
						break;
					case 235:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -174:
						break;
					case 237:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -175:
						break;
					case 239:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -176:
						break;
					case 241:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -177:
						break;
					case 243:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -178:
						break;
					case 318:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -179:
						break;
					case 319:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -180:
						break;
					case 354:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -181:
						break;
					case 364:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -182:
						break;
					case 368:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -183:
						break;
					case 371:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -184:
						break;
					case 372:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -185:
						break;
					case 373:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -186:
						break;
					case 374:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -187:
						break;
					case 375:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -188:
						break;
					case 376:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -189:
						break;
					case 377:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -190:
						break;
					case 378:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -191:
						break;
					case 379:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -192:
						break;
					case 380:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -193:
						break;
					case 381:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -194:
						break;
					case 382:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -195:
						break;
					case 383:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -196:
						break;
					case 384:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -197:
						break;
					case 385:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -198:
						break;
					case 386:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -199:
						break;
					case 387:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -200:
						break;
					case 388:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -201:
						break;
					case 389:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -202:
						break;
					case 390:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -203:
						break;
					case 391:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -204:
						break;
					case 392:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -205:
						break;
					case 393:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -206:
						break;
					case 394:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -207:
						break;
					case 395:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -208:
						break;
					case 396:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -209:
						break;
					case 397:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -210:
						break;
					case 398:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -211:
						break;
					case 399:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -212:
						break;
					case 400:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -213:
						break;
					case 401:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -214:
						break;
					case 402:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -215:
						break;
					case 403:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -216:
						break;
					case 404:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -217:
						break;
					case 405:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -218:
						break;
					case 406:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -219:
						break;
					case 407:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -220:
						break;
					case 408:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -221:
						break;
					case 409:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -222:
						break;
					case 410:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -223:
						break;
					case 411:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -224:
						break;
					case 412:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -225:
						break;
					case 413:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -226:
						break;
					case 414:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -227:
						break;
					case 415:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -228:
						break;
					case 416:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -229:
						break;
					case 417:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -230:
						break;
					case 418:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -231:
						break;
					case 419:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -232:
						break;
					case 420:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -233:
						break;
					case 421:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -234:
						break;
					case 427:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -235:
						break;
					case 428:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -236:
						break;
					case 429:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -237:
						break;
					case 430:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -238:
						break;
					case 431:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -239:
						break;
					case 432:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -240:
						break;
					case 433:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -241:
						break;
					case 434:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -242:
						break;
					case 435:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -243:
						break;
					case 436:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -244:
						break;
					case 437:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -245:
						break;
					case 438:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -246:
						break;
					case 439:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -247:
						break;
					case 440:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -248:
						break;
					case 441:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -249:
						break;
					case 442:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -250:
						break;
					case 443:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -251:
						break;
					case 444:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -252:
						break;
					case 445:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -253:
						break;
					case 446:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -254:
						break;
					case 447:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -255:
						break;
					case 448:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -256:
						break;
					case 449:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -257:
						break;
					case 450:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -258:
						break;
					case 451:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -259:
						break;
					case 452:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -260:
						break;
					case 453:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -261:
						break;
					case 454:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -262:
						break;
					case 455:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -263:
						break;
					case 456:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -264:
						break;
					case 457:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -265:
						break;
					case 458:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -266:
						break;
					case 459:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -267:
						break;
					case 460:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -268:
						break;
					case 461:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -269:
						break;
					case 462:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -270:
						break;
					case 463:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -271:
						break;
					case 464:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -272:
						break;
					case 465:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -273:
						break;
					case 466:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -274:
						break;
					case 467:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -275:
						break;
					case 468:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -276:
						break;
					case 469:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -277:
						break;
					case 473:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -278:
						break;
					case 474:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -279:
						break;
					case 475:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -280:
						break;
					case 476:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -281:
						break;
					case 477:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -282:
						break;
					case 478:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -283:
						break;
					case 479:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -284:
						break;
					case 480:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -285:
						break;
					case 481:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -286:
						break;
					case 482:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -287:
						break;
					case 483:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -288:
						break;
					case 484:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -289:
						break;
					case 485:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -290:
						break;
					case 486:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -291:
						break;
					case 487:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -292:
						break;
					case 488:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -293:
						break;
					case 489:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -294:
						break;
					case 490:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -295:
						break;
					case 491:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -296:
						break;
					case 492:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -297:
						break;
					case 493:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -298:
						break;
					case 494:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -299:
						break;
					case 495:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -300:
						break;
					case 496:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -301:
						break;
					case 497:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -302:
						break;
					case 498:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -303:
						break;
					case 499:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -304:
						break;
					case 500:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -305:
						break;
					case 501:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -306:
						break;
					case 502:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -307:
						break;
					case 503:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -308:
						break;
					case 504:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -309:
						break;
					case 505:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -310:
						break;
					case 506:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -311:
						break;
					case 507:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -312:
						break;
					case 508:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -313:
						break;
					case 509:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -314:
						break;
					case 510:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -315:
						break;
					case 511:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -316:
						break;
					case 512:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -317:
						break;
					case 513:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -318:
						break;
					case 514:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -319:
						break;
					case 515:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -320:
						break;
					case 516:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -321:
						break;
					case 517:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -322:
						break;
					case 518:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -323:
						break;
					case 519:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -324:
						break;
					case 520:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -325:
						break;
					case 521:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -326:
						break;
					case 522:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -327:
						break;
					case 523:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -328:
						break;
					case 524:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -329:
						break;
					case 525:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -330:
						break;
					case 526:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -331:
						break;
					case 527:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -332:
						break;
					case 528:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -333:
						break;
					case 529:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -334:
						break;
					case 530:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -335:
						break;
					case 531:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -336:
						break;
					case 532:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -337:
						break;
					case 533:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -338:
						break;
					case 534:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -339:
						break;
					case 537:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -340:
						break;
					case 538:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -341:
						break;
					case 539:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -342:
						break;
					case 540:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -343:
						break;
					case 541:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -344:
						break;
					case 542:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -345:
						break;
					case 543:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -346:
						break;
					case 544:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -347:
						break;
					case 545:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -348:
						break;
					case 546:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -349:
						break;
					case 547:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -350:
						break;
					case 548:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -351:
						break;
					case 549:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -352:
						break;
					case 550:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -353:
						break;
					case 551:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -354:
						break;
					case 552:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -355:
						break;
					case 553:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -356:
						break;
					case 554:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -357:
						break;
					case 555:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -358:
						break;
					case 556:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -359:
						break;
					case 557:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -360:
						break;
					case 558:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -361:
						break;
					case 559:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -362:
						break;
					case 560:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -363:
						break;
					case 561:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -364:
						break;
					case 562:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -365:
						break;
					case 567:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -366:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
