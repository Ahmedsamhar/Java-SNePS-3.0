package sneps.snepslog;

import java.lang.System;
import java.io.*;
import java_cup.runtime.Symbol;


class Lexer implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

//initialize  variables to be used by class
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	Lexer (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	Lexer (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Lexer () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;

//Add code to be executed on initialization of the lexer
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int yy_state_dtrans[] = {
		0
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NOT_ACCEPT,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NOT_ACCEPT,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NOT_ACCEPT,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NOT_ACCEPT,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NOT_ACCEPT,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NOT_ACCEPT,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NOT_ACCEPT,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NOT_ACCEPT,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NOT_ACCEPT,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NOT_ACCEPT,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NOT_ACCEPT,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NOT_ACCEPT,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NOT_ACCEPT,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NOT_ACCEPT,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NOT_ACCEPT,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NOT_ACCEPT,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NOT_ACCEPT,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NOT_ACCEPT,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NOT_ACCEPT,
		/* 168 */ YY_NOT_ACCEPT,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NOT_ACCEPT,
		/* 171 */ YY_NOT_ACCEPT,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NOT_ACCEPT,
		/* 174 */ YY_NOT_ACCEPT,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NOT_ACCEPT,
		/* 177 */ YY_NOT_ACCEPT,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NOT_ACCEPT,
		/* 180 */ YY_NOT_ACCEPT,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NOT_ACCEPT,
		/* 183 */ YY_NOT_ACCEPT,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NOT_ACCEPT,
		/* 186 */ YY_NOT_ACCEPT,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NOT_ACCEPT,
		/* 189 */ YY_NOT_ACCEPT,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NOT_ACCEPT,
		/* 192 */ YY_NOT_ACCEPT,
		/* 193 */ YY_NOT_ACCEPT,
		/* 194 */ YY_NOT_ACCEPT,
		/* 195 */ YY_NOT_ACCEPT,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NOT_ACCEPT,
		/* 198 */ YY_NO_ANCHOR,
		/* 199 */ YY_NO_ANCHOR,
		/* 200 */ YY_NO_ANCHOR,
		/* 201 */ YY_NOT_ACCEPT,
		/* 202 */ YY_NOT_ACCEPT,
		/* 203 */ YY_NOT_ACCEPT,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NOT_ACCEPT,
		/* 207 */ YY_NOT_ACCEPT,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NOT_ACCEPT,
		/* 210 */ YY_NOT_ACCEPT,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NOT_ACCEPT,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NOT_ACCEPT,
		/* 216 */ YY_NOT_ACCEPT,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NOT_ACCEPT,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NOT_ACCEPT,
		/* 222 */ YY_NOT_ACCEPT,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NO_ANCHOR,
		/* 225 */ YY_NO_ANCHOR,
		/* 226 */ YY_NOT_ACCEPT,
		/* 227 */ YY_NOT_ACCEPT,
		/* 228 */ YY_NOT_ACCEPT,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NO_ANCHOR,
		/* 231 */ YY_NO_ANCHOR,
		/* 232 */ YY_NOT_ACCEPT,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NO_ANCHOR,
		/* 235 */ YY_NO_ANCHOR,
		/* 236 */ YY_NO_ANCHOR,
		/* 237 */ YY_NO_ANCHOR,
		/* 238 */ YY_NO_ANCHOR,
		/* 239 */ YY_NO_ANCHOR,
		/* 240 */ YY_NO_ANCHOR,
		/* 241 */ YY_NO_ANCHOR,
		/* 242 */ YY_NO_ANCHOR,
		/* 243 */ YY_NO_ANCHOR,
		/* 244 */ YY_NO_ANCHOR,
		/* 245 */ YY_NO_ANCHOR,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NO_ANCHOR,
		/* 248 */ YY_NO_ANCHOR,
		/* 249 */ YY_NO_ANCHOR,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NO_ANCHOR,
		/* 252 */ YY_NO_ANCHOR,
		/* 253 */ YY_NO_ANCHOR,
		/* 254 */ YY_NO_ANCHOR,
		/* 255 */ YY_NO_ANCHOR,
		/* 256 */ YY_NO_ANCHOR,
		/* 257 */ YY_NO_ANCHOR,
		/* 258 */ YY_NO_ANCHOR,
		/* 259 */ YY_NO_ANCHOR,
		/* 260 */ YY_NO_ANCHOR,
		/* 261 */ YY_NO_ANCHOR,
		/* 262 */ YY_NO_ANCHOR,
		/* 263 */ YY_NO_ANCHOR,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NO_ANCHOR,
		/* 266 */ YY_NOT_ACCEPT,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NO_ANCHOR,
		/* 271 */ YY_NO_ANCHOR,
		/* 272 */ YY_NO_ANCHOR,
		/* 273 */ YY_NO_ANCHOR,
		/* 274 */ YY_NO_ANCHOR,
		/* 275 */ YY_NO_ANCHOR,
		/* 276 */ YY_NO_ANCHOR,
		/* 277 */ YY_NO_ANCHOR,
		/* 278 */ YY_NO_ANCHOR,
		/* 279 */ YY_NO_ANCHOR,
		/* 280 */ YY_NO_ANCHOR,
		/* 281 */ YY_NO_ANCHOR,
		/* 282 */ YY_NO_ANCHOR,
		/* 283 */ YY_NO_ANCHOR,
		/* 284 */ YY_NO_ANCHOR,
		/* 285 */ YY_NO_ANCHOR,
		/* 286 */ YY_NO_ANCHOR,
		/* 287 */ YY_NO_ANCHOR,
		/* 288 */ YY_NO_ANCHOR,
		/* 289 */ YY_NO_ANCHOR,
		/* 290 */ YY_NO_ANCHOR,
		/* 291 */ YY_NO_ANCHOR,
		/* 292 */ YY_NO_ANCHOR,
		/* 293 */ YY_NO_ANCHOR,
		/* 294 */ YY_NO_ANCHOR,
		/* 295 */ YY_NOT_ACCEPT,
		/* 296 */ YY_NO_ANCHOR,
		/* 297 */ YY_NO_ANCHOR,
		/* 298 */ YY_NO_ANCHOR,
		/* 299 */ YY_NO_ANCHOR,
		/* 300 */ YY_NO_ANCHOR,
		/* 301 */ YY_NO_ANCHOR,
		/* 302 */ YY_NO_ANCHOR,
		/* 303 */ YY_NO_ANCHOR,
		/* 304 */ YY_NO_ANCHOR,
		/* 305 */ YY_NO_ANCHOR,
		/* 306 */ YY_NO_ANCHOR,
		/* 307 */ YY_NO_ANCHOR,
		/* 308 */ YY_NO_ANCHOR,
		/* 309 */ YY_NO_ANCHOR,
		/* 310 */ YY_NO_ANCHOR,
		/* 311 */ YY_NO_ANCHOR,
		/* 312 */ YY_NO_ANCHOR,
		/* 313 */ YY_NO_ANCHOR,
		/* 314 */ YY_NO_ANCHOR,
		/* 315 */ YY_NO_ANCHOR,
		/* 316 */ YY_NO_ANCHOR,
		/* 317 */ YY_NO_ANCHOR,
		/* 318 */ YY_NO_ANCHOR,
		/* 319 */ YY_NO_ANCHOR,
		/* 320 */ YY_NO_ANCHOR,
		/* 321 */ YY_NO_ANCHOR,
		/* 322 */ YY_NO_ANCHOR,
		/* 323 */ YY_NO_ANCHOR,
		/* 324 */ YY_NO_ANCHOR,
		/* 325 */ YY_NO_ANCHOR,
		/* 326 */ YY_NO_ANCHOR,
		/* 327 */ YY_NO_ANCHOR,
		/* 328 */ YY_NO_ANCHOR,
		/* 329 */ YY_NO_ANCHOR,
		/* 330 */ YY_NO_ANCHOR,
		/* 331 */ YY_NO_ANCHOR,
		/* 332 */ YY_NO_ANCHOR,
		/* 333 */ YY_NO_ANCHOR,
		/* 334 */ YY_NO_ANCHOR,
		/* 335 */ YY_NO_ANCHOR,
		/* 336 */ YY_NO_ANCHOR,
		/* 337 */ YY_NO_ANCHOR,
		/* 338 */ YY_NO_ANCHOR,
		/* 339 */ YY_NO_ANCHOR,
		/* 340 */ YY_NO_ANCHOR,
		/* 341 */ YY_NO_ANCHOR,
		/* 342 */ YY_NO_ANCHOR,
		/* 343 */ YY_NO_ANCHOR,
		/* 344 */ YY_NO_ANCHOR,
		/* 345 */ YY_NO_ANCHOR,
		/* 346 */ YY_NO_ANCHOR,
		/* 347 */ YY_NO_ANCHOR,
		/* 348 */ YY_NO_ANCHOR,
		/* 349 */ YY_NO_ANCHOR,
		/* 350 */ YY_NO_ANCHOR,
		/* 351 */ YY_NO_ANCHOR,
		/* 352 */ YY_NO_ANCHOR,
		/* 353 */ YY_NO_ANCHOR,
		/* 354 */ YY_NO_ANCHOR,
		/* 355 */ YY_NO_ANCHOR,
		/* 356 */ YY_NO_ANCHOR,
		/* 357 */ YY_NO_ANCHOR,
		/* 358 */ YY_NO_ANCHOR,
		/* 359 */ YY_NO_ANCHOR,
		/* 360 */ YY_NO_ANCHOR,
		/* 361 */ YY_NO_ANCHOR,
		/* 362 */ YY_NO_ANCHOR,
		/* 363 */ YY_NO_ANCHOR,
		/* 364 */ YY_NO_ANCHOR,
		/* 365 */ YY_NO_ANCHOR,
		/* 366 */ YY_NO_ANCHOR,
		/* 367 */ YY_NO_ANCHOR,
		/* 368 */ YY_NO_ANCHOR,
		/* 369 */ YY_NO_ANCHOR,
		/* 370 */ YY_NO_ANCHOR,
		/* 371 */ YY_NO_ANCHOR,
		/* 372 */ YY_NO_ANCHOR,
		/* 373 */ YY_NO_ANCHOR,
		/* 374 */ YY_NO_ANCHOR,
		/* 375 */ YY_NO_ANCHOR,
		/* 376 */ YY_NO_ANCHOR,
		/* 377 */ YY_NO_ANCHOR,
		/* 378 */ YY_NO_ANCHOR,
		/* 379 */ YY_NO_ANCHOR,
		/* 380 */ YY_NO_ANCHOR,
		/* 381 */ YY_NO_ANCHOR,
		/* 382 */ YY_NO_ANCHOR,
		/* 383 */ YY_NO_ANCHOR,
		/* 384 */ YY_NO_ANCHOR,
		/* 385 */ YY_NO_ANCHOR,
		/* 386 */ YY_NO_ANCHOR,
		/* 387 */ YY_NO_ANCHOR,
		/* 388 */ YY_NO_ANCHOR,
		/* 389 */ YY_NO_ANCHOR,
		/* 390 */ YY_NO_ANCHOR,
		/* 391 */ YY_NO_ANCHOR,
		/* 392 */ YY_NO_ANCHOR,
		/* 393 */ YY_NO_ANCHOR,
		/* 394 */ YY_NO_ANCHOR,
		/* 395 */ YY_NO_ANCHOR,
		/* 396 */ YY_NO_ANCHOR,
		/* 397 */ YY_NO_ANCHOR,
		/* 398 */ YY_NO_ANCHOR,
		/* 399 */ YY_NO_ANCHOR,
		/* 400 */ YY_NO_ANCHOR,
		/* 401 */ YY_NO_ANCHOR,
		/* 402 */ YY_NO_ANCHOR,
		/* 403 */ YY_NO_ANCHOR,
		/* 404 */ YY_NO_ANCHOR,
		/* 405 */ YY_NO_ANCHOR,
		/* 406 */ YY_NO_ANCHOR,
		/* 407 */ YY_NO_ANCHOR,
		/* 408 */ YY_NO_ANCHOR,
		/* 409 */ YY_NO_ANCHOR,
		/* 410 */ YY_NO_ANCHOR,
		/* 411 */ YY_NOT_ACCEPT,
		/* 412 */ YY_NO_ANCHOR,
		/* 413 */ YY_NO_ANCHOR,
		/* 414 */ YY_NO_ANCHOR,
		/* 415 */ YY_NO_ANCHOR,
		/* 416 */ YY_NO_ANCHOR,
		/* 417 */ YY_NO_ANCHOR,
		/* 418 */ YY_NO_ANCHOR,
		/* 419 */ YY_NO_ANCHOR,
		/* 420 */ YY_NO_ANCHOR,
		/* 421 */ YY_NO_ANCHOR,
		/* 422 */ YY_NO_ANCHOR,
		/* 423 */ YY_NO_ANCHOR,
		/* 424 */ YY_NO_ANCHOR,
		/* 425 */ YY_NO_ANCHOR,
		/* 426 */ YY_NO_ANCHOR,
		/* 427 */ YY_NO_ANCHOR,
		/* 428 */ YY_NO_ANCHOR,
		/* 429 */ YY_NO_ANCHOR,
		/* 430 */ YY_NO_ANCHOR,
		/* 431 */ YY_NO_ANCHOR,
		/* 432 */ YY_NO_ANCHOR,
		/* 433 */ YY_NO_ANCHOR,
		/* 434 */ YY_NO_ANCHOR,
		/* 435 */ YY_NO_ANCHOR,
		/* 436 */ YY_NO_ANCHOR,
		/* 437 */ YY_NO_ANCHOR,
		/* 438 */ YY_NO_ANCHOR,
		/* 439 */ YY_NO_ANCHOR,
		/* 440 */ YY_NO_ANCHOR,
		/* 441 */ YY_NO_ANCHOR,
		/* 442 */ YY_NO_ANCHOR,
		/* 443 */ YY_NO_ANCHOR,
		/* 444 */ YY_NO_ANCHOR,
		/* 445 */ YY_NO_ANCHOR,
		/* 446 */ YY_NO_ANCHOR,
		/* 447 */ YY_NO_ANCHOR,
		/* 448 */ YY_NO_ANCHOR,
		/* 449 */ YY_NO_ANCHOR,
		/* 450 */ YY_NO_ANCHOR,
		/* 451 */ YY_NO_ANCHOR,
		/* 452 */ YY_NO_ANCHOR,
		/* 453 */ YY_NO_ANCHOR,
		/* 454 */ YY_NO_ANCHOR,
		/* 455 */ YY_NO_ANCHOR,
		/* 456 */ YY_NO_ANCHOR,
		/* 457 */ YY_NO_ANCHOR,
		/* 458 */ YY_NO_ANCHOR,
		/* 459 */ YY_NO_ANCHOR,
		/* 460 */ YY_NO_ANCHOR,
		/* 461 */ YY_NO_ANCHOR,
		/* 462 */ YY_NO_ANCHOR,
		/* 463 */ YY_NO_ANCHOR,
		/* 464 */ YY_NO_ANCHOR,
		/* 465 */ YY_NO_ANCHOR,
		/* 466 */ YY_NO_ANCHOR,
		/* 467 */ YY_NO_ANCHOR,
		/* 468 */ YY_NO_ANCHOR,
		/* 469 */ YY_NO_ANCHOR,
		/* 470 */ YY_NO_ANCHOR,
		/* 471 */ YY_NO_ANCHOR,
		/* 472 */ YY_NO_ANCHOR,
		/* 473 */ YY_NO_ANCHOR,
		/* 474 */ YY_NO_ANCHOR,
		/* 475 */ YY_NO_ANCHOR,
		/* 476 */ YY_NO_ANCHOR,
		/* 477 */ YY_NO_ANCHOR,
		/* 478 */ YY_NO_ANCHOR,
		/* 479 */ YY_NOT_ACCEPT,
		/* 480 */ YY_NO_ANCHOR,
		/* 481 */ YY_NOT_ACCEPT,
		/* 482 */ YY_NOT_ACCEPT
	};
	private int yy_cmap[] = unpackFromString(1,130,
"2:9,4,0,2:2,0,2:18,3,11,48,2:3,56,2,61,62,2:2,59,14,12,50,49,32,33,34,57:6," +
"60,1,53,54,55,31,2,45,39,40,47,35,37,65,51,46,51,42,51:3,44,36,51,41,43,51," +
"38,51:5,2:4,52,2,5,23,6,13,10,20,30,22,8,51,19,24,27,16,15,28,51,26,18,7,25" +
",9,21,17,29,51,63,2,64,58,2,66:2")[0];

	private int yy_rmap[] = unpackFromString(1,483,
"0,1,2,3,4,5,6,2:2,7,8,2,9,2:9,10:2,2:2,11,2:4,10:4,12,10:7,2,10:9,2:6,10,2:" +
"13,13,14,15,16,17:3,18,19,20,21,22,23,24,14,25,26,27,28,29,30,31,32,33,34,3" +
"5,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,6" +
"0,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,8" +
"5,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107" +
",108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,12" +
"6,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,1" +
"45,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163," +
"164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182" +
",183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,20" +
"1,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,2" +
"20,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,10,2" +
"38,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256," +
"257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275" +
",276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,29" +
"4,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,3" +
"13,314,315,316,317,308,318,319,320,321,322,323,324,325,326,327,328,329,330," +
"331,332,333,334,335,336,337,338,339,335,340,341,342,337,343,344,275,345,346" +
",347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,36" +
"5,366,367,368,369,370,371,372,373,328,374,375,376,377,378,379,275,380,381,3" +
"82,383,384,385,386,387,10,388,389,390,391,392,393,394,395,396,397,398,399,2" +
"90,400,401,402,403,404,310,405,406,407,408,409")[0];

	private int yy_nxt[][] = unpackFromString(410,67,
"-1,1,2,3,75,4,5,6,410,76,435,7,8,265,2,449,9,456,270,458:2,459,458,10,271,4" +
"60,461,462,463,458:2,11,12:3,464,465,466,458,467,468,469,470,458,471,472,47" +
"3,474,74,77,79,458,13,82,85,2,199,12,14,15,16,17,18,19,20,475,21,-1,1:65,-1" +
":71,3,-1:68,458,294,458:2,22,458,-1,73,198,-1,458,476,458,80,458:5,477,224," +
"458:5,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1," +
"478,458:8,296,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6" +
",-1,73,458,-1,458:7,297,458:3,272,458:4,-1,458:16,-1,458,78,458,83,-1:4,458" +
",-1:7,458,-1:6,302,458:4,303,-1,73,458,-1,304,458:15,-1,458:16,-1,458,78,45" +
"8,83,-1:4,458,-1:7,458,-1:6,458:4,23,307,-1,73,458,-1,458:11,86,458:4,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,78:6,-1,73,78,-1,78:16,-1,12:3" +
",78:13,-1,12,78:2,-1:2,84,-1:2,12,-1:7,78,-1:6,458:6,-1,73,458,-1,458:16,-1" +
",458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,340,458:2,-1,73,458,-" +
"1,458:6,96,458:9,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1" +
",73,458,-1,458,257,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:1" +
"9,93,-1:53,87:6,-1:2,87,-1,87:16,-1,87:16,24,87,-1,87,-1:5,87,-1:7,87,-1:5," +
"75,-1:67,458:6,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1,81,-1:2,45" +
"8,-1:7,458,-1:6,78:6,-1,73,78,-1,78:16,-1,78:16,-1,78:3,-1:5,78,-1:7,78,-1:" +
"6,458:6,-1,73,458,-1,458:4,26,458:11,-1,458:16,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:56,27,-1:65,89,-1:17,83:6,-1:2,83,-1,83:16,-1,83:16,-1,83,-1,83:2" +
",-1:4,83,-1:7,83,-1:56,28,-1:66,25,-1:16,458:6,-1,73,458,95,458:16,-1,458:1" +
"6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,31,458:15,-1,4" +
"58:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:56,29,-1:16,458:6,-1,73,458,-1," +
"32,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:56,30,-1:16,458:6" +
",-1,73,458,-1,458:6,33,458:9,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-" +
"1:17,97,-1:55,458:6,-1,73,34,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458," +
"-1:7,458,-1:28,103,-1:44,458:6,-1,73,458,-1,458:7,35,458:8,-1,458:16,-1,458" +
",78,458,83,-1:4,458,-1:7,458,-1:11,105,-1:61,458:5,36,-1,73,458,-1,458:16,-" +
"1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:8,201,-1:64,458:6,-1,73,458," +
"-1,458:15,37,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:7,226,-1:6,107" +
",-1:13,266,-1:44,458:6,-1,73,458,117,458:4,112,458:11,-1,458:16,-1,458,78,4" +
"58,83,-1:4,458,-1:7,458,-1:16,109,-1:56,458:2,38,458:3,-1,73,458,-1,458:16," +
"-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:29,113,-1:43,458:6,-1,73,45" +
"8,-1,458:9,39,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:11,121," +
"-1:61,458:6,-1,73,458,-1,458:9,40,458:6,-1,458:16,-1,458,78,458,83,-1:4,458" +
",-1:7,458,-1:14,123,-1:58,458:6,-1,73,458,-1,458:7,41,458:8,-1,458:16,-1,45" +
"8,78,458,83,-1:4,458,-1:7,458,-1:6,203,125,127,-1:64,458:6,-1,73,458,-1,458" +
":8,42,458:7,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:19,129,-1:53,45" +
"8:5,44,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:" +
"15,131,-1:57,458:6,-1,73,458,-1,458:15,45,-1,458:16,-1,458,78,458,83,-1:4,4" +
"58,-1:7,458,-1:9,204,-1:63,458:6,-1,73,458,-1,458:12,46,458:3,-1,458:16,-1," +
"458,78,458,83,-1:4,458,-1:7,458,-1:17,134,-1:55,458:5,47,-1,73,458,-1,458:1" +
"6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:21,135,-1:51,458:2,48,458" +
":3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:11,4" +
"3,-1:61,458:2,49,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:16,137,-1:56,458:2,50,458:3,-1,73,458,-1,458:16,-1,458:16,-" +
"1,458,78,458,83,-1:4,458,-1:7,458,-1:11,138,-1:61,458:5,51,-1,73,458,-1,458" +
":16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:25,140,-1:47,458:6,-1,7" +
"3,52,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:7,209,-1:65," +
"458:6,-1,73,458,-1,458,59,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,4" +
"58,-1:19,141,-1,207,-1:7,206,-1:45,210,-1:64,142,-1:79,227,-1:64,145,-1:76," +
"146,-1:60,147,-1:61,148,-1:61,213,-1:81,152,-1:55,153,-1:57,154,-1:68,155,-" +
"1:86,156,-1:65,158,-1:70,53,-1:52,159,-1:56,216,215,-1:76,164,-1:73,217,-1:" +
"74,54,55,56,-1:55,228,-1:53,165,-1:74,57,-1:76,218,-1:53,219,-1:58,166,-1:8" +
"5,58,-1:45,268,-1:88,169,-1:61,60,-1:51,61,-1:76,172,-1:59,173,-1:72,229,-1" +
":76,174,-1:50,62,-1:70,175,-1:77,176,-1:48,178,-1:76,180,-1:76,182,-1:45,18" +
"4,-1:67,63,-1:72,185,-1:71,64,-1:70,65,-1:51,66,-1:69,186,-1:74,67,-1:56,18" +
"7,-1:73,188,-1:65,189,-1:69,190,-1:55,68,-1:76,191,-1:71,192,-1:52,69,-1:66" +
",193,-1:79,222,-1:56,194,-1:73,196,-1:67,70,-1:55,71,-1:66,72,-1:64,458:6,-" +
"1,73,200,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:55,91,-1" +
":17,458:6,-1,73,458,99,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458," +
"-1:16,115,-1:64,205,-1:71,136,-1:64,208,-1:60,143,-1:61,212,-1:87,211,-1:60" +
",232,-1:61,149,-1:61,151,-1:61,162,-1:68,163,-1:86,161,-1:65,267,-1:50,168," +
"-1:71,167,-1:58,170,-1:64,221,-1:88,482,-1:49,177,-1:63,179,-1:79,195,-1:63" +
",197,-1:54,458:2,88,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1" +
":4,458,-1:7,458,-1:6,458:6,-1,73,458,101,458:16,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:16,119,-1:61,214,-1:71,171,-1:58,181,-1:64,458:6,-1,73" +
",458,-1,458:3,320,458,321,458:6,90,458:3,-1,458:16,-1,458,78,458,83,-1:4,45" +
"8,-1:7,458,-1:6,458:6,-1,73,458,111,458:16,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:11,160,-1:63,183,-1:64,458:2,225,458:3,-1,73,458,-1,458:16," +
"-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,133,458:1" +
"6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,92,4" +
"58:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,139" +
",458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,94,458:5,-1,73,45" +
"8,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,4" +
"58,144,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458,98,458:" +
"4,-1,73,458,-1,458,425,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458," +
"-1:6,458:6,-1,73,458,150,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,45" +
"8,-1:6,458:2,231,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:6,458:6,-1,73,458,157,458:16,-1,458:16,-1,458,78,458,83,-1:" +
"4,458,-1:7,458,-1:6,458:4,285,458,-1,73,458,-1,458,100,458:14,-1,458:16,-1," +
"458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,102,458:4,-1" +
",458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,1" +
"04,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,106,458:5,-1,73," +
"458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,108,458:5,-" +
"1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2," +
"110,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458," +
"-1:6,458:5,235,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7" +
",458,-1:6,458,114,458:4,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4" +
",458,-1:7,458,-1:6,458:5,237,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83" +
",-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,116,458:14,-1,458:16,-1,458," +
"78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,118,458:4,-1,458" +
":16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,120,458:3,-1,73,458,-1,45" +
"8:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,1" +
"22,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458" +
",-1,124,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,7" +
"3,458,-1,458:3,239,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:6,-1,73,458,-1,458:7,126,458:8,-1,458:16,-1,458,78,458,83,-1:4,458,-1:" +
"7,458,-1:6,458,128,458:4,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:" +
"4,458,-1:7,458,-1:6,458:5,241,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,8" +
"3,-1:4,458,-1:7,458,-1:6,458:5,243,-1,73,458,-1,458:16,-1,458:16,-1,458,78," +
"458,83,-1:4,458,-1:7,458,-1:6,458:5,130,-1,73,458,-1,458:16,-1,458:16,-1,45" +
"8,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,132,458:15,-1,458:16," +
"-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,230,-1,73,458,-1,458:16,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:16,202,-1:58,220,-1:75,233,-1:60" +
",223,-1:61,458:5,234,-1,73,458,-1,458:7,236,458:8,-1,458:16,-1,458,78,458,8" +
"3,-1:4,458,-1:7,458,-1:6,458:3,273,458:2,-1,73,458,-1,238,458:15,-1,458:16," +
"-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,240,458:5,-1,73,458,-1,458:16,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,242,4" +
"58:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,244,458:2,-1," +
"73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,245,458:" +
"5,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458" +
":5,246,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:" +
"6,458:6,-1,73,458,-1,458:12,247,458:3,-1,458:16,-1,458,78,458,83,-1:4,458,-" +
"1:7,458,-1:6,458:6,-1,73,458,-1,458:10,248,458:5,-1,458:16,-1,458,78,458,83" +
",-1:4,458,-1:7,458,-1:6,249,458:5,-1,73,458,-1,458:16,-1,458:16,-1,458,78,4" +
"58,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,250,458:14,-1,458:16,-1" +
",458,78,458,83,-1:4,458,-1:7,458,-1:6,251,458:5,-1,73,458,-1,458:16,-1,458:" +
"16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:4,252,458,-1,73,458,-1,458:1" +
"6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,253,458:2,-1,73,4" +
"58,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73," +
"458,-1,254,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,255,458" +
":5,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,45" +
"8:6,-1,73,458,-1,458,256,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,45" +
"8,-1:6,458:6,-1,73,458,-1,458:5,258,458:10,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:15,259,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,260,458:14,-1,458:16,-1,458,7" +
"8,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:8,261,458:7,-1,458:1" +
"6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,262,458:14" +
",-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:9" +
",263,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,264,458:" +
"2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458" +
":2,274,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,4" +
"58,-1:8,269,-1:64,458:5,275,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,440,458:4,-1,458:16,-1,458" +
",78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:5,452,458:10,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,319,-1,458:5,301,4" +
"58:10,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1," +
"458:13,276,458:2,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1" +
",73,458,-1,458,322,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:6,-1,73,458,-1,458:2,323,458:13,-1,458:16,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:6,458:6,-1,73,458,-1,458:11,277,458:4,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:2,324,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458" +
",78,458,83,-1:4,458,-1:7,458,-1:6,458:5,325,-1,73,458,-1,458:16,-1,458:16,-" +
"1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:9,421,458:6,-" +
"1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,326,458:3,-1,73,327," +
"-1,458:9,419,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6," +
"-1,73,458,-1,458:12,328,458:3,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458," +
"-1:6,458:6,-1,73,458,-1,458,278,458:14,-1,458:16,-1,458,78,458,83,-1:4,458," +
"-1:7,458,-1:6,458:6,-1,73,458,-1,458:13,331,458:2,-1,458:16,-1,458,78,458,8" +
"3,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,333,458:10,334,458:3,-1,458" +
":16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,45" +
"8:9,443,458:6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,45" +
"8:16,-1,458:4,279,458:11,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,7" +
"3,314,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,338,458:5" +
",-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:" +
"6,-1,73,458,-1,339,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:6,-1,73,458,-1,458:14,341,458,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7" +
",458,-1:6,458:6,-1,73,458,-1,301,458:15,-1,458:16,-1,458,78,458,83,-1:4,458" +
",-1:7,458,-1:6,458,444,458:4,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83" +
",-1:4,458,-1:7,458,-1:6,458:3,280,458:2,-1,73,458,-1,458:16,-1,458:16,-1,45" +
"8,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,301,-1,458:16,-1,458:16,-1,4" +
"58,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,445,458:2,-1,73,458,-1,458:16,-1," +
"458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:7,343" +
",458:8,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1" +
",458,344,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1," +
"73,458,-1,458:11,281,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:" +
"6,458:5,346,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,45" +
"8,-1:6,458:6,-1,73,458,-1,282,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:6,458:6,-1,73,458,-1,458:3,283,458:12,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:5,284,458:10,-1,458:16,-1,458" +
",78,458,83,-1:4,458,-1:7,458,-1:6,458:2,349,458:3,-1,73,458,-1,458:16,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:15,314," +
"-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:4,352,458,-1,73,458,-" +
"1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458," +
"-1,458:13,427,458:2,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6" +
",-1,73,458,-1,458:15,428,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6," +
"458:6,-1,73,458,-1,458:10,353,458:5,-1,458:16,-1,458,78,458,83,-1:4,458,-1:" +
"7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,458:4,423,458:11,-1,458,78,458,83,-" +
"1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:9,356,458:6,-1,458:16,-1,458,7" +
"8,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,301,458:4,-1,458:" +
"16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:5,286,458" +
":10,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,45" +
"8:11,357,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,7" +
"3,458,-1,458:3,358,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",429,458:5,-1,73,458,-1,458:3,446,458:12,-1,458:16,-1,458,78,458,83,-1:4,45" +
"8,-1:7,458,-1:6,458:5,363,-1,73,319,-1,458:16,-1,458:16,-1,458,78,458,83,-1" +
":4,458,-1:7,458,-1:6,458:5,287,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458," +
"83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:5,364,458:10,-1,458:16,-1," +
"458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:8,365,458:7,-1," +
"458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458,366,458:4,-1,73,458,-1,4" +
"58:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1," +
"458:14,314,458,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,7" +
"3,458,-1,367,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2" +
",314,458:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458" +
",-1:6,458:5,368,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:" +
"7,458,-1:6,458:6,-1,73,458,-1,458:3,314,458:12,-1,458:16,-1,458,78,458,83,-" +
"1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,314,458:4,-1,458:16,-1,458," +
"78,458,83,-1:4,458,-1:7,458,-1:6,458:3,430,458:2,-1,73,458,-1,458:16,-1,458" +
":16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,45" +
"8:4,455,458:11,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,288,458:2,-1,7" +
"3,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1," +
"73,458,-1,458:7,301,458:8,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:6,-1,73,458,-1,458:9,431,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:" +
"7,458,-1:6,458:5,289,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,45" +
"8,-1:7,458,-1:6,458:3,290,458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458" +
",83,-1:4,458,-1:7,458,-1:6,458:2,373,458:3,-1,73,458,-1,458:16,-1,458:16,-1" +
",458,78,458,83,-1:4,458,-1:7,458,-1:6,458:4,376,458,-1,73,458,-1,458:16,-1," +
"458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,291,458:2,-1,73,458,-1" +
",458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,292,-1,73,4" +
"58,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,301,45" +
"8:3,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,4" +
"58:6,-1,73,458,-1,458,377,458:14,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,4" +
"58,-1:6,458:6,-1,73,458,-1,458:11,369,458:4,-1,458:16,-1,458,78,458,83,-1:4" +
",458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,378,458:12,-1,458:16,-1,458,78," +
"458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,458:5,379,458,37" +
"9,458:8,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-" +
"1,458:9,432,458:6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,380,458:5,-1,73,4" +
"58,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73," +
"458,-1,458:3,301,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,4" +
"58:6,-1,73,458,-1,458:9,301,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7," +
"458,-1:6,458:6,-1,73,458,-1,458:12,384,458:3,-1,458:16,-1,458,78,458,83,-1:" +
"4,458,-1:7,458,-1:6,458:5,385,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,8" +
"3,-1:4,458,-1:7,458,-1:6,458:6,-1,73,386,-1,458:16,-1,458:16,-1,458,78,458," +
"83,-1:4,458,-1:7,458,-1:6,458:5,314,-1,73,458,-1,458:16,-1,458:16,-1,458,78" +
",458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,458:6,387,458:9" +
",-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,301,458:14," +
"-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16" +
",-1,458:9,390,458:6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,293,458:3" +
",-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:" +
"5,301,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:6,-1,73,458,-1,458:11,391,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:6,458:3,392,458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,393,458:14,-1,458:16,-1,458,7" +
"8,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,433,458:12,-1,458:" +
"16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:2,394,458" +
":13,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,395,-1,73,458,-" +
"1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,319," +
"-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,434,458:3" +
",-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:" +
"3,351,458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,45" +
"8,-1:6,458:3,397,458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,398,458:12,-1,458:16,-1,458,78,4" +
"58,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,400,458:4,-1,458:16," +
"-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:4,401,458,-1,73,458,-1,458:16,-" +
"1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,402,458:3,-1,73,458," +
"-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458" +
",-1,380,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,403," +
"458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6" +
",458:5,404,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458" +
",-1:6,458:6,-1,73,458,-1,458:11,405,458:4,-1,458:16,-1,458,78,458,83,-1:4,4" +
"58,-1:7,458,-1:6,458,351,458:4,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458," +
"83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,458:9,406,458:6,-1,4" +
"58,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,407,-1,73,458,-1,458:16,-1,458:16" +
",-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,408,458:1" +
"2,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,409,458:3,-1,73,4" +
"58,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73," +
"458,-1,458,298,458:3,299,458:10,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,45" +
"8,-1:17,295,-1:55,458:6,-1,73,458,-1,458:5,301,458:10,-1,458:16,-1,458,78,4" +
"58,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,442,458:14,-1,458:16,-1" +
",458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,441,458:3,-1,73,458,-1,458:16,-" +
"1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,420,-1,73,458,-1,458" +
":16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,45" +
"8:9,336,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73" +
",458,-1,458:12,453,458:3,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6," +
"347,458:5,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458," +
"-1:6,458,350,458:4,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458," +
"-1:7,458,-1:6,458:3,345,458:2,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,8" +
"3,-1:4,458,-1:7,458,-1:6,458:5,348,-1,73,458,-1,458:16,-1,458:16,-1,458,78," +
"458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:9,372,458:6,-1,458:16," +
"-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,360,458:4" +
",-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3" +
",359,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,4" +
"58,-1,458:5,447,458:10,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,45" +
"8:6,-1,73,458,-1,369,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1" +
":6,458:5,371,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,4" +
"58,-1:6,458:6,-1,73,458,-1,458:9,374,458:6,-1,458:16,-1,458,78,458,83,-1:4," +
"458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,381,458:14,-1,458:16,-1,458,78,458" +
",83,-1:4,458,-1:7,458,-1:6,383,458:5,-1,73,458,-1,458:16,-1,458:16,-1,458,7" +
"8,458,83,-1:4,458,-1:7,458,-1:6,458:5,388,-1,73,458,-1,458:16,-1,458:16,-1," +
"458,78,458,83,-1:4,458,-1:7,458,-1:6,458:2,396,458:3,-1,73,458,-1,458:16,-1" +
",458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:3,399,458:2,-1,73,458,-" +
"1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458," +
"-1,458:2,300,458:13,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6" +
",-1,73,458,-1,458:11,329,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458" +
",-1:6,458:6,-1,73,458,-1,458:5,422,458:10,-1,458:16,-1,458,78,458,83,-1:4,4" +
"58,-1:7,458,-1:6,458:6,-1,73,458,-1,458,332,458:14,-1,458:16,-1,458,78,458," +
"83,-1:4,458,-1:7,458,-1:6,458:2,337,458:3,-1,73,458,-1,458:16,-1,458:16,-1," +
"458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,342,-1,73,458,-1,458:16,-1,458:1" +
"6,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,354,458:5,-1,73,458,-1,458:16,-1," +
"458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,454,-1,73,458,-1,458:1" +
"6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:" +
"11,361,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73," +
"458,-1,458:3,362,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,4" +
"58:6,-1,73,458,-1,375,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-" +
"1:6,458:6,-1,73,458,-1,458:9,448,458:6,-1,458:16,-1,458,78,458,83,-1:4,458," +
"-1:7,458,-1:6,458:5,389,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4" +
",458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,330,458:4,-1,458:16,-1,458,78," +
"458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,335,458:14,-1,458:16,-" +
"1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,424,-1,73,458,-1,458:16,-1,458" +
":16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,355,458:5,-1,73,458,-1,458:16,-" +
"1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:3,3" +
"70,458:12,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458" +
",-1,458:9,382,458:6,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6" +
",-1,73,458,-1,412,458:15,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6," +
"458:6,-1,73,458,-1,458:11,480,458:4,-1,458:16,-1,458,78,458,83,-1:4,458,-1:" +
"7,458,-1:6,458:3,305,458:2,-1,73,458,-1,458:5,413,458,306,458:8,-1,458:16,-" +
"1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458,308,458:14,-1" +
",458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:5,309,-1,73,458,-1,458:" +
"16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,310,458:5,-1,73,458,-1" +
",458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,436,458:4,450,-1," +
"73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1" +
",73,458,-1,458:5,437,458:6,311,458:3,-1,458:16,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:6,458:6,-1,73,458,-1,458:11,416,458:4,-1,458:16,-1,458,78,458,83," +
"-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:16,-1,458:6,414,458:9,-1,458," +
"78,458,83,-1:4,458,-1:7,458,-1:6,438,458:5,-1,73,458,-1,458:16,-1,458:6,414" +
",458:9,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,312,458:1" +
"5,-1,458:5,313,458:10,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,451,458:5,-1," +
"73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1" +
",73,458,-1,458:16,-1,458:4,417,458:6,415,458:4,-1,458,78,458,83,-1:4,458,-1" +
":7,458,-1:6,458,439,458:4,-1,73,458,-1,458,315,458:14,-1,458:16,-1,458,78,4" +
"58,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:11,457,458:4,-1,458:16," +
"-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,418,458:15,-1,45" +
"8:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,316,458:15," +
"-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,317,-1,458:16" +
",-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:6,458:6,-1,73,458,-1,458:1" +
"3,318,458:2,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1:16,411,-1:56,45" +
"8:5,426,-1,73,458,-1,458:16,-1,458:16,-1,458,78,458,83,-1:4,458,-1:7,458,-1" +
":7,479,-1:74,481,-1:52");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

//Add code to be executed when the end of the file is reached
	return (new Symbol(sym.EOF,""));
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						{
}
					case -2:
						break;
					case 2:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -3:
						break;
					case 3:
						{
}
					case -4:
						break;
					case 4:
						{ 
	return (new Symbol(sym.OPTION_A,yytext()));
}
					case -5:
						break;
					case 5:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -6:
						break;
					case 6:
						{ 
	return (new Symbol(sym.OPTION_T,yytext()));
}
					case -7:
						break;
					case 7:
						{ 
	return (new Symbol(sym.BANG,yytext()));
}
					case -8:
						break;
					case 8:
						{ 
	return (new Symbol(sym.DOT,yytext()));
}
					case -9:
						break;
					case 9:
						{ 
	return (new Symbol(sym.OPTION_N,yytext()));
}
					case -10:
						break;
					case 10:
						{ 
	return (new Symbol(sym.OPTION_B,yytext()));
}
					case -11:
						break;
					case 11:
						{ 
	return (new Symbol(sym.QUESTION_MARK,yytext()));
}
					case -12:
						break;
					case 12:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -13:
						break;
					case 13:
						{ 
	return (new Symbol(sym.UNDERSCORE,yytext()));
}
					case -14:
						break;
					case 14:
						{ 
	return (new Symbol(sym.NOT,yytext()));
}
					case -15:
						break;
					case 15:
						{ 
	return (new Symbol(sym.COMMA,yytext()));
}
					case -16:
						break;
					case 16:
						{ 
	return (new Symbol(sym.COLON,yytext()));
}
					case -17:
						break;
					case 17:
						{ 
	return (new Symbol(sym.OPEN_PARAN,yytext()));
}
					case -18:
						break;
					case 18:
						{ 
	return (new Symbol(sym.CLOSE_PARAN,yytext()));
}
					case -19:
						break;
					case 19:
						{ 
	return (new Symbol(sym.OPEN_CURLY,yytext()));
}
					case -20:
						break;
					case 20:
						{ 
	return (new Symbol(sym.CLOSE_CURLY,yytext()));
}
					case -21:
						break;
					case 21:
						
					case -22:
						break;
					case 22:
						{ 
	return (new Symbol(sym.OPTION_AV,yytext()));
}
					case -23:
						break;
					case 23:
						{ 
	return (new Symbol(sym.OPTION_BV,yytext()));
}
					case -24:
						break;
					case 24:
						{ 
	return (new Symbol(sym.STRING_LIT,yytext()));
}
					case -25:
						break;
					case 25:
						{ 
	return (new Symbol(sym.IMPLICATION,yytext()));
}
					case -26:
						break;
					case 26:
						{ 
	return (new Symbol(sym.ASK,yytext()));
}
					case -27:
						break;
					case 27:
						{ 
	return (new Symbol(sym.OR_ENTAILMENT,yytext()));
}
					case -28:
						break;
					case 28:
						{ 
	return (new Symbol(sym.NUMERICAL_ENTAILMENT,yytext()));
}
					case -29:
						break;
					case 29:
						{ 
	return (new Symbol(sym.EQUALITY,yytext()));
}
					case -30:
						break;
					case 30:
						{ 
	return (new Symbol(sym.AND_ENTAILMENT,yytext()));
}
					case -31:
						break;
					case 31:
						{ 
	return (new Symbol(sym.AUTO,yytext()));
}
					case -32:
						break;
					case 32:
						{ 
	return (new Symbol(sym.DEMO,yytext()));
}
					case -33:
						break;
					case 33:
						{ 
	return (new Symbol(sym.SHOW,yytext()));
}
					case -34:
						break;
					case 34:
						{ 
	return (new Symbol(sym.LOAD,yytext()));
}
					case -35:
						break;
					case 35:
						{ 
	return (new Symbol(sym.ASKWH,yytext()));
}
					case -36:
						break;
					case 36:
						{ 
	return (new Symbol(sym.TRACE,yytext()));
}
					case -37:
						break;
					case 37:
						{ 
	return (new Symbol(sym.ACTING,yytext()));
}
					case -38:
						break;
					case 38:
						{ 
	return (new Symbol(sym.EXPERT,yytext()));
}
					case -39:
						break;
					case 39:
						{ 
	return (new Symbol(sym.NORMAL,yytext()));
}
					case -40:
						break;
					case 40:
						{ 
	return (new Symbol(sym.MANUAL,yytext()));
}
					case -41:
						break;
					case 41:
						{ 
	return (new Symbol(sym.SNEPSPATH,yytext()));
}
					case -42:
						break;
					case 42:
						{ 
	return (new Symbol(sym.CLEARKB,yytext()));
}
					case -43:
						break;
					case 43:
						{ 
	return (new Symbol(sym.BR_MODE,yytext()));
}
					case -44:
						break;
					case 44:
						{ 
	return (new Symbol(sym.UNTRACE,yytext()));
}
					case -45:
						break;
					case 45:
						{ 
	return (new Symbol(sym.PARSING,yytext()));
}
					case -46:
						break;
					case 46:
						{ 
	return (new Symbol(sym.PERFORM,yytext()));
}
					case -47:
						break;
					case 47:
						{ 
	return (new Symbol(sym.ACTIVATE,yytext()));
}
					case -48:
						break;
					case 48:
						{ 
	return (new Symbol(sym.ASKIFNOT,yytext()));
}
					case -49:
						break;
					case 49:
						{ 
	return (new Symbol(sym.ASKWHNOT,yytext()));
}
					case -50:
						break;
					case 50:
						{ 
	return (new Symbol(sym.COPYRIGHT,yytext()));
}
					case -51:
						break;
					case 51:
						{ 
	return (new Symbol(sym.INFERENCE,yytext()));
}
					case -52:
						break;
					case 52:
						{ 
	return (new Symbol(sym.UNLABELED,yytext()));
}
					case -53:
						break;
					case 53:
						{ 
	return (new Symbol(sym.FILEPATH,yytext()));
}
					case -54:
						break;
					case 54:
						{ 
	return (new Symbol(sym.SET_MODE_1,yytext()));
}
					case -55:
						break;
					case 55:
						{ 
	return (new Symbol(sym.SET_MODE_2,yytext()));
}
					case -56:
						break;
					case 56:
						{ 
	return (new Symbol(sym.SET_MODE_3,yytext()));
}
					case -57:
						break;
					case 57:
						{ 
	return (new Symbol(sym.LIST_TERMS,yytext()));
}
					case -58:
						break;
					case 58:
						{ 
	return (new Symbol(sym.CLEAR_INFER,yytext()));
}
					case -59:
						break;
					case 59:
						{ 
	return (new Symbol(sym.TRANSLATION,yytext()));
}
					case -60:
						break;
					case 60:
						{ 
	return (new Symbol(sym.DEFINE_PATH,yytext()));
}
					case -61:
						break;
					case 61:
						{ 
	return (new Symbol(sym.SET_CONTEXT,yytext()));
}
					case -62:
						break;
					case 62:
						{ 
	return (new Symbol(sym.DEFINE_FRAME,yytext()));
}
					case -63:
						break;
					case 63:
						{ 
	return (new Symbol(sym.BELIEFS_ABOUT,yytext()));
}
					case -64:
						break;
					case 64:
						{ 
	return (new Symbol(sym.LIST_CONTEXTS,yytext()));
}
					case -65:
						break;
					case 65:
						{ 
	return (new Symbol(sym.UNDEFINE_PATH,yytext()));
}
					case -66:
						break;
					case 66:
						{ 
	return (new Symbol(sym.ADD_TO_CONTEXT,yytext()));
}
					case -67:
						break;
					case 67:
						{ 
	return (new Symbol(sym.DESCRIBE_TERMS,yytext()));
}
					case -68:
						break;
					case 68:
						{ 
	return (new Symbol(sym.DEFINE_SEMANTIC,yytext()));
}
					case -69:
						break;
					case 69:
						{ 
	return (new Symbol(sym.DESCRIBE_CONTEXT,yytext()));
}
					case -70:
						break;
					case 70:
						{ 
	return (new Symbol(sym.LIST_ASSERTED_WFFS,yytext()));
}
					case -71:
						break;
					case 71:
						{ 
	return (new Symbol(sym.SET_DEFAULT_CONTEXT,yytext()));
}
					case -72:
						break;
					case 72:
						{ 
	return (new Symbol(sym.REMOVE_FROM_CONTEXT,yytext()));
}
					case -73:
						break;
					case 74:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -74:
						break;
					case 75:
						{
}
					case -75:
						break;
					case 76:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -76:
						break;
					case 77:
						{ 
	return (new Symbol(sym.INT_LIT,yytext()));
}
					case -77:
						break;
					case 79:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -78:
						break;
					case 80:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -79:
						break;
					case 82:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -80:
						break;
					case 83:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -81:
						break;
					case 85:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -82:
						break;
					case 86:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -83:
						break;
					case 88:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -84:
						break;
					case 90:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -85:
						break;
					case 92:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -86:
						break;
					case 94:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -87:
						break;
					case 96:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -88:
						break;
					case 98:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -89:
						break;
					case 100:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -90:
						break;
					case 102:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -91:
						break;
					case 104:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -92:
						break;
					case 106:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -93:
						break;
					case 108:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -94:
						break;
					case 110:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -95:
						break;
					case 112:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -96:
						break;
					case 114:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -97:
						break;
					case 116:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -98:
						break;
					case 118:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -99:
						break;
					case 120:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -100:
						break;
					case 122:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -101:
						break;
					case 124:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -102:
						break;
					case 126:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -103:
						break;
					case 128:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -104:
						break;
					case 130:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -105:
						break;
					case 132:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -106:
						break;
					case 198:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -107:
						break;
					case 199:
						{
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
					case -108:
						break;
					case 200:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -109:
						break;
					case 224:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -110:
						break;
					case 225:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -111:
						break;
					case 230:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -112:
						break;
					case 231:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -113:
						break;
					case 234:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -114:
						break;
					case 235:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -115:
						break;
					case 236:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -116:
						break;
					case 237:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -117:
						break;
					case 238:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -118:
						break;
					case 239:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -119:
						break;
					case 240:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -120:
						break;
					case 241:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -121:
						break;
					case 242:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -122:
						break;
					case 243:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -123:
						break;
					case 244:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -124:
						break;
					case 245:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -125:
						break;
					case 246:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -126:
						break;
					case 247:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -127:
						break;
					case 248:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -128:
						break;
					case 249:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -129:
						break;
					case 250:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -130:
						break;
					case 251:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -131:
						break;
					case 252:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -132:
						break;
					case 253:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -133:
						break;
					case 254:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -134:
						break;
					case 255:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -135:
						break;
					case 256:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -136:
						break;
					case 257:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -137:
						break;
					case 258:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -138:
						break;
					case 259:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -139:
						break;
					case 260:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -140:
						break;
					case 261:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -141:
						break;
					case 262:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -142:
						break;
					case 263:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -143:
						break;
					case 264:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -144:
						break;
					case 265:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -145:
						break;
					case 270:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -146:
						break;
					case 271:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -147:
						break;
					case 272:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -148:
						break;
					case 273:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -149:
						break;
					case 274:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -150:
						break;
					case 275:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -151:
						break;
					case 276:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -152:
						break;
					case 277:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -153:
						break;
					case 278:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -154:
						break;
					case 279:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -155:
						break;
					case 280:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -156:
						break;
					case 281:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -157:
						break;
					case 282:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -158:
						break;
					case 283:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -159:
						break;
					case 284:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -160:
						break;
					case 285:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -161:
						break;
					case 286:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -162:
						break;
					case 287:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -163:
						break;
					case 288:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -164:
						break;
					case 289:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -165:
						break;
					case 290:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -166:
						break;
					case 291:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -167:
						break;
					case 292:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -168:
						break;
					case 293:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -169:
						break;
					case 294:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -170:
						break;
					case 296:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -171:
						break;
					case 297:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -172:
						break;
					case 298:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -173:
						break;
					case 299:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -174:
						break;
					case 300:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -175:
						break;
					case 301:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -176:
						break;
					case 302:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -177:
						break;
					case 303:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -178:
						break;
					case 304:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -179:
						break;
					case 305:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -180:
						break;
					case 306:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -181:
						break;
					case 307:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -182:
						break;
					case 308:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -183:
						break;
					case 309:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -184:
						break;
					case 310:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -185:
						break;
					case 311:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -186:
						break;
					case 312:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -187:
						break;
					case 313:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -188:
						break;
					case 314:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -189:
						break;
					case 315:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -190:
						break;
					case 316:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -191:
						break;
					case 317:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -192:
						break;
					case 318:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -193:
						break;
					case 319:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -194:
						break;
					case 320:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -195:
						break;
					case 321:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -196:
						break;
					case 322:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -197:
						break;
					case 323:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -198:
						break;
					case 324:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -199:
						break;
					case 325:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -200:
						break;
					case 326:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -201:
						break;
					case 327:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -202:
						break;
					case 328:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -203:
						break;
					case 329:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -204:
						break;
					case 330:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -205:
						break;
					case 331:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -206:
						break;
					case 332:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -207:
						break;
					case 333:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -208:
						break;
					case 334:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -209:
						break;
					case 335:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -210:
						break;
					case 336:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -211:
						break;
					case 337:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -212:
						break;
					case 338:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -213:
						break;
					case 339:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -214:
						break;
					case 340:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -215:
						break;
					case 341:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -216:
						break;
					case 342:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -217:
						break;
					case 343:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -218:
						break;
					case 344:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -219:
						break;
					case 345:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -220:
						break;
					case 346:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -221:
						break;
					case 347:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -222:
						break;
					case 348:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -223:
						break;
					case 349:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -224:
						break;
					case 350:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -225:
						break;
					case 351:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -226:
						break;
					case 352:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -227:
						break;
					case 353:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -228:
						break;
					case 354:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -229:
						break;
					case 355:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -230:
						break;
					case 356:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -231:
						break;
					case 357:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -232:
						break;
					case 358:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -233:
						break;
					case 359:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -234:
						break;
					case 360:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -235:
						break;
					case 361:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -236:
						break;
					case 362:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -237:
						break;
					case 363:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -238:
						break;
					case 364:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -239:
						break;
					case 365:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -240:
						break;
					case 366:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -241:
						break;
					case 367:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -242:
						break;
					case 368:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -243:
						break;
					case 369:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -244:
						break;
					case 370:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -245:
						break;
					case 371:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -246:
						break;
					case 372:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -247:
						break;
					case 373:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -248:
						break;
					case 374:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -249:
						break;
					case 375:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -250:
						break;
					case 376:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -251:
						break;
					case 377:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -252:
						break;
					case 378:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -253:
						break;
					case 379:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -254:
						break;
					case 380:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -255:
						break;
					case 381:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -256:
						break;
					case 382:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -257:
						break;
					case 383:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -258:
						break;
					case 384:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -259:
						break;
					case 385:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -260:
						break;
					case 386:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -261:
						break;
					case 387:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -262:
						break;
					case 388:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -263:
						break;
					case 389:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -264:
						break;
					case 390:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -265:
						break;
					case 391:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -266:
						break;
					case 392:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -267:
						break;
					case 393:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -268:
						break;
					case 394:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -269:
						break;
					case 395:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -270:
						break;
					case 396:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -271:
						break;
					case 397:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -272:
						break;
					case 398:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -273:
						break;
					case 399:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -274:
						break;
					case 400:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -275:
						break;
					case 401:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -276:
						break;
					case 402:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -277:
						break;
					case 403:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -278:
						break;
					case 404:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -279:
						break;
					case 405:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -280:
						break;
					case 406:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -281:
						break;
					case 407:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -282:
						break;
					case 408:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -283:
						break;
					case 409:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -284:
						break;
					case 410:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -285:
						break;
					case 412:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -286:
						break;
					case 413:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -287:
						break;
					case 414:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -288:
						break;
					case 415:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -289:
						break;
					case 416:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -290:
						break;
					case 417:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -291:
						break;
					case 418:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -292:
						break;
					case 419:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -293:
						break;
					case 420:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -294:
						break;
					case 421:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -295:
						break;
					case 422:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -296:
						break;
					case 423:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -297:
						break;
					case 424:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -298:
						break;
					case 425:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -299:
						break;
					case 426:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -300:
						break;
					case 427:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -301:
						break;
					case 428:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -302:
						break;
					case 429:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -303:
						break;
					case 430:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -304:
						break;
					case 431:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -305:
						break;
					case 432:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -306:
						break;
					case 433:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -307:
						break;
					case 434:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -308:
						break;
					case 435:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -309:
						break;
					case 436:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -310:
						break;
					case 437:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -311:
						break;
					case 438:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -312:
						break;
					case 439:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -313:
						break;
					case 440:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -314:
						break;
					case 441:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -315:
						break;
					case 442:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -316:
						break;
					case 443:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -317:
						break;
					case 444:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -318:
						break;
					case 445:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -319:
						break;
					case 446:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -320:
						break;
					case 447:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -321:
						break;
					case 448:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -322:
						break;
					case 449:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -323:
						break;
					case 450:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -324:
						break;
					case 451:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -325:
						break;
					case 452:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -326:
						break;
					case 453:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -327:
						break;
					case 454:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -328:
						break;
					case 455:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -329:
						break;
					case 456:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -330:
						break;
					case 457:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -331:
						break;
					case 458:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -332:
						break;
					case 459:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -333:
						break;
					case 460:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -334:
						break;
					case 461:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -335:
						break;
					case 462:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -336:
						break;
					case 463:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -337:
						break;
					case 464:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -338:
						break;
					case 465:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -339:
						break;
					case 466:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -340:
						break;
					case 467:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -341:
						break;
					case 468:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -342:
						break;
					case 469:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -343:
						break;
					case 470:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -344:
						break;
					case 471:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -345:
						break;
					case 472:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -346:
						break;
					case 473:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -347:
						break;
					case 474:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -348:
						break;
					case 475:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -349:
						break;
					case 476:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -350:
						break;
					case 477:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -351:
						break;
					case 478:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -352:
						break;
					case 480:
						{ 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
					case -353:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
