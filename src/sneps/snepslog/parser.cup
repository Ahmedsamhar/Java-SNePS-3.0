package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;

import java.util.ArrayList;
import javafx.util.Pair;

import sneps.network.Node;


parser code {:
String command;
:};
	
/* Terminals (tokens returned by the scanner). */

terminal ACTIVATE,
         BANG,
         DOT,
         ADD_TO_CONTEXT,
         ASK,
         ASKIFNOT,
         ASKWH,
         ASKWHNOT,
         BELIEFS_ABOUT,
         BR_MODE,
         AUTO,
         MANUAL,
         CLEAR_INFER,
         CLEARKB,
         COPYRIGHT,
         DEFINE_FRAME,
         DEFINE_PATH,
         DEFINE_SEMANTIC,
         DEMO,
         QUESTION_MARK,
         OPTION_T,
         OPTION_B,
         OPTION_BV,
         OPTION_A,
         OPTION_AV,
         OPTION_N,
         DESCRIBE_CONTEXT,
         DESCRIBE_TERMS,
         EXPERT,
         LIST_ASSERTED_WFFS,
         LIST_CONTEXTS,
         LIST_TERMS,
         LOAD,
         NORMAL,
         PERFORM,
         REMOVE_FROM_CONTEXT,
         SET_CONTEXT,
         SET_DEFAULT_CONTEXT,
         SET_MODE_1,
         SET_MODE_2,
         SET_MODE_3,
         SHOW,
         TRACE,
         UNDEFINE_PATH,
         UNLABELED,
         UNTRACE,
         INFERENCE,
         ACTING,
         PARSING,
         TRANSLATION,
         EQUALITY,
         IMPLICATION,
         OR_ENTAILMENT,
         AND_ENTAILMENT,
         NOT,
         ANDOR,
         AND,
         OR,
         NAND,
         NOR,
         XOR,
         IFF,
         THRESH,
         ALL,
         COMMA,
         COLON,
         OPEN_PARAN,
         CLOSE_PARAN,
         OPEN_CURLY,
         CLOSE_CURLY,
         WITHSOME,
         WITHALL,
         WFF,
         IFDO,
         WHENDO,
         WHENEVERDO,
         ACTPLAN,
         EFFECT,
         GOALPLAN,
         PRECONDITION;

terminal String SNEPSPATH,
         	    FILEPATH,
                STRING_LIT,
                INT_LIT,
                IDENTIFIER,
                NUMERICAL_ENTAILMENT;

/* Non-terminals */

nonterminal String command,
                   wffNameCommand,
                   wffCommand,
                   snepslogCommand,
                   optionalSnepslogFunction,
                   terminalPunctuation,
                   optionalDot,
                   optionalTerminalPunctuation,
                   identifiers,
                   identifiers_list,
                   demoFirstOptionalOptionSet,
                   demoSecondOptionalOptionSet,
                   andOrEquality,
                   wffName;
                               
nonterminal Node wff,
                 infixedTerm,
                 entailment,
                 prefixedTerm,
                 negatedTerm, 
                 andorTerm, 
                 setTerm, 
                 threshTerm, 
                 allTerm, 
                 atomicTerm,
                 withsomeTerm,
                 withallTerm,
                 ifdoTerm,
                 whendoTerm,
                 wheneverdoTerm,
                 actplanTerm,
                 effectTerm,
                 goalplanTerm,
                 preconditionTerm,
                 snepslogSymbol,
                 optionalSnepslogSymbol,
                 qvar;

nonterminal ArrayList<Pair<String, Node>> infixedTerms;

nonterminal ArrayList<Node> pTermSet,
                            termSet,
                            termSequence,
                            prefixedTerms, 
                            symbolSequence,
                            snepslogSymbols,
                            optionalPTermSet;
                             
nonterminal ArrayList<ArrayList<Node>> termSetSequence,
                                       termSets;

/* Precedences */

precedence left COMMA, COLON, BANG, DOT, QUESTION_MARK;

/* The grammar */

command ::= 	wffNameCommand
		{: 

		:}
		| snepslogCommand:sc
		{: 
			RESULT = sc;
		:}
		| wffCommand
		{: 

		:};	

wffNameCommand ::= wffName terminalPunctuation
				{: 
				
				:};
				
wffCommand ::= wff terminalPunctuation
		   {: 
				
		   :};	
				
snepslogCommand ::= ACTIVATE wff optionalDot
				{: 
					RESULT = "This functionality is still under development.";
				:}
				| ACTIVATE BANG wff optionalTerminalPunctuation
				{: 
                		RESULT = "This functionality is still under development.";
				:}
				| ADD_TO_CONTEXT snepslogSymbol termSet optionalDot
				{: 

				:}
				| ASK wff optionalTerminalPunctuation
				{: 

				:}
				| ASKIFNOT wff optionalTerminalPunctuation
				{: 

				:}
				| ASKWH wff optionalTerminalPunctuation
				{: 

				:}
				| ASKWHNOT wff optionalTerminalPunctuation
				{: 

				:}
				| BELIEFS_ABOUT pTermSet optionalDot
				{: 

				:}
				| BR_MODE optionalDot
				{: 

				:}
				| BR_MODE AUTO optionalDot
				{: 

				:}
				| BR_MODE MANUAL optionalDot
				{: 

				:}
				| CLEAR_INFER optionalDot
				{: 
					RESULT = "This functionality is still under development.";
				:}
				| CLEARKB optionalDot
				{: 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				:}
				| COPYRIGHT optionalDot
				{: 
					RESULT = "copyright statement goes here.";
				:}
				| DEFINE_FRAME IDENTIFIER snepslogSymbol identifiers_list optionalDot
				{: 

				:}
				| DEFINE_FRAME IDENTIFIER snepslogSymbol identifiers_list STRING_LIT optionalDot
				{: 

				:}
				| DEFINE_PATH IDENTIFIER SNEPSPATH optionalDot
				{: 

				:}
				| DEFINE_SEMANTIC IDENTIFIER
				{: 

				:}
				| DEFINE_SEMANTIC IDENTIFIER IDENTIFIER
				{: 

				:}
				| DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list
				{: 

				:}
				| DEMO demoFirstOptionalOptionSet demoSecondOptionalOptionSet optionalDot
				{: 

				:}
				| DESCRIBE_CONTEXT optionalSnepslogSymbol optionalDot
				{: 

				:}
				| DESCRIBE_TERMS optionalPTermSet optionalDot
				{: 

				:}
				| EXPERT optionalDot
				{: 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				:}
				| LIST_ASSERTED_WFFS optionalSnepslogSymbol optionalDot
				{: 

				:}
				| LIST_CONTEXTS optionalDot
				{: 

				:}
				| LIST_TERMS optionalPTermSet optionalDot
				{: 

				:}
				| LOAD FILEPATH optionalDot
				{: 

				:}
				| NORMAL optionalDot
				{: 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				:}
				| PERFORM atomicTerm optionalDot
				{: 

				:}
				| REMOVE_FROM_CONTEXT snepslogSymbol pTermSet
				{: 

				:}
				| SET_CONTEXT snepslogSymbol optionalPTermSet
				{: 

				:}
				| SET_DEFAULT_CONTEXT snepslogSymbol
				{: 

				:}
				| SET_MODE_1 optionalDot
				{: 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				:}
				| SET_MODE_2 optionalDot
				{: 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				:}
				| SET_MODE_3 optionalDot
				{: 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				:}
				| SHOW optionalPTermSet optionalDot
				{: 

				:}
				| TRACE optionalSnepslogFunction optionalDot
				{: 

				:}
				| UNDEFINE_PATH IDENTIFIER optionalDot
				{: 

				:}
				| UNLABELED optionalDot
				{: 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				:}
				| UNTRACE optionalSnepslogFunction optionalDot
				{: 

				:};	

optionalSnepslogFunction ::=	 INFERENCE
		     	{:
			
		     	:}
		      	| ACTING
		     	{:
			
		     	:}
		     	| TRANSLATION
		     	{:
			
		     	:}
		     	| PARSING
		     	{:
			
		     	:}
		     	|
		     	{:
		     	
		     	:};	
				
wff ::= infixedTerm
    {:
    
    :}
    | entailment
    {:
    
    :}
    | prefixedTerm
    {:
    
    :};				

infixedTerm ::= prefixedTerm infixedTerms
            {:
    
            :};

infixedTerms ::= andOrEquality prefixedTerm infixedTerms
                   {:
              
                   :}
                   | andOrEquality prefixedTerm
                   {:
                   
                   :};

andOrEquality ::= AND
                   {:
             
                   :}
                   | OR
                   {:
             
                   :}
                   | EQUALITY
                   {:
             
                   :};

entailment ::= termSet IMPLICATION termSet
           {:
    
           :}
           | termSet OR_ENTAILMENT termSet
           {:
           
           :}
           | termSet AND_ENTAILMENT termSet
           {:
           
           :}
           | termSet NUMERICAL_ENTAILMENT termSet
           {:
           
           :};
		
pTermSet ::= termSet
         {:
    
         :};		

termSet ::=	prefixedTerm
		{:
			
		:}
		| OPEN_CURLY termSequence CLOSE_CURLY
		{:
			
		:};
		
termSequence ::= prefixedTerm prefixedTerms
             {:
             
             :};
	     	
prefixedTerms ::= COMMA prefixedTerm prefixedTerms
			  {:
			
			  :}
			  | 
			  {:
			
		      :};
		     
prefixedTerm ::= negatedTerm
			 {:
			
			 :}
			 | andorTerm
			 {:
			
		     :}
		     | setTerm
			 {:
			
		     :}
		     | threshTerm
			 {:
			
		     :}
		     | allTerm
			 {:
			
		     :}
		     | atomicTerm
			 {:
			
		     :}
		     | ifdoTerm
			 {:
			
		     :}
		     | whendoTerm
			 {:
			
		     :}
		     | wheneverdoTerm
			 {:
			
		     :}
		     | actplanTerm
			 {:
			
		     :}
		     | effectTerm
			 {:
			
		     :}
		     | goalplanTerm
			 {:
			
		     :}
		     | preconditionTerm
			 {:
			
		     :};
		     
negatedTerm ::= NOT atomicTerm
		    {:
			
			:};
			
andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet
		  {:
			
		  :};
	
setTerm ::= AND termSet
        {:
             
        :}
        | OR termSet
        {:
             
        :}
        | NAND termSet
        {:
             
        :}
        | NOR termSet
        {:
             
        :}
        | XOR termSet
        {:
             
        :}
        | IFF termSet
        {:
             
        :};

threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet
           {:
             
           :}
           | THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet
           {:
             
           :};

allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN
		{:
			
		:};

atomicTerm ::= wffName
           {:
           
           :}
           | qvar
           {:
           
           :}
           | IDENTIFIER
           {:
           
           :}
           | IDENTIFIER COLON IDENTIFIER
           {:
           
           :}
           | withsomeTerm
           {:
           
           :}
           | withallTerm
           {:
           
           :}
           | qvar OPEN_PARAN termSetSequence CLOSE_PARAN
           {:
           
           :}
           | snepslogSymbol OPEN_PARAN termSetSequence CLOSE_PARAN
           {:
           
           :}
           | OPEN_PARAN wff CLOSE_PARAN
           {:
           
           :};

withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN
             {:
             
             :}
             | WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN
             {:
             
             :};
             
withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN
             {:
             
             :}
             | WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN
             {:
             
             :};

ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN
         {:
			
		 :};
		 
whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN
           {:
			
		   :};
		   
wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN
               {:
			
		       :};
		   
actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN
            {:
			
		    :};
		       
effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN
           {:
			
	       :};
		       
goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN
             {:
			
		     :};		     

preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN
                 {:
			
		         :};
		         
termSetSequence ::= termSet termSets
                {:
			
		        :};

termSets ::= COMMA termSet termSets
	     {:
			
	     :}
	     | 
		 {:
			
		 :};
		 
symbolSequence ::= snepslogSymbol snepslogSymbols
               {:
			
		       :};

snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols
	            {:
			
	            :}
	            | 
		        {:
			
		        :};

wffName ::= WFF INT_LIT 
	    {:
			
	    :};
	    
qvar ::= QUESTION_MARK snepslogSymbol
	 {:
			
	 :};

snepslogSymbol ::= wffName
               {:
               
               :}
               | IDENTIFIER
               {:
               
               :};

terminalPunctuation ::= DOT
                    {:
           
                    :}
                    | BANG
                    {:
           
                    :}
                    | QUESTION_MARK QUESTION_MARK
                    {:
           
                    :}
                    | QUESTION_MARK
                    {:
           
                    :}
                    | QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN
                    {:
           
                    :}
                    | QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN
                    {:
           
                    :};
							
optionalDot ::= DOT
			{:
			
			:}
			| 
			{:
			
			:};	
			
optionalTerminalPunctuation ::= terminalPunctuation
							{:
			
							:}
							| 
							{:
			
							:};				

optionalSnepslogSymbol ::= snepslogSymbol
					   {:
			
					   :}
					   | 
					   {:
			
					   :};		
							
optionalPTermSet ::=	 pTermSet
				 {:
			
				 :}
				 | 
				 {:
			
				 :};		

identifiers ::= IDENTIFIER identifiers
            {:
            
            :}
            |
            {:
            
            :};

identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN
                 {:
                 
                 :};

demoFirstOptionalOptionSet ::= FILEPATH
						  {:
						  
						  :}
						  | QUESTION_MARK
				          {:
			
				          :}
				          | INT_LIT
				          {:
			
				          :}
				          |
				          {:
			
				          :};
				          
demoSecondOptionalOptionSet ::= OPTION_T
						  {:
						  
						  :}
						  | OPTION_B
				          {:
			
				          :}
				          | OPTION_BV
				          {:
			
				          :}
				           | OPTION_A
				          {:
			
				          :}
				           | OPTION_AV
				          {:
			
				          :}
				           | OPTION_N
				          {:
			
				          :}
				          |
				          {:
			
				          :};					          	
																																																																																																																																																																