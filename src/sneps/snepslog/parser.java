
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javafx.util.Pair;
import sneps.network.Node;
import sneps.network.paths.Path;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\010\000" +
    "\002\005\006\000\002\005\004\000\002\005\005\000\002" +
    "\005\006\000\002\005\006\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\002\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\050\005\000\002\050\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\051\003\000\002\052\003\000\002\052" +
    "\005\000\002\053\004\000\002\054\005\000\002\054\002" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\004\000\002\027\011\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\031\011\000\002\031" +
    "\007\000\002\032\011\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\006\000\002\033\006\000\002" +
    "\033\005\000\002\034\014\000\002\034\012\000\002\035" +
    "\014\000\002\035\012\000\002\036\010\000\002\037\010" +
    "\000\002\040\010\000\002\041\010\000\002\042\010\000" +
    "\002\043\010\000\002\044\010\000\002\060\004\000\002" +
    "\061\005\000\002\061\002\000\002\055\004\000\002\056" +
    "\005\000\002\056\002\000\002\017\004\000\002\047\004" +
    "\000\002\045\003\000\002\045\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\006\000\002\007\007\000\002\010\003\000\002\010" +
    "\002\000\002\011\003\000\002\011\002\000\002\046\003" +
    "\000\002\046\002\000\002\057\003\000\002\057\002\000" +
    "\002\012\004\000\002\012\002\000\002\013\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\002\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\002\000\002\020\003\000\002\020\003\000\002" +
    "\020\006\000\002\020\006\000\002\020\010\000\002\020" +
    "\010\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\020\013\000\002\020\013\000\002\021" +
    "\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\170\004\124\007\024\010\017\011\057\012" +
    "\014\013\125\014\021\015\033\020\005\021\056\022\121" +
    "\023\102\024\025\025\022\026\077\027\116\036\117\037" +
    "\030\040\044\041\110\042\013\043\051\044\066\045\010" +
    "\046\071\047\045\050\123\051\075\052\065\053\064\054" +
    "\062\055\070\056\012\057\006\060\027\061\007\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\004\106\u0189\001\002" +
    "\000\006\002\uff7d\006\163\001\002\000\004\144\u0186\001" +
    "\002\000\016\002\uffce\006\uffce\062\u017f\063\u017e\064\u017d" +
    "\065\u017c\001\002\000\006\002\uff7d\006\163\001\002\000" +
    "\042\002\uffa0\005\uffa0\006\uffa0\027\uffa0\066\uffa0\067\uffa0" +
    "\070\uffa0\071\uffa0\074\uffa0\075\uffa0\104\uffa0\105\u0181\106" +
    "\uff85\107\uffa0\111\uffa0\145\uffa0\001\002\000\016\002\uffce" +
    "\006\uffce\062\u017f\063\u017e\064\u017d\065\u017c\001\002\000" +
    "\006\002\uff7d\006\163\001\002\000\062\027\116\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\004\002\001\001\002" +
    "\000\016\002\uffcc\005\uffcc\006\uffcc\027\uffcc\104\uffcc\107" +
    "\uffcc\001\002\000\062\027\116\072\035\073\042\074\122" +
    "\075\105\076\127\077\036\100\130\101\126\102\072\103" +
    "\031\106\054\110\076\112\004\113\026\114\055\115\034" +
    "\116\114\117\043\120\111\121\131\122\063\123\120\144" +
    "\011\001\002\000\036\002\uffb6\005\uffb6\006\uffb6\027\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\074\uffb6\075\uffb6\104" +
    "\uffb6\107\uffb6\111\uffb6\145\uffb6\001\002\000\062\027\116" +
    "\072\035\073\042\074\122\075\105\076\127\077\036\100" +
    "\130\101\126\102\072\103\031\106\054\110\076\112\004" +
    "\113\026\114\055\115\034\116\114\117\043\120\111\121" +
    "\131\122\063\123\120\144\011\001\002\000\004\144\u0171" +
    "\001\002\000\010\005\145\006\151\027\146\001\002\000" +
    "\006\114\055\144\170\001\002\000\004\144\u0120\001\002" +
    "\000\004\106\u0116\001\002\000\006\002\uff7d\006\163\001" +
    "\002\000\066\002\uff77\006\uff77\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\004\106\u0108\001\002\000\030" +
    "\005\145\006\151\027\146\066\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\074\uffa2\075\uffa2\106\uff86\145\uffa2\001\002\000\012" +
    "\002\uff7d\006\163\016\u0104\017\u0103\001\002\000\004\106" +
    "\375\001\002\000\016\027\116\106\054\112\004\113\026" +
    "\114\055\144\011\001\002\000\062\027\116\072\035\073" +
    "\042\074\122\075\105\076\127\077\036\100\130\101\126" +
    "\102\072\103\031\106\054\110\076\112\004\113\026\114" +
    "\055\115\034\116\114\117\043\120\111\121\131\122\063" +
    "\123\120\144\011\001\002\000\036\002\uffb1\005\uffb1\006" +
    "\uffb1\027\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\074\uffb1" +
    "\075\uffb1\104\uffb1\107\uffb1\111\uffb1\145\uffb1\001\002\000" +
    "\036\002\uffb0\005\uffb0\006\uffb0\027\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\074\uffb0\075\uffb0\104\uffb0\107\uffb0\111" +
    "\uffb0\145\uffb0\001\002\000\036\002\uffb8\005\uffb8\006\uffb8" +
    "\027\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\074\uffb8\075" +
    "\uffb8\104\uffb8\107\uffb8\111\uffb8\145\uffb8\001\002\000\004" +
    "\106\365\001\002\000\004\106\360\001\002\000\006\002" +
    "\uff7d\006\163\001\002\000\006\114\055\144\170\001\002" +
    "\000\034\002\uffcb\005\uffcb\006\uffcb\027\uffcb\066\347\067" +
    "\uffbf\070\uffbf\071\uffbf\074\350\075\352\104\uffcb\107\uffcb" +
    "\145\uffbf\001\002\000\036\002\uffb4\005\uffb4\006\uffb4\027" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\074\uffb4\075\uffb4" +
    "\104\uffb4\107\uffb4\111\uffb4\145\uffb4\001\002\000\036\002" +
    "\uffba\005\uffba\006\uffba\027\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\074\uffba\075\uffba\104\uffba\107\uffba\111\uffba\145" +
    "\uffba\001\002\000\066\002\uff77\006\uff77\027\116\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\036\002\uff9d\005\uff9d" +
    "\006\uff9d\027\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\074" +
    "\uff9d\075\uff9d\104\uff9d\107\uff9d\111\uff9d\145\uff9d\001\002" +
    "\000\004\002\343\001\002\000\062\027\116\072\035\073" +
    "\042\074\122\075\105\076\127\077\036\100\130\101\126" +
    "\102\072\103\031\106\054\110\076\112\004\113\026\114" +
    "\055\115\034\116\114\117\043\120\111\121\131\122\063" +
    "\123\120\144\011\001\002\000\004\143\340\001\002\000" +
    "\006\002\uff7d\006\163\001\002\000\062\027\116\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\004\002\ufffe\001\002" +
    "\000\036\002\uffb7\005\uffb7\006\uffb7\027\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\074\uffb7\075\uffb7\104\uffb7\107\uffb7" +
    "\111\uffb7\145\uffb7\001\002\000\006\002\uff7d\006\163\001" +
    "\002\000\004\106\327\001\002\000\006\002\uff7d\006\163" +
    "\001\002\000\006\002\uff7d\006\163\001\002\000\004\141" +
    "\323\001\002\000\004\002\uffff\001\002\000\066\002\uff77" +
    "\006\uff77\027\116\072\035\073\042\074\122\075\105\076" +
    "\127\077\036\100\130\101\126\102\072\103\031\106\054" +
    "\110\076\112\004\113\026\114\055\115\034\116\114\117" +
    "\043\120\111\121\131\122\063\123\120\144\011\001\002" +
    "\000\016\027\116\106\054\112\004\113\026\114\055\144" +
    "\011\001\002\000\004\106\307\001\002\000\036\002\uffae" +
    "\005\uffae\006\uffae\027\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\074\uffae\075\uffae\104\uffae\107\uffae\111\uffae\145\uffae" +
    "\001\002\000\036\002\uffb5\005\uffb5\006\uffb5\027\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\074\uffb5\075\uffb5\104\uffb5" +
    "\107\uffb5\111\uffb5\145\uffb5\001\002\000\006\114\055\144" +
    "\170\001\002\000\060\027\116\072\035\073\042\074\122" +
    "\075\105\076\127\077\036\100\130\101\126\102\072\103" +
    "\031\106\054\112\004\113\026\114\055\115\034\116\114" +
    "\117\043\120\111\121\131\122\063\123\120\144\011\001" +
    "\002\000\030\002\uff70\006\uff70\027\263\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\141\264\143\266\001" +
    "\002\000\036\002\uffb2\005\uffb2\006\uffb2\027\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\074\uffb2\075\uffb2\104\uffb2\107" +
    "\uffb2\111\uffb2\145\uffb2\001\002\000\036\002\uffaf\005\uffaf" +
    "\006\uffaf\027\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\074" +
    "\uffaf\075\uffaf\104\uffaf\107\uffaf\111\uffaf\145\uffaf\001\002" +
    "\000\004\144\247\001\002\000\004\106\244\001\002\000" +
    "\036\002\uffb9\005\uffb9\006\uffb9\027\uffb9\066\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\074\uffb9\075\uffb9\104\uffb9\107\uffb9\111" +
    "\uffb9\145\uffb9\001\002\000\062\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\012\067\234\070\233\071\235" +
    "\145\236\001\002\000\036\002\uffb3\005\uffb3\006\uffb3\027" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\075\uffb3" +
    "\104\uffb3\107\uffb3\111\uffb3\145\uffb3\001\002\000\012\002" +
    "\uff79\006\uff79\114\055\144\170\001\002\000\004\106\224" +
    "\001\002\000\036\002\uff9e\005\uff9e\006\uff9e\027\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\071\uff9e\074\uff9e\075\uff9e\104\uff9e" +
    "\107\uff9e\111\uff9e\145\uff9e\001\002\000\016\002\uffcd\005" +
    "\uffcd\006\uffcd\027\uffcd\104\uffcd\107\uffcd\001\002\000\004" +
    "\106\217\001\002\000\040\002\uffa1\005\uffa1\006\uffa1\027" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\074\uffa1\075\uffa1" +
    "\104\uffa1\106\207\107\uffa1\111\uffa1\145\uffa1\001\002\000" +
    "\006\114\055\144\170\001\002\000\012\002\uff79\006\uff79" +
    "\114\055\144\170\001\002\000\004\106\176\001\002\000" +
    "\006\002\uff7d\006\163\001\002\000\062\027\116\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\006\114\055\144\170" +
    "\001\002\000\064\005\160\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\004\106\132\001\002\000\016\027" +
    "\116\106\054\112\004\113\026\114\055\144\011\001\002" +
    "\000\040\002\uffa2\005\uffa2\006\uffa2\027\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\074\uffa2\075\uffa2\104\uffa2\106\uff86" +
    "\107\uffa2\111\uffa2\145\uffa2\001\002\000\004\104\135\001" +
    "\002\000\062\027\116\072\035\073\042\074\122\075\105" +
    "\076\127\077\036\100\130\101\126\102\072\103\031\106" +
    "\054\110\076\112\004\113\026\114\055\115\034\116\114" +
    "\117\043\120\111\121\131\122\063\123\120\144\011\001" +
    "\002\000\004\107\137\001\002\000\036\002\uff91\005\uff91" +
    "\006\uff91\027\uff91\066\uff91\067\uff91\070\uff91\071\uff91\074" +
    "\uff91\075\uff91\104\uff91\107\uff91\111\uff91\145\uff91\001\002" +
    "\000\036\002\uffa7\005\uffa7\006\uffa7\027\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\074\uffa7\075\uffa7\104\uffa7\107\uffa7" +
    "\111\uffa7\145\uffa7\001\002\000\036\002\uffbf\005\uffbf\006" +
    "\uffbf\027\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\074\uffbf" +
    "\075\uffbf\104\uffbf\107\uffbf\111\uffbf\145\uffbf\001\002\000" +
    "\036\002\uffa9\005\uffa9\006\uffa9\027\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\074\uffa9\075\uffa9\104\uffa9\107\uffa9\111" +
    "\uffa9\145\uffa9\001\002\000\036\002\uffa6\005\uffa6\006\uffa6" +
    "\027\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\074\uffa6\075" +
    "\uffa6\104\uffa6\107\uffa6\111\uffa6\145\uffa6\001\002\000\012" +
    "\002\uff7b\005\145\006\151\027\146\001\002\000\004\002" +
    "\uff83\001\002\000\010\002\uff81\027\152\106\153\001\002" +
    "\000\004\002\uff7c\001\002\000\004\002\ufff5\001\002\000" +
    "\004\002\uff84\001\002\000\004\002\uff82\001\002\000\004" +
    "\143\154\001\002\000\006\107\155\143\156\001\002\000" +
    "\004\002\uff80\001\002\000\004\107\157\001\002\000\004" +
    "\002\uff7f\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\006\002\uff7d\006\163\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\uff7e\001\002\000\012" +
    "\002\uff7b\005\145\006\151\027\146\001\002\000\004\002" +
    "\ufffa\001\002\000\064\002\uff77\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\110\002\uff86\005\uff86\006\uff86" +
    "\027\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86" +
    "\102\uff86\103\uff86\104\uff86\106\uff86\107\uff86\110\uff86\111" +
    "\uff86\112\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86" +
    "\120\uff86\121\uff86\122\uff86\123\uff86\144\uff86\145\uff86\001" +
    "\002\000\110\002\uff85\005\uff85\006\uff85\027\uff85\066\uff85" +
    "\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075" +
    "\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85" +
    "\104\uff85\106\uff85\107\uff85\110\uff85\111\uff85\112\uff85\113" +
    "\uff85\114\uff85\115\uff85\116\uff85\117\uff85\120\uff85\121\uff85" +
    "\122\uff85\123\uff85\144\uff85\145\uff85\001\002\000\006\002" +
    "\uffc0\006\uffc0\001\002\000\004\002\uffdc\001\002\000\006" +
    "\002\uff78\006\uff78\001\002\000\036\002\uffab\005\uffab\006" +
    "\uffab\027\uffab\066\uffab\067\uffab\070\uffab\071\uffab\074\uffab" +
    "\075\uffab\104\uffab\107\uffab\111\uffab\145\uffab\001\002\000" +
    "\004\002\uffee\001\002\000\016\027\116\106\054\112\004" +
    "\113\026\114\055\144\011\001\002\000\004\104\200\001" +
    "\002\000\062\027\116\072\035\073\042\074\122\075\105" +
    "\076\127\077\036\100\130\101\126\102\072\103\031\106" +
    "\054\110\076\112\004\113\026\114\055\115\034\116\114" +
    "\117\043\120\111\121\131\122\063\123\120\144\011\001" +
    "\002\000\004\107\202\001\002\000\036\002\uff8f\005\uff8f" +
    "\006\uff8f\027\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\074" +
    "\uff8f\075\uff8f\104\uff8f\107\uff8f\111\uff8f\145\uff8f\001\002" +
    "\000\006\002\uff7a\006\uff7a\001\002\000\006\002\uff7d\006" +
    "\163\001\002\000\004\002\uffe6\001\002\000\040\002\uff87" +
    "\005\uff87\006\uff87\027\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\074\uff87\075\uff87\104\uff87\106\uff87\107\uff87\111\uff87" +
    "\145\uff87\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\006\104\213\107\uff8c\001\002\000" +
    "\004\107\212\001\002\000\036\002\uff9c\005\uff9c\006\uff9c" +
    "\027\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\074\uff9c\075" +
    "\uff9c\104\uff9c\107\uff9c\111\uff9c\145\uff9c\001\002\000\062" +
    "\027\116\072\035\073\042\074\122\075\105\076\127\077" +
    "\036\100\130\101\126\102\072\103\031\106\054\110\076" +
    "\112\004\113\026\114\055\115\034\116\114\117\043\120" +
    "\111\121\131\122\063\123\120\144\011\001\002\000\004" +
    "\107\uff8e\001\002\000\006\104\213\107\uff8c\001\002\000" +
    "\004\107\uff8d\001\002\000\062\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\004\104\221\001\002\000\016" +
    "\027\116\106\054\112\004\113\026\114\055\144\011\001" +
    "\002\000\004\107\223\001\002\000\036\002\uff94\005\uff94" +
    "\006\uff94\027\uff94\066\uff94\067\uff94\070\uff94\071\uff94\074" +
    "\uff94\075\uff94\104\uff94\107\uff94\111\uff94\145\uff94\001\002" +
    "\000\016\027\116\106\054\112\004\113\026\114\055\144" +
    "\011\001\002\000\004\104\226\001\002\000\016\027\116" +
    "\106\054\112\004\113\026\114\055\144\011\001\002\000" +
    "\004\107\230\001\002\000\036\002\uff92\005\uff92\006\uff92" +
    "\027\uff92\066\uff92\067\uff92\070\uff92\071\uff92\074\uff92\075" +
    "\uff92\104\uff92\107\uff92\111\uff92\145\uff92\001\002\000\006" +
    "\002\uff7d\006\163\001\002\000\004\002\uffe3\001\002\000" +
    "\062\027\116\072\035\073\042\074\122\075\105\076\127" +
    "\077\036\100\130\101\126\102\072\103\031\106\054\110" +
    "\076\112\004\113\026\114\055\115\034\116\114\117\043" +
    "\120\111\121\131\122\063\123\120\144\011\001\002\000" +
    "\062\027\116\072\035\073\042\074\122\075\105\076\127" +
    "\077\036\100\130\101\126\102\072\103\031\106\054\110" +
    "\076\112\004\113\026\114\055\115\034\116\114\117\043" +
    "\120\111\121\131\122\063\123\120\144\011\001\002\000" +
    "\062\027\116\072\035\073\042\074\122\075\105\076\127" +
    "\077\036\100\130\101\126\102\072\103\031\106\054\110" +
    "\076\112\004\113\026\114\055\115\034\116\114\117\043" +
    "\120\111\121\131\122\063\123\120\144\011\001\002\000" +
    "\062\027\116\072\035\073\042\074\122\075\105\076\127" +
    "\077\036\100\130\101\126\102\072\103\031\106\054\110" +
    "\076\112\004\113\026\114\055\115\034\116\114\117\043" +
    "\120\111\121\131\122\063\123\120\144\011\001\002\000" +
    "\016\002\uffc1\005\uffc1\006\uffc1\027\uffc1\104\uffc1\107\uffc1" +
    "\001\002\000\016\002\uffc2\005\uffc2\006\uffc2\027\uffc2\104" +
    "\uffc2\107\uffc2\001\002\000\016\002\uffc4\005\uffc4\006\uffc4" +
    "\027\uffc4\104\uffc4\107\uffc4\001\002\000\016\002\uffc3\005" +
    "\uffc3\006\uffc3\027\uffc3\104\uffc3\107\uffc3\001\002\000\036" +
    "\002\uffaa\005\uffaa\006\uffaa\027\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\074\uffaa\075\uffaa\104\uffaa\107\uffaa\111\uffaa" +
    "\145\uffaa\001\002\000\062\027\116\072\035\073\042\074" +
    "\122\075\105\076\127\077\036\100\130\101\126\102\072" +
    "\103\031\106\054\110\076\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\004\107\246\001\002\000\036\002" +
    "\uff9b\005\uff9b\006\uff9b\027\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\074\uff9b\075\uff9b\104\uff9b\107\uff9b\111\uff9b\145" +
    "\uff9b\001\002\000\006\114\055\144\170\001\002\000\004" +
    "\106\252\001\002\000\010\002\uff7d\006\163\142\261\001" +
    "\002\000\004\144\253\001\002\000\006\107\uff75\144\255" +
    "\001\002\000\004\107\257\001\002\000\006\107\uff75\144" +
    "\255\001\002\000\004\107\uff76\001\002\000\010\002\uff74" +
    "\006\uff74\142\uff74\001\002\000\004\002\uffed\001\002\000" +
    "\006\002\uff7d\006\163\001\002\000\004\002\uffec\001\002" +
    "\000\022\002\uff72\006\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\001\002\000\022\002\uff73\006\uff73" +
    "\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\001" +
    "\002\000\022\002\uff69\006\uff69\030\274\031\271\032\275" +
    "\033\272\034\273\035\270\001\002\000\022\002\uff71\006" +
    "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\001\002\000\006\002\uff7d\006\163\001\002\000\006\002" +
    "\uff6a\006\uff6a\001\002\000\006\002\uff6e\006\uff6e\001\002" +
    "\000\006\002\uff6c\006\uff6c\001\002\000\006\002\uff6b\006" +
    "\uff6b\001\002\000\006\002\uff6f\006\uff6f\001\002\000\006" +
    "\002\uff6d\006\uff6d\001\002\000\004\002\uffe7\001\002\000" +
    "\004\111\305\001\002\000\006\104\301\111\uffbb\001\002" +
    "\000\060\027\116\072\035\073\042\074\122\075\105\076" +
    "\127\077\036\100\130\101\126\102\072\103\031\106\054" +
    "\112\004\113\026\114\055\115\034\116\114\117\043\120" +
    "\111\121\131\122\063\123\120\144\011\001\002\000\004" +
    "\111\uffbd\001\002\000\006\104\301\111\uffbb\001\002\000" +
    "\004\111\uffbc\001\002\000\036\002\uffbe\005\uffbe\006\uffbe" +
    "\027\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\074\uffbe\075" +
    "\uffbe\104\uffbe\107\uffbe\111\uffbe\145\uffbe\001\002\000\004" +
    "\002\uffdb\001\002\000\004\143\310\001\002\000\006\104" +
    "\311\107\312\001\002\000\004\143\314\001\002\000\062" +
    "\027\116\072\035\073\042\074\122\075\105\076\127\077" +
    "\036\100\130\101\126\102\072\103\031\106\054\110\076" +
    "\112\004\113\026\114\055\115\034\116\114\117\043\120" +
    "\111\121\131\122\063\123\120\144\011\001\002\000\036" +
    "\002\uffa4\005\uffa4\006\uffa4\027\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\074\uffa4\075\uffa4\104\uffa4\107\uffa4\111\uffa4" +
    "\145\uffa4\001\002\000\004\107\315\001\002\000\062\027" +
    "\116\072\035\073\042\074\122\075\105\076\127\077\036" +
    "\100\130\101\126\102\072\103\031\106\054\110\076\112" +
    "\004\113\026\114\055\115\034\116\114\117\043\120\111" +
    "\121\131\122\063\123\120\144\011\001\002\000\036\002" +
    "\uffa5\005\uffa5\006\uffa5\027\uffa5\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\074\uffa5\075\uffa5\104\uffa5\107\uffa5\111\uffa5\145" +
    "\uffa5\001\002\000\006\002\uff7d\006\163\001\002\000\004" +
    "\002\uffde\001\002\000\006\002\uff7d\006\163\001\002\000" +
    "\004\002\uffd7\001\002\000\006\002\uff7d\006\163\001\002" +
    "\000\004\002\uffe0\001\002\000\004\002\uffda\001\002\000" +
    "\004\002\uffd9\001\002\000\062\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\004\104\331\001\002\000\016" +
    "\027\116\106\054\112\004\113\026\114\055\144\011\001" +
    "\002\000\004\107\333\001\002\000\036\002\uff90\005\uff90" +
    "\006\uff90\027\uff90\066\uff90\067\uff90\070\uff90\071\uff90\074" +
    "\uff90\075\uff90\104\uff90\107\uff90\111\uff90\145\uff90\001\002" +
    "\000\004\002\uffd8\001\002\000\012\002\uff7b\005\145\006" +
    "\151\027\146\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\uffef\001\002\000\110\002\uff88\005\uff88\006\uff88\027" +
    "\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88" +
    "\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\106\uff88\107\uff88\110\uff88\111\uff88" +
    "\112\uff88\113\uff88\114\uff88\115\uff88\116\uff88\117\uff88\120" +
    "\uff88\121\uff88\122\uff88\123\uff88\144\uff88\145\uff88\001\002" +
    "\000\004\107\342\001\002\000\036\002\uff9a\005\uff9a\006" +
    "\uff9a\027\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\074\uff9a" +
    "\075\uff9a\104\uff9a\107\uff9a\111\uff9a\145\uff9a\001\002\000" +
    "\004\002\000\001\002\000\006\002\uff7d\006\163\001\002" +
    "\000\004\002\uffe1\001\002\000\060\027\116\072\035\073" +
    "\042\074\122\075\105\076\127\077\036\100\130\101\126" +
    "\102\072\103\031\106\054\112\004\113\026\114\055\115" +
    "\034\116\114\117\043\120\111\121\131\122\063\123\120" +
    "\144\011\001\002\000\060\027\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\106\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\116" +
    "\uffc5\117\uffc5\120\uffc5\121\uffc5\122\uffc5\123\uffc5\144\uffc5" +
    "\001\002\000\060\027\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\106\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117" +
    "\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\144\uffc7\001\002" +
    "\000\016\002\uffca\005\uffca\006\uffca\027\uffca\104\uffca\107" +
    "\uffca\001\002\000\060\027\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\106\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6" +
    "\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\144\uffc6\001" +
    "\002\000\024\002\uffc8\005\uffc8\006\uffc8\027\uffc8\066\347" +
    "\074\350\075\352\104\uffc8\107\uffc8\001\002\000\016\002" +
    "\uffc9\005\uffc9\006\uffc9\027\uffc9\104\uffc9\107\uffc9\001\002" +
    "\000\062\027\116\072\035\073\042\074\122\075\105\076" +
    "\127\077\036\100\130\101\126\102\072\103\031\106\054" +
    "\110\076\112\004\113\026\114\055\115\034\116\114\117" +
    "\043\120\111\121\131\122\063\123\120\144\011\001\002" +
    "\000\004\002\uffdd\001\002\000\004\002\uffe4\001\002\000" +
    "\062\027\116\072\035\073\042\074\122\075\105\076\127" +
    "\077\036\100\130\101\126\102\072\103\031\106\054\110" +
    "\076\112\004\113\026\114\055\115\034\116\114\117\043" +
    "\120\111\121\131\122\063\123\120\144\011\001\002\000" +
    "\004\104\362\001\002\000\016\027\116\106\054\112\004" +
    "\113\026\114\055\144\011\001\002\000\004\107\364\001" +
    "\002\000\036\002\uff93\005\uff93\006\uff93\027\uff93\066\uff93" +
    "\067\uff93\070\uff93\071\uff93\074\uff93\075\uff93\104\uff93\107" +
    "\uff93\111\uff93\145\uff93\001\002\000\004\143\366\001\002" +
    "\000\004\104\367\001\002\000\004\143\370\001\002\000" +
    "\004\107\371\001\002\000\062\027\116\072\035\073\042" +
    "\074\122\075\105\076\127\077\036\100\130\101\126\102" +
    "\072\103\031\106\054\110\076\112\004\113\026\114\055" +
    "\115\034\116\114\117\043\120\111\121\131\122\063\123" +
    "\120\144\011\001\002\000\036\002\uffac\005\uffac\006\uffac" +
    "\027\uffac\066\uffac\067\uffac\070\uffac\071\uffac\074\uffac\075" +
    "\uffac\104\uffac\107\uffac\111\uffac\145\uffac\001\002\000\036" +
    "\002\uffa8\005\uffa8\006\uffa8\027\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\074\uffa8\075\uffa8\104\uffa8\107\uffa8\111\uffa8" +
    "\145\uffa8\001\002\000\036\002\uffad\005\uffad\006\uffad\027" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\074\uffad\075\uffad" +
    "\104\uffad\107\uffad\111\uffad\145\uffad\001\002\000\062\027" +
    "\116\072\035\073\042\074\122\075\105\076\127\077\036" +
    "\100\130\101\126\102\072\103\031\106\054\110\076\112" +
    "\004\113\026\114\055\115\034\116\114\117\043\120\111" +
    "\121\131\122\063\123\120\144\011\001\002\000\004\104" +
    "\377\001\002\000\016\027\116\106\054\112\004\113\026" +
    "\114\055\144\011\001\002\000\004\107\u0101\001\002\000" +
    "\036\002\uff95\005\uff95\006\uff95\027\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\074\uff95\075\uff95\104\uff95\107\uff95\111" +
    "\uff95\145\uff95\001\002\000\004\002\ufff3\001\002\000\006" +
    "\002\uff7d\006\163\001\002\000\006\002\uff7d\006\163\001" +
    "\002\000\004\002\ufff2\001\002\000\004\002\ufff1\001\002" +
    "\000\004\002\ufffd\001\002\000\006\114\055\144\170\001" +
    "\002\000\006\104\u010f\107\uff89\001\002\000\004\107\u010b" +
    "\001\002\000\004\106\u010c\001\002\000\062\027\116\072" +
    "\035\073\042\074\122\075\105\076\127\077\036\100\130" +
    "\101\126\102\072\103\031\106\054\110\076\112\004\113" +
    "\026\114\055\115\034\116\114\117\043\120\111\121\131" +
    "\122\063\123\120\144\011\001\002\000\004\107\u010e\001" +
    "\002\000\036\002\uffa3\005\uffa3\006\uffa3\027\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\074\uffa3\075\uffa3\104\uffa3\107" +
    "\uffa3\111\uffa3\145\uffa3\001\002\000\006\114\055\144\170" +
    "\001\002\000\006\104\uff8b\107\uff8b\001\002\000\006\104" +
    "\u010f\107\uff89\001\002\000\006\104\uff8a\107\uff8a\001\002" +
    "\000\006\002\uff7d\006\163\001\002\000\004\002\uffe5\001" +
    "\002\000\004\002\uffd4\001\002\000\006\114\055\144\170" +
    "\001\002\000\004\104\u0118\001\002\000\062\027\116\072" +
    "\035\073\042\074\122\075\105\076\127\077\036\100\130" +
    "\101\126\102\072\103\031\106\054\110\076\112\004\113" +
    "\026\114\055\115\034\116\114\117\043\120\111\121\131" +
    "\122\063\123\120\144\011\001\002\000\004\104\u011a\001" +
    "\002\000\062\027\116\072\035\073\042\074\122\075\105" +
    "\076\127\077\036\100\130\101\126\102\072\103\031\106" +
    "\054\110\076\112\004\113\026\114\055\115\034\116\114" +
    "\117\043\120\111\121\131\122\063\123\120\144\011\001" +
    "\002\000\006\104\u011c\107\u011d\001\002\000\062\027\116" +
    "\072\035\073\042\074\122\075\105\076\127\077\036\100" +
    "\130\101\126\102\072\103\031\106\054\110\076\112\004" +
    "\113\026\114\055\115\034\116\114\117\043\120\111\121" +
    "\131\122\063\123\120\144\011\001\002\000\036\002\uff96" +
    "\005\uff96\006\uff96\027\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\074\uff96\075\uff96\104\uff96\107\uff96\111\uff96\145\uff96" +
    "\001\002\000\004\107\u011f\001\002\000\036\002\uff97\005" +
    "\uff97\006\uff97\027\uff97\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\074\uff97\075\uff97\104\uff97\107\uff97\111\uff97\145\uff97\001" +
    "\002\000\040\074\u0123\075\u012d\124\u012e\125\u012c\126\u0124" +
    "\127\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134\u0130\135" +
    "\u012b\136\u0121\137\u0122\140\u0128\001\002\000\004\106\u0168" +
    "\001\002\000\014\002\uff68\006\uff68\104\uff68\106\uff68\107" +
    "\uff68\001\002\000\004\106\u0164\001\002\000\004\106\u0160" +
    "\001\002\000\004\106\u0158\001\002\000\004\106\u0150\001" +
    "\002\000\004\106\u014d\001\002\000\014\002\uff67\006\uff67" +
    "\104\uff67\106\uff67\107\uff67\001\002\000\004\106\u014a\001" +
    "\002\000\004\106\u0147\001\002\000\004\106\u0142\001\002" +
    "\000\004\106\u013f\001\002\000\004\106\u0138\001\002\000" +
    "\004\106\u0135\001\002\000\006\002\uff7d\006\163\001\002" +
    "\000\004\106\u0131\001\002\000\004\144\u0132\001\002\000" +
    "\004\107\u0133\001\002\000\014\002\uff65\006\uff65\104\uff65" +
    "\106\uff65\107\uff65\001\002\000\004\002\uffeb\001\002\000" +
    "\040\074\u0123\075\u012d\124\u012e\125\u012c\126\u0124\127\u0127" +
    "\130\u0129\131\u0125\132\u0126\133\u012a\134\u0130\135\u012b\136" +
    "\u0121\137\u0122\140\u0128\001\002\000\004\107\u0137\001\002" +
    "\000\014\002\uff62\006\uff62\104\uff62\106\uff62\107\uff62\001" +
    "\002\000\042\074\u0123\075\u012d\107\u0139\124\u012e\125\u012c" +
    "\126\u0124\127\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134" +
    "\u0130\135\u012b\136\u0121\137\u0122\140\u0128\001\002\000\014" +
    "\002\uff5d\006\uff5d\104\uff5d\106\uff5d\107\uff5d\001\002\000" +
    "\006\104\u013d\107\uff55\001\002\000\004\107\u013c\001\002" +
    "\000\014\002\uff5e\006\uff5e\104\uff5e\106\uff5e\107\uff5e\001" +
    "\002\000\040\074\u0123\075\u012d\124\u012e\125\u012c\126\u0124" +
    "\127\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134\u0130\135" +
    "\u012b\136\u0121\137\u0122\140\u0128\001\002\000\004\107\uff56" +
    "\001\002\000\040\074\u0123\075\u012d\124\u012e\125\u012c\126" +
    "\u0124\127\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134\u0130" +
    "\135\u012b\136\u0121\137\u0122\140\u0128\001\002\000\004\107" +
    "\u0141\001\002\000\014\002\uff61\006\uff61\104\uff61\106\uff61" +
    "\107\uff61\001\002\000\004\144\u0143\001\002\000\004\104" +
    "\u0144\001\002\000\004\144\u0145\001\002\000\004\107\u0146" +
    "\001\002\000\014\002\uff64\006\uff64\104\uff64\106\uff64\107" +
    "\uff64\001\002\000\004\144\u0148\001\002\000\004\107\u0149" +
    "\001\002\000\014\002\uff66\006\uff66\104\uff66\106\uff66\107" +
    "\uff66\001\002\000\040\074\u0123\075\u012d\124\u012e\125\u012c" +
    "\126\u0124\127\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134" +
    "\u0130\135\u012b\136\u0121\137\u0122\140\u0128\001\002\000\004" +
    "\107\u014c\001\002\000\014\002\uff59\006\uff59\104\uff59\106" +
    "\uff59\107\uff59\001\002\000\040\074\u0123\075\u012d\124\u012e" +
    "\125\u012c\126\u0124\127\u0127\130\u0129\131\u0125\132\u0126\133" +
    "\u012a\134\u0130\135\u012b\136\u0121\137\u0122\140\u0128\001\002" +
    "\000\004\107\u014f\001\002\000\014\002\uff5a\006\uff5a\104" +
    "\uff5a\106\uff5a\107\uff5a\001\002\000\040\074\u0123\075\u012d" +
    "\124\u012e\125\u012c\126\u0124\127\u0127\130\u0129\131\u0125\132" +
    "\u0126\133\u012a\134\u0130\135\u012b\136\u0121\137\u0122\140\u0128" +
    "\001\002\000\004\104\u0152\001\002\000\040\074\u0123\075" +
    "\u012d\124\u012e\125\u012c\126\u0124\127\u0127\130\u0129\131\u0125" +
    "\132\u0126\133\u012a\134\u0130\135\u012b\136\u0121\137\u0122\140" +
    "\u0128\001\002\000\004\106\u0154\001\002\000\062\027\116" +
    "\072\035\073\042\074\122\075\105\076\127\077\036\100" +
    "\130\101\126\102\072\103\031\106\054\110\076\112\004" +
    "\113\026\114\055\115\034\116\114\117\043\120\111\121" +
    "\131\122\063\123\120\144\011\001\002\000\004\107\u0156" +
    "\001\002\000\004\107\u0157\001\002\000\014\002\uff57\006" +
    "\uff57\104\uff57\106\uff57\107\uff57\001\002\000\040\074\u0123" +
    "\075\u012d\124\u012e\125\u012c\126\u0124\127\u0127\130\u0129\131" +
    "\u0125\132\u0126\133\u012a\134\u0130\135\u012b\136\u0121\137\u0122" +
    "\140\u0128\001\002\000\004\106\u015a\001\002\000\062\027" +
    "\116\072\035\073\042\074\122\075\105\076\127\077\036" +
    "\100\130\101\126\102\072\103\031\106\054\110\076\112" +
    "\004\113\026\114\055\115\034\116\114\117\043\120\111" +
    "\121\131\122\063\123\120\144\011\001\002\000\004\107" +
    "\u015c\001\002\000\004\104\u015d\001\002\000\040\074\u0123" +
    "\075\u012d\124\u012e\125\u012c\126\u0124\127\u0127\130\u0129\131" +
    "\u0125\132\u0126\133\u012a\134\u0130\135\u012b\136\u0121\137\u0122" +
    "\140\u0128\001\002\000\004\107\u015f\001\002\000\014\002" +
    "\uff58\006\uff58\104\uff58\106\uff58\107\uff58\001\002\000\042" +
    "\074\u0123\075\u012d\107\u0161\124\u012e\125\u012c\126\u0124\127" +
    "\u0127\130\u0129\131\u0125\132\u0126\133\u012a\134\u0130\135\u012b" +
    "\136\u0121\137\u0122\140\u0128\001\002\000\014\002\uff5b\006" +
    "\uff5b\104\uff5b\106\uff5b\107\uff5b\001\002\000\004\107\u0163" +
    "\001\002\000\014\002\uff5c\006\uff5c\104\uff5c\106\uff5c\107" +
    "\uff5c\001\002\000\042\074\u0123\075\u012d\107\u0165\124\u012e" +
    "\125\u012c\126\u0124\127\u0127\130\u0129\131\u0125\132\u0126\133" +
    "\u012a\134\u0130\135\u012b\136\u0121\137\u0122\140\u0128\001\002" +
    "\000\014\002\uff5f\006\uff5f\104\uff5f\106\uff5f\107\uff5f\001" +
    "\002\000\004\107\u0167\001\002\000\014\002\uff60\006\uff60" +
    "\104\uff60\106\uff60\107\uff60\001\002\000\004\144\u0169\001" +
    "\002\000\004\104\u016a\001\002\000\004\144\u016b\001\002" +
    "\000\004\107\u016c\001\002\000\014\002\uff63\006\uff63\104" +
    "\uff63\106\uff63\107\uff63\001\002\000\062\027\116\072\035" +
    "\073\042\074\122\075\105\076\127\077\036\100\130\101" +
    "\126\102\072\103\031\106\054\110\076\112\004\113\026" +
    "\114\055\115\034\116\114\117\043\120\111\121\131\122" +
    "\063\123\120\144\011\001\002\000\006\002\uff7d\006\163" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufffc\001" +
    "\002\000\006\002\uffea\144\u0172\001\002\000\006\002\uffe9" +
    "\106\252\001\002\000\004\002\uffe8\001\002\000\006\002" +
    "\uff7d\006\163\001\002\000\004\002\ufff4\001\002\000\012" +
    "\002\uff7b\005\145\006\151\027\146\001\002\000\004\002" +
    "\ufff8\001\002\000\012\002\uff7b\005\145\006\151\027\146" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\uffe2\001" +
    "\002\000\006\002\uff7d\006\163\001\002\000\006\002\uffd0" +
    "\006\uffd0\001\002\000\006\002\uffcf\006\uffcf\001\002\000" +
    "\006\002\uffd1\006\uffd1\001\002\000\006\002\uffd2\006\uffd2" +
    "\001\002\000\004\002\uffd6\001\002\000\004\144\u0182\001" +
    "\002\000\036\002\uff9f\005\uff9f\006\uff9f\027\uff9f\066\uff9f" +
    "\067\uff9f\070\uff9f\071\uff9f\074\uff9f\075\uff9f\104\uff9f\107" +
    "\uff9f\111\uff9f\145\uff9f\001\002\000\004\002\uffdf\001\002" +
    "\000\006\002\uff7d\006\163\001\002\000\004\002\uffd3\001" +
    "\002\000\006\002\uff7d\006\163\001\002\000\004\002\uffd5" +
    "\001\002\000\004\002\ufff0\001\002\000\006\114\055\144" +
    "\170\001\002\000\004\104\u018b\001\002\000\062\027\116" +
    "\072\035\073\042\074\122\075\105\076\127\077\036\100" +
    "\130\101\126\102\072\103\031\106\054\110\076\112\004" +
    "\113\026\114\055\115\034\116\114\117\043\120\111\121" +
    "\131\122\063\123\120\144\011\001\002\000\004\104\u018d" +
    "\001\002\000\062\027\116\072\035\073\042\074\122\075" +
    "\105\076\127\077\036\100\130\101\126\102\072\103\031" +
    "\106\054\110\076\112\004\113\026\114\055\115\034\116" +
    "\114\117\043\120\111\121\131\122\063\123\120\144\011" +
    "\001\002\000\006\104\u018f\107\u0190\001\002\000\062\027" +
    "\116\072\035\073\042\074\122\075\105\076\127\077\036" +
    "\100\130\101\126\102\072\103\031\106\054\110\076\112" +
    "\004\113\026\114\055\115\034\116\114\117\043\120\111" +
    "\121\131\122\063\123\120\144\011\001\002\000\036\002" +
    "\uff98\005\uff98\006\uff98\027\uff98\066\uff98\067\uff98\070\uff98" +
    "\071\uff98\074\uff98\075\uff98\104\uff98\107\uff98\111\uff98\145" +
    "\uff98\001\002\000\004\107\u0192\001\002\000\036\002\uff99" +
    "\005\uff99\006\uff99\027\uff99\066\uff99\067\uff99\070\uff99\071" +
    "\uff99\074\uff99\075\uff99\104\uff99\107\uff99\111\uff99\145\uff99" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\070\002\052\003\014\004\057\005\066\017" +
    "\031\022\022\023\112\024\015\025\045\026\047\027\103" +
    "\030\040\031\060\032\017\033\073\034\111\035\051\036" +
    "\046\037\106\040\077\041\036\042\037\043\100\044\072" +
    "\045\102\047\114\052\105\001\001\000\002\001\001\000" +
    "\004\010\u0187\001\001\000\002\001\001\000\004\006\u0183" +
    "\001\001\000\004\010\u0182\001\001\000\002\001\001\000" +
    "\004\006\u017a\001\001\000\004\010\u0179\001\001\000\060" +
    "\017\132\022\u0177\023\112\024\015\025\045\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\052\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\017\132\022\u0175\023\112\024" +
    "\015\025\045\026\047\027\103\030\040\031\060\032\017" +
    "\033\073\034\111\035\051\036\046\037\106\040\077\041" +
    "\036\042\037\043\100\044\072\045\102\047\114\052\105" +
    "\001\001\000\002\001\001\000\054\017\132\025\140\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\051\u0173\052\170\001\001" +
    "\000\002\001\001\000\004\007\u016f\001\001\000\006\017" +
    "\166\045\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0114\001\001\000\056\017\132\025\140\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\051\172\052\170\057\u0112" +
    "\001\001\000\002\001\001\000\004\007\u0106\001\001\000" +
    "\004\010\u0101\001\001\000\002\001\001\000\016\017\132" +
    "\033\373\034\111\035\051\045\102\047\114\001\001\000" +
    "\052\017\132\025\140\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\052\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\356\001\001\000\006\017\166\045\354\001\001\000" +
    "\006\016\345\050\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\017\132\025\140\026\047\027\103\030" +
    "\040\031\060\032\017\033\073\034\111\035\051\036\046" +
    "\037\106\040\077\041\036\042\037\043\100\044\072\045" +
    "\102\047\114\051\172\052\170\057\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\017\132\022\340\023" +
    "\112\024\015\025\045\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\052\105\001\001\000\002\001\001\000\004\010\336\001" +
    "\001\000\060\017\132\022\334\023\112\024\015\025\045" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\333\001\001" +
    "\000\002\001\001\000\004\010\325\001\001\000\004\010" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\017\132\025\140\026\047\027\103\030\040\031\060\032" +
    "\017\033\073\034\111\035\051\036\046\037\106\040\077" +
    "\041\036\042\037\043\100\044\072\045\102\047\114\051" +
    "\172\052\170\057\320\001\001\000\016\017\132\033\316" +
    "\034\111\035\051\045\102\047\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\166" +
    "\045\305\001\001\000\052\017\132\025\277\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\053\276\001\001\000\004\014\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\017\132" +
    "\025\140\026\047\027\103\030\040\031\060\032\017\033" +
    "\073\034\111\035\051\036\046\037\106\040\077\041\036" +
    "\042\037\043\100\044\072\045\102\047\114\052\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\166" +
    "\045\202\046\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\166\045\205\001\001\000\010\017\166\045" +
    "\202\046\203\001\001\000\002\001\001\000\004\010\174" +
    "\001\001\000\052\017\132\025\140\026\047\027\103\030" +
    "\040\031\060\032\017\033\073\034\111\035\051\036\046" +
    "\037\106\040\077\041\036\042\037\043\100\044\072\045" +
    "\102\047\114\052\173\001\001\000\006\017\166\045\165" +
    "\001\001\000\060\017\132\022\160\023\112\024\015\025" +
    "\045\026\047\027\103\030\040\031\060\032\017\033\073" +
    "\034\111\035\051\036\046\037\106\040\077\041\036\042" +
    "\037\043\100\044\072\045\102\047\114\052\105\001\001" +
    "\000\060\017\132\022\143\023\112\024\015\025\045\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\052\105\001\001\000\052" +
    "\017\132\025\140\026\047\027\103\030\040\031\060\032" +
    "\017\033\073\034\111\035\051\036\046\037\106\040\077" +
    "\041\036\042\037\043\100\044\072\045\102\047\114\052" +
    "\142\001\001\000\052\017\132\025\140\026\047\027\103" +
    "\030\040\031\060\032\017\033\073\034\111\035\051\036" +
    "\046\037\106\040\077\041\036\042\037\043\100\044\072" +
    "\045\102\047\114\052\141\001\001\000\052\017\132\025" +
    "\140\026\047\027\103\030\040\031\060\032\017\033\073" +
    "\034\111\035\051\036\046\037\106\040\077\041\036\042" +
    "\037\043\100\044\072\045\102\047\114\052\137\001\001" +
    "\000\002\001\001\000\016\017\132\033\133\034\111\035" +
    "\051\045\102\047\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\017\132\022\135\023\112\024\015\025" +
    "\045\026\047\027\103\030\040\031\060\032\017\033\073" +
    "\034\111\035\051\036\046\037\106\040\077\041\036\042" +
    "\037\043\100\044\072\045\102\047\114\052\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\146\011\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\017\132\022\163\023\112\024\015\025\045\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\052\105\001\001\000\004\010\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\146\011\164\001\001\000\002\001\001\000\056\017\132" +
    "\025\140\026\047\027\103\030\040\031\060\032\017\033" +
    "\073\034\111\035\051\036\046\037\106\040\077\041\036" +
    "\042\037\043\100\044\072\045\102\047\114\051\172\052" +
    "\170\057\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\132\033\176" +
    "\034\111\035\051\045\102\047\114\001\001\000\002\001" +
    "\001\000\060\017\132\022\200\023\112\024\015\025\045" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\017\132\025\140\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\052\207\060\210\001\001\000\004\061\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\017\132\025\140" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\214\001\001\000" +
    "\002\001\001\000\004\061\215\001\001\000\002\001\001" +
    "\000\060\017\132\022\217\023\112\024\015\025\045\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\052\105\001\001\000\002" +
    "\001\001\000\016\017\132\033\221\034\111\035\051\045" +
    "\102\047\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\132\033\224\034\111\035\051\045\102\047" +
    "\114\001\001\000\002\001\001\000\016\017\132\033\226" +
    "\034\111\035\051\045\102\047\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\231\001\001\000\002" +
    "\001\001\000\052\017\132\025\140\026\047\027\103\030" +
    "\040\031\060\032\017\033\073\034\111\035\051\036\046" +
    "\037\106\040\077\041\036\042\037\043\100\044\072\045" +
    "\102\047\114\052\241\001\001\000\052\017\132\025\140" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\240\001\001\000" +
    "\052\017\132\025\140\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\052\237\001\001\000\052\017\132\025\140\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\052\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\017\132\025\140\026\047\027\103" +
    "\030\040\031\060\032\017\033\073\034\111\035\051\036" +
    "\046\037\106\040\077\041\036\042\037\043\100\044\072" +
    "\045\102\047\114\052\207\060\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\166\045\247\001\001" +
    "\000\004\013\250\001\001\000\004\010\257\001\001\000" +
    "\002\001\001\000\004\012\253\001\001\000\002\001\001" +
    "\000\004\012\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\266\001\001\000\002\001\001\000\004\010\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\301\001\001\000" +
    "\050\017\132\025\302\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\001\001\000\002\001\001\000\004\054\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\017" +
    "\132\025\140\026\047\027\103\030\040\031\060\032\017" +
    "\033\073\034\111\035\051\036\046\037\106\040\077\041" +
    "\036\042\037\043\100\044\072\045\102\047\114\052\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\017" +
    "\132\025\140\026\047\027\103\030\040\031\060\032\017" +
    "\033\073\034\111\035\051\036\046\037\106\040\077\041" +
    "\036\042\037\043\100\044\072\045\102\047\114\052\315" +
    "\001\001\000\002\001\001\000\004\010\317\001\001\000" +
    "\002\001\001\000\004\010\321\001\001\000\002\001\001" +
    "\000\004\010\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\017\132\022\327\023\112" +
    "\024\015\025\045\026\047\027\103\030\040\031\060\032" +
    "\017\033\073\034\111\035\051\036\046\037\106\040\077" +
    "\041\036\042\037\043\100\044\072\045\102\047\114\052" +
    "\105\001\001\000\002\001\001\000\016\017\132\033\331" +
    "\034\111\035\051\045\102\047\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\146" +
    "\011\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\344\001\001\000\002\001\001\000" +
    "\050\017\132\025\352\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\345\050\353\001\001" +
    "\000\002\001\001\000\054\017\132\025\140\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\051\355\052\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\017\132\022\360\023" +
    "\112\024\015\025\045\026\047\027\103\030\040\031\060" +
    "\032\017\033\073\034\111\035\051\036\046\037\106\040" +
    "\077\041\036\042\037\043\100\044\072\045\102\047\114" +
    "\052\105\001\001\000\002\001\001\000\016\017\132\033" +
    "\362\034\111\035\051\045\102\047\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\017\132" +
    "\025\140\026\047\027\103\030\040\031\060\032\017\033" +
    "\073\034\111\035\051\036\046\037\106\040\077\041\036" +
    "\042\037\043\100\044\072\045\102\047\114\052\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\017\132\022\375\023\112\024\015\025\045\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\052\105\001\001\000\002" +
    "\001\001\000\016\017\132\033\377\034\111\035\051\045" +
    "\102\047\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0105\001\001\000\004\010" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\166\045\u0108\055\u0109\001\001\000" +
    "\004\056\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\017\132\022\u010c\023\112\024\015\025\045\026" +
    "\047\027\103\030\040\031\060\032\017\033\073\034\111" +
    "\035\051\036\046\037\106\040\077\041\036\042\037\043" +
    "\100\044\072\045\102\047\114\052\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\166\045\u0110\001" +
    "\001\000\002\001\001\000\004\056\u0111\001\001\000\002" +
    "\001\001\000\004\010\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\166\045\u0108\055\u0116\001\001" +
    "\000\002\001\001\000\052\017\132\025\140\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\052\u0118\001\001\000\002\001\001" +
    "\000\052\017\132\025\140\026\047\027\103\030\040\031" +
    "\060\032\017\033\073\034\111\035\051\036\046\037\106" +
    "\040\077\041\036\042\037\043\100\044\072\045\102\047" +
    "\114\052\u011a\001\001\000\002\001\001\000\052\017\132" +
    "\025\140\026\047\027\103\030\040\031\060\032\017\033" +
    "\073\034\111\035\051\036\046\037\106\040\077\041\036" +
    "\042\037\043\100\044\072\045\102\047\114\052\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\u0139\021\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\u0139" +
    "\021\u013d\001\001\000\002\001\001\000\004\020\u013f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u014d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0150\001\001\000\002\001" +
    "\001\000\004\020\u0152\001\001\000\002\001\001\000\060" +
    "\017\132\022\u0154\023\112\024\015\025\045\026\047\027" +
    "\103\030\040\031\060\032\017\033\073\034\111\035\051" +
    "\036\046\037\106\040\077\041\036\042\037\043\100\044" +
    "\072\045\102\047\114\052\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0158\001" +
    "\001\000\002\001\001\000\060\017\132\022\u015a\023\112" +
    "\024\015\025\045\026\047\027\103\030\040\031\060\032" +
    "\017\033\073\034\111\035\051\036\046\037\106\040\077" +
    "\041\036\042\037\043\100\044\072\045\102\047\114\052" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u015d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0139\021\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u0139\021\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\017\132\025\140" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\u016d\001\001\000" +
    "\004\010\u016e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0172\001\001\000\002\001" +
    "\001\000\004\010\u0174\001\001\000\002\001\001\000\006" +
    "\007\146\011\u0176\001\001\000\002\001\001\000\006\007" +
    "\146\011\u0178\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0184\001\001\000\002\001\001\000\004\010\u0186" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\166\045\u0108\055\u0189\001\001\000\002\001\001\000\052" +
    "\017\132\025\140\026\047\027\103\030\040\031\060\032" +
    "\017\033\073\034\111\035\051\036\046\037\106\040\077" +
    "\041\036\042\037\043\100\044\072\045\102\047\114\052" +
    "\u018b\001\001\000\002\001\001\000\052\017\132\025\140" +
    "\026\047\027\103\030\040\031\060\032\017\033\073\034" +
    "\111\035\051\036\046\037\106\040\077\041\036\042\037" +
    "\043\100\044\072\045\102\047\114\052\u018d\001\001\000" +
    "\002\001\001\000\052\017\132\025\140\026\047\027\103" +
    "\030\040\031\060\032\017\033\073\034\111\035\051\036" +
    "\046\037\106\040\077\041\036\042\037\043\100\044\072" +
    "\045\102\047\114\052\u0190\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



String command;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= wffNameCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= snepslogCommand 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = sc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= wffCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wffNameCommand ::= wffName terminalPunctuation 
            {
              String RESULT =null;
		 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffNameCommand",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wffCommand ::= wff terminalPunctuation 
            {
              String RESULT =null;
		 
				
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // snepslogCommand ::= ACTIVATE wff optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // snepslogCommand ::= ACTIVATE BANG wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 
                		RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // snepslogCommand ::= ADD_TO_CONTEXT snepslogSymbol termSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // snepslogCommand ::= ASK wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // snepslogCommand ::= ASKIFNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // snepslogCommand ::= ASKWH wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // snepslogCommand ::= ASKWHNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // snepslogCommand ::= BELIEFS_ABOUT pTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // snepslogCommand ::= BR_MODE optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // snepslogCommand ::= BR_MODE AUTO optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // snepslogCommand ::= BR_MODE MANUAL optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // snepslogCommand ::= CLEAR_INFER optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // snepslogCommand ::= CLEARKB optionalDot 
            {
              String RESULT =null;
		 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // snepslogCommand ::= COPYRIGHT optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "copyright statement goes here.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER snepslogSymbol identifiers_list optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER snepslogSymbol identifiers_list STRING_LIT optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // snepslogCommand ::= DEFINE_PATH IDENTIFIER path optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // snepslogCommand ::= DEMO demoFirstOptionalOptionSet demoSecondOptionalOptionSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // snepslogCommand ::= DESCRIBE_CONTEXT optionalSnepslogSymbol optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // snepslogCommand ::= DESCRIBE_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // snepslogCommand ::= EXPERT optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // snepslogCommand ::= LIST_ASSERTED_WFFS optionalSnepslogSymbol optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // snepslogCommand ::= LIST_CONTEXTS optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // snepslogCommand ::= LIST_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // snepslogCommand ::= LOAD FILEPATH optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // snepslogCommand ::= NORMAL optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // snepslogCommand ::= PERFORM atomicTerm optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // snepslogCommand ::= REMOVE_FROM_CONTEXT snepslogSymbol pTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // snepslogCommand ::= SET_CONTEXT snepslogSymbol optionalPTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // snepslogCommand ::= SET_DEFAULT_CONTEXT snepslogSymbol 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // snepslogCommand ::= SET_MODE_1 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // snepslogCommand ::= SET_MODE_2 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // snepslogCommand ::= SET_MODE_3 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // snepslogCommand ::= SHOW optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // snepslogCommand ::= TRACE optionalSnepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // snepslogCommand ::= UNDEFINE_PATH IDENTIFIER optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // snepslogCommand ::= UNLABELED optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // snepslogCommand ::= UNTRACE optionalSnepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optionalSnepslogFunction ::= INFERENCE 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionalSnepslogFunction ::= ACTING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionalSnepslogFunction ::= TRANSLATION 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optionalSnepslogFunction ::= PARSING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optionalSnepslogFunction ::= 
            {
              String RESULT =null;
		
		     	
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // wff ::= infixedTerm 
            {
              Node RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // wff ::= entailment 
            {
              Node RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // wff ::= prefixedTerm 
            {
              Node RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // infixedTerm ::= prefixedTerm infixedTerms 
            {
              Node RESULT =null;
		
    
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // infixedTerms ::= andOrEquality prefixedTerm infixedTerms 
            {
              ArrayList<Pair<String,Node>> RESULT =null;
		
              
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerms",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // infixedTerms ::= andOrEquality prefixedTerm 
            {
              ArrayList<Pair<String,Node>> RESULT =null;
		
                   
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerms",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // andOrEquality ::= AND 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // andOrEquality ::= OR 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // andOrEquality ::= EQUALITY 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // entailment ::= termSet IMPLICATION termSet 
            {
              Node RESULT =null;
		
    
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // entailment ::= termSet OR_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // entailment ::= termSet AND_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // entailment ::= termSet NUMERICAL_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pTermSet ::= termSet 
            {
              ArrayList<Node> RESULT =null;
		
    
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pTermSet",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termSet ::= prefixedTerm 
            {
              ArrayList<Node> RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termSet ::= OPEN_CURLY termSequence CLOSE_CURLY 
            {
              ArrayList<Node> RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termSequence ::= prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSequence",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prefixedTerms ::= COMMA prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		
			
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prefixedTerms ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prefixedTerm ::= negatedTerm 
            {
              Node RESULT =null;
		
			
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prefixedTerm ::= andorTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixedTerm ::= setTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixedTerm ::= threshTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixedTerm ::= allTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prefixedTerm ::= atomicTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixedTerm ::= ifdoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixedTerm ::= whendoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixedTerm ::= wheneverdoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prefixedTerm ::= actplanTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prefixedTerm ::= effectTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prefixedTerm ::= goalplanTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prefixedTerm ::= preconditionTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // negatedTerm ::= NOT atomicTerm 
            {
              Node RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negatedTerm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
			
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andorTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // setTerm ::= AND termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // setTerm ::= OR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // setTerm ::= NAND termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // setTerm ::= NOR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // setTerm ::= XOR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // setTerm ::= IFF termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
             
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // threshTerm ::= THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
             
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // atomicTerm ::= wffName 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // atomicTerm ::= qvar 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atomicTerm ::= IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atomicTerm ::= IDENTIFIER COLON IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // atomicTerm ::= withsomeTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // atomicTerm ::= withallTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // atomicTerm ::= qvar OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atomicTerm ::= snepslogSymbol OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomicTerm ::= OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdoTerm",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whendoTerm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wheneverdoTerm",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actplanTerm",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("effectTerm",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goalplanTerm",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preconditionTerm",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termSetSequence ::= termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSetSequence",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // termSets ::= COMMA termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // termSets ::= 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // symbolSequence ::= snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolSequence",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // snepslogSymbols ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // wffName ::= WFF INT_LIT 
            {
              String RESULT =null;
		
			
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffName",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // qvar ::= QUESTION_MARK snepslogSymbol 
            {
              Node RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qvar",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // snepslogSymbol ::= wffName 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // snepslogSymbol ::= IDENTIFIER 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminalPunctuation ::= DOT 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminalPunctuation ::= BANG 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminalPunctuation ::= QUESTION_MARK QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // terminalPunctuation ::= QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optionalDot ::= DOT 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optionalDot ::= 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optionalTerminalPunctuation ::= terminalPunctuation 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // optionalTerminalPunctuation ::= 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optionalSnepslogSymbol ::= snepslogSymbol 
            {
              Node RESULT =null;
		
			
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogSymbol",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optionalSnepslogSymbol ::= 
            {
              Node RESULT =null;
		
			
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSnepslogSymbol",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optionalPTermSet ::= pTermSet 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optionalPTermSet ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // identifiers ::= IDENTIFIER identifiers 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // identifiers ::= 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN 
            {
              String RESULT =null;
		
                 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // demoFirstOptionalOptionSet ::= FILEPATH 
            {
              String RESULT =null;
		
						  
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // demoFirstOptionalOptionSet ::= QUESTION_MARK 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // demoFirstOptionalOptionSet ::= INT_LIT 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // demoFirstOptionalOptionSet ::= 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // demoSecondOptionalOptionSet ::= OPTION_T 
            {
              String RESULT =null;
		
						  
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // demoSecondOptionalOptionSet ::= OPTION_B 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // demoSecondOptionalOptionSet ::= OPTION_BV 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // demoSecondOptionalOptionSet ::= OPTION_A 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // demoSecondOptionalOptionSet ::= OPTION_AV 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // demoSecondOptionalOptionSet ::= OPTION_N 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // demoSecondOptionalOptionSet ::= 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // path ::= BANGPATH 
            {
              Path RESULT =null;
		
     
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // path ::= EMPTYPATH 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // path ::= FUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // path ::= BUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // path ::= CFRESFUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // path ::= CFRESBUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // path ::= KPLUS OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // path ::= KSTAR OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // path ::= AND OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // path ::= AND OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // path ::= OR OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // path ::= OR OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // path ::= COMPOSE OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // path ::= COMPOSE OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // path ::= CONVERSE OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // path ::= IRREFLEXIVE_RESTRICT OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // path ::= DOMAIN_RESTRICT OPEN_PARAN path OPEN_PARAN wff CLOSE_PARAN COMMA path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // path ::= RANGE_RESTRICT OPEN_PARAN path COMMA path OPEN_PARAN wff CLOSE_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // paths ::= path COMMA paths 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // paths ::= path 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
