
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import sneps.network.Node;
import sneps.network.paths.Path;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\010\000" +
    "\002\005\006\000\002\005\004\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\046\003\000\002\047\003\000\002\047\005\000\002\050" +
    "\004\000\002\051\005\000\002\051\002\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\004" +
    "\000\002\026\011\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\030\011\000\002\030\007\000\002\035" +
    "\010\000\002\036\010\000\002\037\010\000\002\040\010" +
    "\000\002\041\010\000\002\042\010\000\002\043\010\000" +
    "\002\031\011\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\006\000\002\032\006\000\002\032\005" +
    "\000\002\033\014\000\002\033\012\000\002\034\014\000" +
    "\002\034\012\000\002\055\004\000\002\056\005\000\002" +
    "\056\002\000\002\052\004\000\002\053\005\000\002\053" +
    "\002\000\002\015\004\000\002\045\004\000\002\044\003" +
    "\000\002\044\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\006\000\002" +
    "\007\007\000\002\010\003\000\002\010\002\000\002\016" +
    "\003\000\002\016\002\000\002\011\003\000\002\011\002" +
    "\000\002\054\003\000\002\054\002\000\002\012\004\000" +
    "\002\012\002\000\002\013\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\006\000\002\017\006\000\002\017" +
    "\010\000\002\017\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\005\000\002\017\006\000" +
    "\002\017\005\000\002\017\006\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\013\000\002\017" +
    "\013\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\170\004\124\007\025\010\020\011\060\012" +
    "\015\013\125\014\022\015\034\020\005\021\057\022\121" +
    "\023\102\024\026\025\023\026\012\032\116\033\117\034" +
    "\031\035\045\036\110\037\014\040\052\041\067\042\011" +
    "\043\071\044\046\045\123\046\076\047\066\050\065\051" +
    "\063\052\072\053\013\054\006\055\030\056\007\066\036" +
    "\067\043\070\122\071\105\072\127\073\037\074\130\075" +
    "\126\076\073\077\032\102\055\104\077\106\004\107\027" +
    "\110\056\111\035\112\114\113\044\114\111\115\131\116" +
    "\064\117\120\140\010\001\002\000\004\102\u0183\001\002" +
    "\000\006\002\uff7e\006\163\001\002\000\004\140\u0180\001" +
    "\002\000\010\057\u0171\060\u016f\061\u0170\001\002\000\042" +
    "\002\uff9a\005\uff9a\006\uff9a\032\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\070\uff9a\071\uff9a\100\uff9a\101\u017c\102\uff86" +
    "\103\uff9a\105\uff9a\141\uff9a\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\140\u0173\001\002\000\010\057\u0171" +
    "\060\u016f\061\u0170\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\062\032\116\066\036\067\043\070\122\071\105" +
    "\072\127\073\037\074\130\075\126\076\073\077\032\102" +
    "\055\104\077\106\004\107\027\110\056\111\035\112\114" +
    "\113\044\114\111\115\131\116\064\117\120\140\010\001" +
    "\002\000\004\002\001\001\002\000\016\002\uffcb\005\uffcb" +
    "\006\uffcb\032\uffcb\100\uffcb\103\uffcb\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\036\002" +
    "\uffb0\005\uffb0\006\uffb0\032\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\070\uffb0\071\uffb0\100\uffb0\103\uffb0\105\uffb0\141" +
    "\uffb0\001\002\000\062\032\116\066\036\067\043\070\122" +
    "\071\105\072\127\073\037\074\130\075\126\076\073\077" +
    "\032\102\055\104\077\106\004\107\027\110\056\111\035" +
    "\112\114\113\044\114\111\115\131\116\064\117\120\140" +
    "\010\001\002\000\004\140\u0164\001\002\000\010\005\145" +
    "\006\150\032\146\001\002\000\004\140\u0160\001\002\000" +
    "\004\140\u0113\001\002\000\004\102\u0109\001\002\000\006" +
    "\002\uff7e\006\163\001\002\000\066\002\uff78\006\uff78\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\004\102" +
    "\373\001\002\000\030\005\145\006\150\032\146\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\070\uff9c\071\uff9c\102\uff87\141" +
    "\uff9c\001\002\000\012\002\uff7e\006\163\016\367\017\366" +
    "\001\002\000\004\102\360\001\002\000\016\032\116\102" +
    "\055\106\004\107\027\110\056\140\010\001\002\000\062" +
    "\032\116\066\036\067\043\070\122\071\105\072\127\073" +
    "\037\074\130\075\126\076\073\077\032\102\055\104\077" +
    "\106\004\107\027\110\056\111\035\112\114\113\044\114" +
    "\111\115\131\116\064\117\120\140\010\001\002\000\036" +
    "\002\uffb4\005\uffb4\006\uffb4\032\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\070\uffb4\071\uffb4\100\uffb4\103\uffb4\105\uffb4" +
    "\141\uffb4\001\002\000\036\002\uffb3\005\uffb3\006\uffb3\032" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\070\uffb3\071\uffb3" +
    "\100\uffb3\103\uffb3\105\uffb3\141\uffb3\001\002\000\036\002" +
    "\uffb9\005\uffb9\006\uffb9\032\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\070\uffb9\071\uffb9\100\uffb9\103\uffb9\105\uffb9\141" +
    "\uffb9\001\002\000\004\102\350\001\002\000\004\102\343" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\004\140" +
    "\340\001\002\000\034\002\uffc9\005\uffc9\006\uffc9\032\uffc9" +
    "\062\333\063\uffc0\064\uffc0\065\uffc0\070\334\071\335\100" +
    "\uffc9\103\uffc9\141\uffc0\001\002\000\036\002\uffb7\005\uffb7" +
    "\006\uffb7\032\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\070" +
    "\uffb7\071\uffb7\100\uffb7\103\uffb7\105\uffb7\141\uffb7\001\002" +
    "\000\036\002\uffbb\005\uffbb\006\uffbb\032\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\070\uffbb\071\uffbb\100\uffbb\103\uffbb" +
    "\105\uffbb\141\uffbb\001\002\000\066\002\uff78\006\uff78\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\036\002" +
    "\uff97\005\uff97\006\uff97\032\uff97\062\uff97\063\uff97\064\uff97" +
    "\065\uff97\070\uff97\071\uff97\100\uff97\103\uff97\105\uff97\141" +
    "\uff97\001\002\000\004\002\327\001\002\000\062\032\116" +
    "\066\036\067\043\070\122\071\105\072\127\073\037\074" +
    "\130\075\126\076\073\077\032\102\055\104\077\106\004" +
    "\107\027\110\056\111\035\112\114\113\044\114\111\115" +
    "\131\116\064\117\120\140\010\001\002\000\004\137\324" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\004\002" +
    "\ufffe\001\002\000\036\002\uffb8\005\uffb8\006\uffb8\032\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8\100" +
    "\uffb8\103\uffb8\105\uffb8\141\uffb8\001\002\000\006\002\uff7e" +
    "\006\163\001\002\000\004\102\313\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\006\002\uff7e\006\163\001\002" +
    "\000\004\135\307\001\002\000\004\002\uffff\001\002\000" +
    "\016\032\116\102\055\106\004\107\027\110\056\140\010" +
    "\001\002\000\066\002\uff78\006\uff78\032\116\066\036\067" +
    "\043\070\122\071\105\072\127\073\037\074\130\075\126" +
    "\076\073\077\032\102\055\104\077\106\004\107\027\110" +
    "\056\111\035\112\114\113\044\114\111\115\131\116\064" +
    "\117\120\140\010\001\002\000\004\102\273\001\002\000" +
    "\036\002\uffb1\005\uffb1\006\uffb1\032\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\065\uffb1\070\uffb1\071\uffb1\100\uffb1\103\uffb1\105" +
    "\uffb1\141\uffb1\001\002\000\036\002\uffaf\005\uffaf\006\uffaf" +
    "\032\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\070\uffaf\071" +
    "\uffaf\100\uffaf\103\uffaf\105\uffaf\141\uffaf\001\002\000\004" +
    "\140\272\001\002\000\060\032\116\066\036\067\043\070" +
    "\122\071\105\072\127\073\037\074\130\075\126\076\073" +
    "\077\032\102\055\106\004\107\027\110\056\111\035\112" +
    "\114\113\044\114\111\115\131\116\064\117\120\140\010" +
    "\001\002\000\036\002\uffb5\005\uffb5\006\uffb5\032\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5\100\uffb5" +
    "\103\uffb5\105\uffb5\141\uffb5\001\002\000\036\002\uffb2\005" +
    "\uffb2\006\uffb2\032\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\070\uffb2\071\uffb2\100\uffb2\103\uffb2\105\uffb2\141\uffb2\001" +
    "\002\000\004\140\247\001\002\000\004\102\244\001\002" +
    "\000\036\002\uffba\005\uffba\006\uffba\032\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\070\uffba\071\uffba\100\uffba\103\uffba" +
    "\105\uffba\141\uffba\001\002\000\062\032\116\066\036\067" +
    "\043\070\122\071\105\072\127\073\037\074\130\075\126" +
    "\076\073\077\032\102\055\104\077\106\004\107\027\110" +
    "\056\111\035\112\114\113\044\114\111\115\131\116\064" +
    "\117\120\140\010\001\002\000\012\063\234\064\233\065" +
    "\235\141\236\001\002\000\036\002\uffb6\005\uffb6\006\uffb6" +
    "\032\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6\071" +
    "\uffb6\100\uffb6\103\uffb6\105\uffb6\141\uffb6\001\002\000\010" +
    "\002\uff7c\006\uff7c\140\202\001\002\000\004\102\224\001" +
    "\002\000\036\002\uff98\005\uff98\006\uff98\032\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\070\uff98\071\uff98\100\uff98\103" +
    "\uff98\105\uff98\141\uff98\001\002\000\016\002\uffcc\005\uffcc" +
    "\006\uffcc\032\uffcc\100\uffcc\103\uffcc\001\002\000\004\102" +
    "\217\001\002\000\040\002\uff9b\005\uff9b\006\uff9b\032\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\070\uff9b\071\uff9b\100" +
    "\uff9b\102\207\103\uff9b\105\uff9b\141\uff9b\001\002\000\006" +
    "\110\056\140\206\001\002\000\010\002\uff7c\006\uff7c\140" +
    "\202\001\002\000\004\102\174\001\002\000\006\002\uff7e" +
    "\006\163\001\002\000\062\032\116\066\036\067\043\070" +
    "\122\071\105\072\127\073\037\074\130\075\126\076\073" +
    "\077\032\102\055\104\077\106\004\107\027\110\056\111" +
    "\035\112\114\113\044\114\111\115\131\116\064\117\120" +
    "\140\010\001\002\000\004\140\166\001\002\000\064\005" +
    "\160\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\062\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\062\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\062\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\062\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\004\102\132\001\002\000\016\032\116\102\055\106\004" +
    "\107\027\110\056\140\010\001\002\000\040\002\uff9c\005" +
    "\uff9c\006\uff9c\032\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\070\uff9c\071\uff9c\100\uff9c\102\uff87\103\uff9c\105\uff9c\141" +
    "\uff9c\001\002\000\004\100\135\001\002\000\062\032\116" +
    "\066\036\067\043\070\122\071\105\072\127\073\037\074" +
    "\130\075\126\076\073\077\032\102\055\104\077\106\004" +
    "\107\027\110\056\111\035\112\114\113\044\114\111\115" +
    "\131\116\064\117\120\140\010\001\002\000\004\103\137" +
    "\001\002\000\036\002\uffa0\005\uffa0\006\uffa0\032\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\070\uffa0\071\uffa0\100\uffa0" +
    "\103\uffa0\105\uffa0\141\uffa0\001\002\000\036\002\uffa8\005" +
    "\uffa8\006\uffa8\032\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\070\uffa8\071\uffa8\100\uffa8\103\uffa8\105\uffa8\141\uffa8\001" +
    "\002\000\036\002\uffc0\005\uffc0\006\uffc0\032\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\070\uffc0\071\uffc0\100\uffc0\103" +
    "\uffc0\105\uffc0\141\uffc0\001\002\000\036\002\uffaa\005\uffaa" +
    "\006\uffaa\032\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\070" +
    "\uffaa\071\uffaa\100\uffaa\103\uffaa\105\uffaa\141\uffaa\001\002" +
    "\000\036\002\uffa7\005\uffa7\006\uffa7\032\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\070\uffa7\071\uffa7\100\uffa7\103\uffa7" +
    "\105\uffa7\141\uffa7\001\002\000\012\002\uff7a\005\145\006" +
    "\150\032\146\001\002\000\004\002\uff84\001\002\000\010" +
    "\002\uff82\032\152\102\153\001\002\000\004\002\uff7b\001" +
    "\002\000\004\002\uff85\001\002\000\004\002\ufff5\001\002" +
    "\000\004\002\uff83\001\002\000\004\137\154\001\002\000" +
    "\006\103\155\137\156\001\002\000\004\002\uff81\001\002" +
    "\000\004\103\157\001\002\000\004\002\uff80\001\002\000" +
    "\062\032\116\066\036\067\043\070\122\071\105\072\127" +
    "\073\037\074\130\075\126\076\073\077\032\102\055\104" +
    "\077\106\004\107\027\110\056\111\035\112\114\113\044" +
    "\114\111\115\131\116\064\117\120\140\010\001\002\000" +
    "\006\002\uff7e\006\163\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\uff7f\001\002\000\012\002\uff7a\005\145\006" +
    "\150\032\146\001\002\000\004\002\ufffa\001\002\000\064" +
    "\002\uff78\032\116\066\036\067\043\070\122\071\105\072" +
    "\127\073\037\074\130\075\126\076\073\077\032\102\055" +
    "\104\077\106\004\107\027\110\056\111\035\112\114\113" +
    "\044\114\111\115\131\116\064\117\120\140\010\001\002" +
    "\000\006\002\uffc1\006\uffc1\001\002\000\004\002\uffd9\001" +
    "\002\000\006\002\uff79\006\uff79\001\002\000\036\002\uffac" +
    "\005\uffac\006\uffac\032\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\070\uffac\071\uffac\100\uffac\103\uffac\105\uffac\141\uffac" +
    "\001\002\000\004\002\uffee\001\002\000\016\032\116\102" +
    "\055\106\004\107\027\110\056\140\010\001\002\000\004" +
    "\100\176\001\002\000\062\032\116\066\036\067\043\070" +
    "\122\071\105\072\127\073\037\074\130\075\126\076\073" +
    "\077\032\102\055\104\077\106\004\107\027\110\056\111" +
    "\035\112\114\113\044\114\111\115\131\116\064\117\120" +
    "\140\010\001\002\000\004\103\200\001\002\000\036\002" +
    "\uff9e\005\uff9e\006\uff9e\032\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\070\uff9e\071\uff9e\100\uff9e\103\uff9e\105\uff9e\141" +
    "\uff9e\001\002\000\006\002\uff7e\006\163\001\002\000\006" +
    "\002\uff7d\006\uff7d\001\002\000\004\002\uffe3\001\002\000" +
    "\040\002\uff88\005\uff88\006\uff88\032\uff88\062\uff88\063\uff88" +
    "\064\uff88\065\uff88\070\uff88\071\uff88\100\uff88\102\uff88\103" +
    "\uff88\105\uff88\141\uff88\001\002\000\040\002\uff87\005\uff87" +
    "\006\uff87\032\uff87\062\uff87\063\uff87\064\uff87\065\uff87\070" +
    "\uff87\071\uff87\100\uff87\102\uff87\103\uff87\105\uff87\141\uff87" +
    "\001\002\000\040\002\uff86\005\uff86\006\uff86\032\uff86\062" +
    "\uff86\063\uff86\064\uff86\065\uff86\070\uff86\071\uff86\100\uff86" +
    "\102\uff86\103\uff86\105\uff86\141\uff86\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\006\100" +
    "\213\103\uff8d\001\002\000\004\103\212\001\002\000\036" +
    "\002\uff96\005\uff96\006\uff96\032\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\070\uff96\071\uff96\100\uff96\103\uff96\105\uff96" +
    "\141\uff96\001\002\000\062\032\116\066\036\067\043\070" +
    "\122\071\105\072\127\073\037\074\130\075\126\076\073" +
    "\077\032\102\055\104\077\106\004\107\027\110\056\111" +
    "\035\112\114\113\044\114\111\115\131\116\064\117\120" +
    "\140\010\001\002\000\004\103\uff8f\001\002\000\006\100" +
    "\213\103\uff8d\001\002\000\004\103\uff8e\001\002\000\062" +
    "\032\116\066\036\067\043\070\122\071\105\072\127\073" +
    "\037\074\130\075\126\076\073\077\032\102\055\104\077" +
    "\106\004\107\027\110\056\111\035\112\114\113\044\114" +
    "\111\115\131\116\064\117\120\140\010\001\002\000\004" +
    "\100\221\001\002\000\016\032\116\102\055\106\004\107" +
    "\027\110\056\140\010\001\002\000\004\103\223\001\002" +
    "\000\036\002\uffa3\005\uffa3\006\uffa3\032\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\070\uffa3\071\uffa3\100\uffa3\103\uffa3" +
    "\105\uffa3\141\uffa3\001\002\000\016\032\116\102\055\106" +
    "\004\107\027\110\056\140\010\001\002\000\004\100\226" +
    "\001\002\000\016\032\116\102\055\106\004\107\027\110" +
    "\056\140\010\001\002\000\004\103\230\001\002\000\036" +
    "\002\uffa1\005\uffa1\006\uffa1\032\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\070\uffa1\071\uffa1\100\uffa1\103\uffa1\105\uffa1" +
    "\141\uffa1\001\002\000\006\002\uff7e\006\163\001\002\000" +
    "\004\002\uffe0\001\002\000\062\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\104\077\106\004\107\027\110\056" +
    "\111\035\112\114\113\044\114\111\115\131\116\064\117" +
    "\120\140\010\001\002\000\062\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\104\077\106\004\107\027\110\056" +
    "\111\035\112\114\113\044\114\111\115\131\116\064\117" +
    "\120\140\010\001\002\000\062\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\104\077\106\004\107\027\110\056" +
    "\111\035\112\114\113\044\114\111\115\131\116\064\117" +
    "\120\140\010\001\002\000\062\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\104\077\106\004\107\027\110\056" +
    "\111\035\112\114\113\044\114\111\115\131\116\064\117" +
    "\120\140\010\001\002\000\016\002\uffc2\005\uffc2\006\uffc2" +
    "\032\uffc2\100\uffc2\103\uffc2\001\002\000\016\002\uffc3\005" +
    "\uffc3\006\uffc3\032\uffc3\100\uffc3\103\uffc3\001\002\000\016" +
    "\002\uffc5\005\uffc5\006\uffc5\032\uffc5\100\uffc5\103\uffc5\001" +
    "\002\000\016\002\uffc4\005\uffc4\006\uffc4\032\uffc4\100\uffc4" +
    "\103\uffc4\001\002\000\036\002\uffab\005\uffab\006\uffab\032" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\070\uffab\071\uffab" +
    "\100\uffab\103\uffab\105\uffab\141\uffab\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\004\103" +
    "\246\001\002\000\036\002\uff95\005\uff95\006\uff95\032\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\070\uff95\071\uff95\100" +
    "\uff95\103\uff95\105\uff95\141\uff95\001\002\000\004\140\250" +
    "\001\002\000\004\102\252\001\002\000\010\002\uff7e\006" +
    "\163\136\261\001\002\000\004\140\253\001\002\000\006" +
    "\103\uff76\140\255\001\002\000\004\103\257\001\002\000" +
    "\006\103\uff76\140\255\001\002\000\004\103\uff77\001\002" +
    "\000\010\002\uff75\006\uff75\136\uff75\001\002\000\004\002" +
    "\uffed\001\002\000\006\002\uff7e\006\163\001\002\000\004" +
    "\002\uffec\001\002\000\004\105\271\001\002\000\006\100" +
    "\265\105\uffbc\001\002\000\060\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\106\004\107\027\110\056\111\035" +
    "\112\114\113\044\114\111\115\131\116\064\117\120\140" +
    "\010\001\002\000\004\105\uffbe\001\002\000\006\100\265" +
    "\105\uffbc\001\002\000\004\105\uffbd\001\002\000\036\002" +
    "\uffbf\005\uffbf\006\uffbf\032\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\070\uffbf\071\uffbf\100\uffbf\103\uffbf\105\uffbf\141" +
    "\uffbf\001\002\000\004\002\uffd8\001\002\000\004\137\274" +
    "\001\002\000\006\100\275\103\276\001\002\000\004\137" +
    "\300\001\002\000\062\032\116\066\036\067\043\070\122" +
    "\071\105\072\127\073\037\074\130\075\126\076\073\077" +
    "\032\102\055\104\077\106\004\107\027\110\056\111\035" +
    "\112\114\113\044\114\111\115\131\116\064\117\120\140" +
    "\010\001\002\000\036\002\uffa5\005\uffa5\006\uffa5\032\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\071\uffa5\100" +
    "\uffa5\103\uffa5\105\uffa5\141\uffa5\001\002\000\004\103\301" +
    "\001\002\000\062\032\116\066\036\067\043\070\122\071" +
    "\105\072\127\073\037\074\130\075\126\076\073\077\032" +
    "\102\055\104\077\106\004\107\027\110\056\111\035\112" +
    "\114\113\044\114\111\115\131\116\064\117\120\140\010" +
    "\001\002\000\036\002\uffa6\005\uffa6\006\uffa6\032\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\070\uffa6\071\uffa6\100\uffa6" +
    "\103\uffa6\105\uffa6\141\uffa6\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\uffd4\001\002\000\006\002\uff7e" +
    "\006\163\001\002\000\004\002\uffdb\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\002\uffdd\001\002\000\004" +
    "\002\uffd7\001\002\000\004\002\uffd6\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\004\100" +
    "\315\001\002\000\016\032\116\102\055\106\004\107\027" +
    "\110\056\140\010\001\002\000\004\103\317\001\002\000" +
    "\036\002\uff9f\005\uff9f\006\uff9f\032\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\065\uff9f\070\uff9f\071\uff9f\100\uff9f\103\uff9f\105" +
    "\uff9f\141\uff9f\001\002\000\004\002\uffd5\001\002\000\012" +
    "\002\uff7a\005\145\006\150\032\146\001\002\000\004\002" +
    "\ufff7\001\002\000\004\002\uffef\001\002\000\040\002\uff89" +
    "\005\uff89\006\uff89\032\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\070\uff89\071\uff89\100\uff89\102\uff89\103\uff89\105\uff89" +
    "\141\uff89\001\002\000\004\103\326\001\002\000\036\002" +
    "\uff94\005\uff94\006\uff94\032\uff94\062\uff94\063\uff94\064\uff94" +
    "\065\uff94\070\uff94\071\uff94\100\uff94\103\uff94\105\uff94\141" +
    "\uff94\001\002\000\004\002\000\001\002\000\006\002\uff7e" +
    "\006\163\001\002\000\004\002\uffde\001\002\000\060\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\106\004\107" +
    "\027\110\056\111\035\112\114\113\044\114\111\115\131" +
    "\116\064\117\120\140\010\001\002\000\060\032\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\102\uffc6\106\uffc6\107\uffc6\110" +
    "\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6" +
    "\117\uffc6\140\uffc6\001\002\000\060\032\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\102\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8" +
    "\140\uffc8\001\002\000\060\032\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\102\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7\140\uffc7" +
    "\001\002\000\024\002\uffc9\005\uffc9\006\uffc9\032\uffc9\062" +
    "\333\070\334\071\335\100\uffc9\103\uffc9\001\002\000\016" +
    "\002\uffca\005\uffca\006\uffca\032\uffca\100\uffca\103\uffca\001" +
    "\002\000\062\032\116\066\036\067\043\070\122\071\105" +
    "\072\127\073\037\074\130\075\126\076\073\077\032\102" +
    "\055\104\077\106\004\107\027\110\056\111\035\112\114" +
    "\113\044\114\111\115\131\116\064\117\120\140\010\001" +
    "\002\000\004\002\uffda\001\002\000\004\002\uffe1\001\002" +
    "\000\062\032\116\066\036\067\043\070\122\071\105\072" +
    "\127\073\037\074\130\075\126\076\073\077\032\102\055" +
    "\104\077\106\004\107\027\110\056\111\035\112\114\113" +
    "\044\114\111\115\131\116\064\117\120\140\010\001\002" +
    "\000\004\100\345\001\002\000\016\032\116\102\055\106" +
    "\004\107\027\110\056\140\010\001\002\000\004\103\347" +
    "\001\002\000\036\002\uffa2\005\uffa2\006\uffa2\032\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\070\uffa2\071\uffa2\100\uffa2" +
    "\103\uffa2\105\uffa2\141\uffa2\001\002\000\004\137\351\001" +
    "\002\000\004\100\352\001\002\000\004\137\353\001\002" +
    "\000\004\103\354\001\002\000\062\032\116\066\036\067" +
    "\043\070\122\071\105\072\127\073\037\074\130\075\126" +
    "\076\073\077\032\102\055\104\077\106\004\107\027\110" +
    "\056\111\035\112\114\113\044\114\111\115\131\116\064" +
    "\117\120\140\010\001\002\000\036\002\uffad\005\uffad\006" +
    "\uffad\032\uffad\062\uffad\063\uffad\064\uffad\065\uffad\070\uffad" +
    "\071\uffad\100\uffad\103\uffad\105\uffad\141\uffad\001\002\000" +
    "\036\002\uffa9\005\uffa9\006\uffa9\032\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\070\uffa9\071\uffa9\100\uffa9\103\uffa9\105" +
    "\uffa9\141\uffa9\001\002\000\036\002\uffae\005\uffae\006\uffae" +
    "\032\uffae\062\uffae\063\uffae\064\uffae\065\uffae\070\uffae\071" +
    "\uffae\100\uffae\103\uffae\105\uffae\141\uffae\001\002\000\062" +
    "\032\116\066\036\067\043\070\122\071\105\072\127\073" +
    "\037\074\130\075\126\076\073\077\032\102\055\104\077" +
    "\106\004\107\027\110\056\111\035\112\114\113\044\114" +
    "\111\115\131\116\064\117\120\140\010\001\002\000\004" +
    "\100\362\001\002\000\016\032\116\102\055\106\004\107" +
    "\027\110\056\140\010\001\002\000\004\103\364\001\002" +
    "\000\036\002\uffa4\005\uffa4\006\uffa4\032\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\070\uffa4\071\uffa4\100\uffa4\103\uffa4" +
    "\105\uffa4\141\uffa4\001\002\000\004\002\ufff3\001\002\000" +
    "\006\002\uff7e\006\163\001\002\000\006\002\uff7e\006\163" +
    "\001\002\000\004\002\ufff2\001\002\000\004\002\ufff1\001" +
    "\002\000\004\002\ufffd\001\002\000\006\110\056\140\206" +
    "\001\002\000\006\100\u0102\103\uff8a\001\002\000\004\103" +
    "\376\001\002\000\004\102\377\001\002\000\062\032\116" +
    "\066\036\067\043\070\122\071\105\072\127\073\037\074" +
    "\130\075\126\076\073\077\032\102\055\104\077\106\004" +
    "\107\027\110\056\111\035\112\114\113\044\114\111\115" +
    "\131\116\064\117\120\140\010\001\002\000\004\103\u0101" +
    "\001\002\000\036\002\uff9d\005\uff9d\006\uff9d\032\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\070\uff9d\071\uff9d\100\uff9d" +
    "\103\uff9d\105\uff9d\141\uff9d\001\002\000\006\110\056\140" +
    "\206\001\002\000\006\100\uff8c\103\uff8c\001\002\000\006" +
    "\100\u0102\103\uff8a\001\002\000\006\100\uff8b\103\uff8b\001" +
    "\002\000\006\002\uff7e\006\163\001\002\000\004\002\uffe2" +
    "\001\002\000\004\002\uffd1\001\002\000\006\110\056\140" +
    "\206\001\002\000\004\100\u010b\001\002\000\062\032\116" +
    "\066\036\067\043\070\122\071\105\072\127\073\037\074" +
    "\130\075\126\076\073\077\032\102\055\104\077\106\004" +
    "\107\027\110\056\111\035\112\114\113\044\114\111\115" +
    "\131\116\064\117\120\140\010\001\002\000\004\100\u010d" +
    "\001\002\000\062\032\116\066\036\067\043\070\122\071" +
    "\105\072\127\073\037\074\130\075\126\076\073\077\032" +
    "\102\055\104\077\106\004\107\027\110\056\111\035\112" +
    "\114\113\044\114\111\115\131\116\064\117\120\140\010" +
    "\001\002\000\006\100\u010f\103\u0110\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\036\002" +
    "\uff90\005\uff90\006\uff90\032\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\070\uff90\071\uff90\100\uff90\103\uff90\105\uff90\141" +
    "\uff90\001\002\000\004\103\u0112\001\002\000\036\002\uff91" +
    "\005\uff91\006\uff91\032\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\070\uff91\071\uff91\100\uff91\103\uff91\105\uff91\141\uff91" +
    "\001\002\000\040\070\u0115\071\u0120\120\u0121\121\u011f\122" +
    "\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d\130\u0123" +
    "\131\u011e\132\u0116\133\u0114\134\u011b\001\002\000\014\002" +
    "\uff74\006\uff74\100\uff74\102\uff74\103\uff74\001\002\000\004" +
    "\102\u015c\001\002\000\004\102\u0157\001\002\000\004\102" +
    "\u0153\001\002\000\004\102\u014b\001\002\000\004\102\u0143" +
    "\001\002\000\004\102\u0140\001\002\000\014\002\uff73\006" +
    "\uff73\100\uff73\102\uff73\103\uff73\001\002\000\004\102\u013d" +
    "\001\002\000\004\102\u013a\001\002\000\004\102\u0135\001" +
    "\002\000\004\102\u0132\001\002\000\004\102\u012b\001\002" +
    "\000\004\102\u0128\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\004\102\u0124\001\002\000\004\140\u0125\001\002" +
    "\000\004\103\u0126\001\002\000\014\002\uff71\006\uff71\100" +
    "\uff71\102\uff71\103\uff71\001\002\000\004\002\uffeb\001\002" +
    "\000\040\070\u0115\071\u0120\120\u0121\121\u011f\122\u0117\123" +
    "\u011a\124\u011c\125\u0118\126\u0119\127\u011d\130\u0123\131\u011e" +
    "\132\u0116\133\u0114\134\u011b\001\002\000\004\103\u012a\001" +
    "\002\000\014\002\uff6e\006\uff6e\100\uff6e\102\uff6e\103\uff6e" +
    "\001\002\000\042\070\u0115\071\u0120\103\u012c\120\u0121\121" +
    "\u011f\122\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d" +
    "\130\u0123\131\u011e\132\u0116\133\u0114\134\u011b\001\002\000" +
    "\014\002\uff69\006\uff69\100\uff69\102\uff69\103\uff69\001\002" +
    "\000\006\100\u0130\103\uff61\001\002\000\004\103\u012f\001" +
    "\002\000\014\002\uff6a\006\uff6a\100\uff6a\102\uff6a\103\uff6a" +
    "\001\002\000\040\070\u0115\071\u0120\120\u0121\121\u011f\122" +
    "\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d\130\u0123" +
    "\131\u011e\132\u0116\133\u0114\134\u011b\001\002\000\004\103" +
    "\uff62\001\002\000\040\070\u0115\071\u0120\120\u0121\121\u011f" +
    "\122\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d\130" +
    "\u0123\131\u011e\132\u0116\133\u0114\134\u011b\001\002\000\004" +
    "\103\u0134\001\002\000\014\002\uff6d\006\uff6d\100\uff6d\102" +
    "\uff6d\103\uff6d\001\002\000\004\140\u0136\001\002\000\004" +
    "\100\u0137\001\002\000\004\140\u0138\001\002\000\004\103" +
    "\u0139\001\002\000\014\002\uff70\006\uff70\100\uff70\102\uff70" +
    "\103\uff70\001\002\000\004\140\u013b\001\002\000\004\103" +
    "\u013c\001\002\000\014\002\uff72\006\uff72\100\uff72\102\uff72" +
    "\103\uff72\001\002\000\040\070\u0115\071\u0120\120\u0121\121" +
    "\u011f\122\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d" +
    "\130\u0123\131\u011e\132\u0116\133\u0114\134\u011b\001\002\000" +
    "\004\103\u013f\001\002\000\014\002\uff65\006\uff65\100\uff65" +
    "\102\uff65\103\uff65\001\002\000\040\070\u0115\071\u0120\120" +
    "\u0121\121\u011f\122\u0117\123\u011a\124\u011c\125\u0118\126\u0119" +
    "\127\u011d\130\u0123\131\u011e\132\u0116\133\u0114\134\u011b\001" +
    "\002\000\004\103\u0142\001\002\000\014\002\uff66\006\uff66" +
    "\100\uff66\102\uff66\103\uff66\001\002\000\040\070\u0115\071" +
    "\u0120\120\u0121\121\u011f\122\u0117\123\u011a\124\u011c\125\u0118" +
    "\126\u0119\127\u011d\130\u0123\131\u011e\132\u0116\133\u0114\134" +
    "\u011b\001\002\000\004\100\u0145\001\002\000\040\070\u0115" +
    "\071\u0120\120\u0121\121\u011f\122\u0117\123\u011a\124\u011c\125" +
    "\u0118\126\u0119\127\u011d\130\u0123\131\u011e\132\u0116\133\u0114" +
    "\134\u011b\001\002\000\004\102\u0147\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\004\103" +
    "\u0149\001\002\000\004\103\u014a\001\002\000\014\002\uff63" +
    "\006\uff63\100\uff63\102\uff63\103\uff63\001\002\000\040\070" +
    "\u0115\071\u0120\120\u0121\121\u011f\122\u0117\123\u011a\124\u011c" +
    "\125\u0118\126\u0119\127\u011d\130\u0123\131\u011e\132\u0116\133" +
    "\u0114\134\u011b\001\002\000\004\102\u014d\001\002\000\062" +
    "\032\116\066\036\067\043\070\122\071\105\072\127\073" +
    "\037\074\130\075\126\076\073\077\032\102\055\104\077" +
    "\106\004\107\027\110\056\111\035\112\114\113\044\114" +
    "\111\115\131\116\064\117\120\140\010\001\002\000\004" +
    "\103\u014f\001\002\000\004\100\u0150\001\002\000\040\070" +
    "\u0115\071\u0120\120\u0121\121\u011f\122\u0117\123\u011a\124\u011c" +
    "\125\u0118\126\u0119\127\u011d\130\u0123\131\u011e\132\u0116\133" +
    "\u0114\134\u011b\001\002\000\004\103\u0152\001\002\000\014" +
    "\002\uff64\006\uff64\100\uff64\102\uff64\103\uff64\001\002\000" +
    "\042\070\u0115\071\u0120\103\u0154\120\u0121\121\u011f\122\u0117" +
    "\123\u011a\124\u011c\125\u0118\126\u0119\127\u011d\130\u0123\131" +
    "\u011e\132\u0116\133\u0114\134\u011b\001\002\000\014\002\uff67" +
    "\006\uff67\100\uff67\102\uff67\103\uff67\001\002\000\004\103" +
    "\u0156\001\002\000\014\002\uff68\006\uff68\100\uff68\102\uff68" +
    "\103\uff68\001\002\000\004\140\u0158\001\002\000\004\100" +
    "\u0159\001\002\000\004\140\u015a\001\002\000\004\103\u015b" +
    "\001\002\000\014\002\uff6f\006\uff6f\100\uff6f\102\uff6f\103" +
    "\uff6f\001\002\000\042\070\u0115\071\u0120\103\u015d\120\u0121" +
    "\121\u011f\122\u0117\123\u011a\124\u011c\125\u0118\126\u0119\127" +
    "\u011d\130\u0123\131\u011e\132\u0116\133\u0114\134\u011b\001\002" +
    "\000\014\002\uff6b\006\uff6b\100\uff6b\102\uff6b\103\uff6b\001" +
    "\002\000\004\103\u015f\001\002\000\014\002\uff6c\006\uff6c" +
    "\100\uff6c\102\uff6c\103\uff6c\001\002\000\062\032\116\066" +
    "\036\067\043\070\122\071\105\072\127\073\037\074\130" +
    "\075\126\076\073\077\032\102\055\104\077\106\004\107" +
    "\027\110\056\111\035\112\114\113\044\114\111\115\131" +
    "\116\064\117\120\140\010\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\ufff9\001\002\000\004\002\ufffc" +
    "\001\002\000\006\002\uffea\140\u0165\001\002\000\006\002" +
    "\uffe9\102\252\001\002\000\004\002\uffe8\001\002\000\006" +
    "\002\uff7e\006\163\001\002\000\004\002\ufff4\001\002\000" +
    "\012\002\uff7a\005\145\006\150\032\146\001\002\000\004" +
    "\002\ufff8\001\002\000\012\002\uff7a\005\145\006\150\032" +
    "\146\001\002\000\004\002\ufff6\001\002\000\004\002\uffdf" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\006\002" +
    "\uffce\006\uffce\001\002\000\006\002\uffcd\006\uffcd\001\002" +
    "\000\006\002\uffcf\006\uffcf\001\002\000\004\002\uffd3\001" +
    "\002\000\004\140\u0174\001\002\000\012\002\uffe7\027\u0175" +
    "\030\u0176\031\u0177\001\002\000\004\137\u017a\001\002\000" +
    "\004\137\u0179\001\002\000\004\137\u0178\001\002\000\004" +
    "\002\uffe4\001\002\000\004\002\uffe5\001\002\000\004\002" +
    "\uffe6\001\002\000\004\002\uffdc\001\002\000\004\140\u017d" +
    "\001\002\000\036\002\uff99\005\uff99\006\uff99\032\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\070\uff99\071\uff99\100\uff99" +
    "\103\uff99\105\uff99\141\uff99\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\uffd0\001\002\000\006\002\uff7e" +
    "\006\163\001\002\000\004\002\uffd2\001\002\000\004\002" +
    "\ufff0\001\002\000\006\110\056\140\206\001\002\000\004" +
    "\100\u0185\001\002\000\062\032\116\066\036\067\043\070" +
    "\122\071\105\072\127\073\037\074\130\075\126\076\073" +
    "\077\032\102\055\104\077\106\004\107\027\110\056\111" +
    "\035\112\114\113\044\114\111\115\131\116\064\117\120" +
    "\140\010\001\002\000\004\100\u0187\001\002\000\062\032" +
    "\116\066\036\067\043\070\122\071\105\072\127\073\037" +
    "\074\130\075\126\076\073\077\032\102\055\104\077\106" +
    "\004\107\027\110\056\111\035\112\114\113\044\114\111" +
    "\115\131\116\064\117\120\140\010\001\002\000\006\100" +
    "\u0189\103\u018a\001\002\000\062\032\116\066\036\067\043" +
    "\070\122\071\105\072\127\073\037\074\130\075\126\076" +
    "\073\077\032\102\055\104\077\106\004\107\027\110\056" +
    "\111\035\112\114\113\044\114\111\115\131\116\064\117" +
    "\120\140\010\001\002\000\036\002\uff92\005\uff92\006\uff92" +
    "\032\uff92\062\uff92\063\uff92\064\uff92\065\uff92\070\uff92\071" +
    "\uff92\100\uff92\103\uff92\105\uff92\141\uff92\001\002\000\004" +
    "\103\u018c\001\002\000\036\002\uff93\005\uff93\006\uff93\032" +
    "\uff93\062\uff93\063\uff93\064\uff93\065\uff93\070\uff93\071\uff93" +
    "\100\uff93\103\uff93\105\uff93\141\uff93\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\070\002\053\003\015\004\060\005\067\015" +
    "\032\021\023\022\112\023\016\024\046\025\050\026\103" +
    "\027\041\030\061\031\020\032\074\033\111\034\052\035" +
    "\047\036\106\037\077\040\037\041\040\042\100\043\073" +
    "\044\102\045\114\047\105\001\001\000\002\001\001\000" +
    "\004\010\u0181\001\001\000\002\001\001\000\004\006\u017d" +
    "\001\001\000\002\001\001\000\004\010\u017a\001\001\000" +
    "\002\001\001\000\004\006\u016d\001\001\000\004\010\u016c" +
    "\001\001\000\060\015\132\021\u016a\022\112\023\016\024" +
    "\046\025\050\026\103\027\041\030\061\031\020\032\074" +
    "\033\111\034\052\035\047\036\106\037\077\040\037\041" +
    "\040\042\100\043\073\044\102\045\114\047\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\015\132\021" +
    "\u0168\022\112\023\016\024\046\025\050\026\103\027\041" +
    "\030\061\031\020\032\074\033\111\034\052\035\047\036" +
    "\106\037\077\040\037\041\040\042\100\043\073\044\102" +
    "\045\114\047\105\001\001\000\002\001\001\000\054\015" +
    "\132\024\140\025\050\026\103\027\041\030\061\031\020" +
    "\032\074\033\111\034\052\035\047\036\106\037\077\040" +
    "\037\041\040\042\100\043\073\044\102\045\114\046\u0166" +
    "\047\166\001\001\000\002\001\001\000\004\007\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0107\001\001\000\056\015\132\024\140\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\046\170\047\166\054\u0105" +
    "\001\001\000\002\001\001\000\004\007\371\001\001\000" +
    "\004\010\364\001\001\000\002\001\001\000\016\015\132" +
    "\032\356\033\111\034\052\044\102\045\114\001\001\000" +
    "\052\015\132\024\140\025\050\026\103\027\041\030\061" +
    "\031\020\032\074\033\111\034\052\035\047\036\106\037" +
    "\077\040\037\041\040\042\100\043\073\044\102\045\114" +
    "\047\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\341\001\001\000\002\001\001\000\004\014\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\015\132" +
    "\024\140\025\050\026\103\027\041\030\061\031\020\032" +
    "\074\033\111\034\052\035\047\036\106\037\077\040\037" +
    "\041\040\042\100\043\073\044\102\045\114\046\170\047" +
    "\166\054\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\015\132\021\324\022\112\023\016\024\046\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\047\105\001\001\000\002" +
    "\001\001\000\004\010\322\001\001\000\060\015\132\021" +
    "\320\022\112\023\016\024\046\025\050\026\103\027\041" +
    "\030\061\031\020\032\074\033\111\034\052\035\047\036" +
    "\106\037\077\040\037\041\040\042\100\043\073\044\102" +
    "\045\114\047\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\317\001\001\000\002\001\001\000\004" +
    "\010\311\001\001\000\004\010\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\132\032\304\033\111" +
    "\034\052\044\102\045\114\001\001\000\056\015\132\024" +
    "\140\025\050\026\103\027\041\030\061\031\020\032\074" +
    "\033\111\034\052\035\047\036\106\037\077\040\037\041" +
    "\040\042\100\043\073\044\102\045\114\046\170\047\166" +
    "\054\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\015\132\024\263" +
    "\025\050\026\103\027\041\030\061\031\020\032\074\033" +
    "\111\034\052\035\047\036\106\037\077\040\037\041\040" +
    "\042\100\043\073\044\102\045\114\050\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\015\132\024\140\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\047\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\204\044\203\001" +
    "\001\000\004\016\200\001\001\000\002\001\001\000\004" +
    "\010\172\001\001\000\052\015\132\024\140\025\050\026" +
    "\103\027\041\030\061\031\020\032\074\033\111\034\052" +
    "\035\047\036\106\037\077\040\037\041\040\042\100\043" +
    "\073\044\102\045\114\047\171\001\001\000\002\001\001" +
    "\000\060\015\132\021\160\022\112\023\016\024\046\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\047\105\001\001\000\060" +
    "\015\132\021\143\022\112\023\016\024\046\025\050\026" +
    "\103\027\041\030\061\031\020\032\074\033\111\034\052" +
    "\035\047\036\106\037\077\040\037\041\040\042\100\043" +
    "\073\044\102\045\114\047\105\001\001\000\052\015\132" +
    "\024\140\025\050\026\103\027\041\030\061\031\020\032" +
    "\074\033\111\034\052\035\047\036\106\037\077\040\037" +
    "\041\040\042\100\043\073\044\102\045\114\047\142\001" +
    "\001\000\052\015\132\024\140\025\050\026\103\027\041" +
    "\030\061\031\020\032\074\033\111\034\052\035\047\036" +
    "\106\037\077\040\037\041\040\042\100\043\073\044\102" +
    "\045\114\047\141\001\001\000\052\015\132\024\140\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\047\137\001\001\000\002" +
    "\001\001\000\016\015\132\032\133\033\111\034\052\044" +
    "\102\045\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\015\132\021\135\022\112\023\016\024\046\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\047\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\146" +
    "\011\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\015\132" +
    "\021\163\022\112\023\016\024\046\025\050\026\103\027" +
    "\041\030\061\031\020\032\074\033\111\034\052\035\047" +
    "\036\106\037\077\040\037\041\040\042\100\043\073\044" +
    "\102\045\114\047\105\001\001\000\004\010\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\146\011" +
    "\164\001\001\000\002\001\001\000\056\015\132\024\140" +
    "\025\050\026\103\027\041\030\061\031\020\032\074\033" +
    "\111\034\052\035\047\036\106\037\077\040\037\041\040" +
    "\042\100\043\073\044\102\045\114\046\170\047\166\054" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\132\032\174\033\111\034\052\044\102\045\114\001\001" +
    "\000\002\001\001\000\060\015\132\021\176\022\112\023" +
    "\016\024\046\025\050\026\103\027\041\030\061\031\020" +
    "\032\074\033\111\034\052\035\047\036\106\037\077\040" +
    "\037\041\040\042\100\043\073\044\102\045\114\047\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\015" +
    "\132\024\140\025\050\026\103\027\041\030\061\031\020" +
    "\032\074\033\111\034\052\035\047\036\106\037\077\040" +
    "\037\041\040\042\100\043\073\044\102\045\114\047\207" +
    "\055\210\001\001\000\004\056\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\015\132\024\140\025\050" +
    "\026\103\027\041\030\061\031\020\032\074\033\111\034" +
    "\052\035\047\036\106\037\077\040\037\041\040\042\100" +
    "\043\073\044\102\045\114\047\214\001\001\000\002\001" +
    "\001\000\004\056\215\001\001\000\002\001\001\000\060" +
    "\015\132\021\217\022\112\023\016\024\046\025\050\026" +
    "\103\027\041\030\061\031\020\032\074\033\111\034\052" +
    "\035\047\036\106\037\077\040\037\041\040\042\100\043" +
    "\073\044\102\045\114\047\105\001\001\000\002\001\001" +
    "\000\016\015\132\032\221\033\111\034\052\044\102\045" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\132\032\224\033\111\034\052\044\102\045\114\001" +
    "\001\000\002\001\001\000\016\015\132\032\226\033\111" +
    "\034\052\044\102\045\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\231\001\001\000\002\001\001" +
    "\000\052\015\132\024\140\025\050\026\103\027\041\030" +
    "\061\031\020\032\074\033\111\034\052\035\047\036\106" +
    "\037\077\040\037\041\040\042\100\043\073\044\102\045" +
    "\114\047\241\001\001\000\052\015\132\024\140\025\050" +
    "\026\103\027\041\030\061\031\020\032\074\033\111\034" +
    "\052\035\047\036\106\037\077\040\037\041\040\042\100" +
    "\043\073\044\102\045\114\047\240\001\001\000\052\015" +
    "\132\024\140\025\050\026\103\027\041\030\061\031\020" +
    "\032\074\033\111\034\052\035\047\036\106\037\077\040" +
    "\037\041\040\042\100\043\073\044\102\045\114\047\237" +
    "\001\001\000\052\015\132\024\140\025\050\026\103\027" +
    "\041\030\061\031\020\032\074\033\111\034\052\035\047" +
    "\036\106\037\077\040\037\041\040\042\100\043\073\044" +
    "\102\045\114\047\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\015\132\024\140\025\050\026\103\027\041" +
    "\030\061\031\020\032\074\033\111\034\052\035\047\036" +
    "\106\037\077\040\037\041\040\042\100\043\073\044\102" +
    "\045\114\047\207\055\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\250\001\001" +
    "\000\004\010\257\001\001\000\002\001\001\000\004\012" +
    "\253\001\001\000\002\001\001\000\004\012\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\265\001\001\000\050\015\132\024\266\025" +
    "\050\026\103\027\041\030\061\031\020\032\074\033\111" +
    "\034\052\035\047\036\106\037\077\040\037\041\040\042" +
    "\100\043\073\044\102\045\114\001\001\000\002\001\001" +
    "\000\004\051\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\015\132\024\140\025\050\026" +
    "\103\027\041\030\061\031\020\032\074\033\111\034\052" +
    "\035\047\036\106\037\077\040\037\041\040\042\100\043" +
    "\073\044\102\045\114\047\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\015\132\024\140\025\050\026" +
    "\103\027\041\030\061\031\020\032\074\033\111\034\052" +
    "\035\047\036\106\037\077\040\037\041\040\042\100\043" +
    "\073\044\102\045\114\047\301\001\001\000\002\001\001" +
    "\000\004\010\303\001\001\000\002\001\001\000\004\010" +
    "\305\001\001\000\002\001\001\000\004\010\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\015\132\021\313\022\112\023\016\024\046\025\050" +
    "\026\103\027\041\030\061\031\020\032\074\033\111\034" +
    "\052\035\047\036\106\037\077\040\037\041\040\042\100" +
    "\043\073\044\102\045\114\047\105\001\001\000\002\001" +
    "\001\000\016\015\132\032\315\033\111\034\052\044\102" +
    "\045\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\146\011\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\330" +
    "\001\001\000\002\001\001\000\052\015\132\022\336\024" +
    "\335\025\050\026\103\027\041\030\061\031\020\032\074" +
    "\033\111\034\052\035\047\036\106\037\077\040\037\041" +
    "\040\042\100\043\073\044\102\045\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\331\001\001\000\002\001\001\000\054\015\132\024\140" +
    "\025\050\026\103\027\041\030\061\031\020\032\074\033" +
    "\111\034\052\035\047\036\106\037\077\040\037\041\040" +
    "\042\100\043\073\044\102\045\114\046\340\047\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\015\132" +
    "\021\343\022\112\023\016\024\046\025\050\026\103\027" +
    "\041\030\061\031\020\032\074\033\111\034\052\035\047" +
    "\036\106\037\077\040\037\041\040\042\100\043\073\044" +
    "\102\045\114\047\105\001\001\000\002\001\001\000\016" +
    "\015\132\032\345\033\111\034\052\044\102\045\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\015\132\024\140\025\050\026\103\027\041\030\061" +
    "\031\020\032\074\033\111\034\052\035\047\036\106\037" +
    "\077\040\037\041\040\042\100\043\073\044\102\045\114" +
    "\047\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\015\132\021\360\022\112\023\016" +
    "\024\046\025\050\026\103\027\041\030\061\031\020\032" +
    "\074\033\111\034\052\035\047\036\106\037\077\040\037" +
    "\041\040\042\100\043\073\044\102\045\114\047\105\001" +
    "\001\000\002\001\001\000\016\015\132\032\362\033\111" +
    "\034\052\044\102\045\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\370\001\001" +
    "\000\004\010\367\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\204\044\373\052\374" +
    "\001\001\000\004\053\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\015\132\021\377\022\112\023\016" +
    "\024\046\025\050\026\103\027\041\030\061\031\020\032" +
    "\074\033\111\034\052\035\047\036\106\037\077\040\037" +
    "\041\040\042\100\043\073\044\102\045\114\047\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\204" +
    "\044\u0103\001\001\000\002\001\001\000\004\053\u0104\001" +
    "\001\000\002\001\001\000\004\010\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\204\044\373\052" +
    "\u0109\001\001\000\002\001\001\000\052\015\132\024\140" +
    "\025\050\026\103\027\041\030\061\031\020\032\074\033" +
    "\111\034\052\035\047\036\106\037\077\040\037\041\040" +
    "\042\100\043\073\044\102\045\114\047\u010b\001\001\000" +
    "\002\001\001\000\052\015\132\024\140\025\050\026\103" +
    "\027\041\030\061\031\020\032\074\033\111\034\052\035" +
    "\047\036\106\037\077\040\037\041\040\042\100\043\073" +
    "\044\102\045\114\047\u010d\001\001\000\002\001\001\000" +
    "\052\015\132\024\140\025\050\026\103\027\041\030\061" +
    "\031\020\032\074\033\111\034\052\035\047\036\106\037" +
    "\077\040\037\041\040\042\100\043\073\044\102\045\114" +
    "\047\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u012c\020\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\u012c\020\u0130\001\001\000\002\001\001\000\004" +
    "\017\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u013d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u0143\001\001" +
    "\000\002\001\001\000\004\017\u0145\001\001\000\002\001" +
    "\001\000\060\015\132\021\u0147\022\112\023\016\024\046" +
    "\025\050\026\103\027\041\030\061\031\020\032\074\033" +
    "\111\034\052\035\047\036\106\037\077\040\037\041\040" +
    "\042\100\043\073\044\102\045\114\047\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u014b\001\001\000\002\001\001\000\060\015\132\021" +
    "\u014d\022\112\023\016\024\046\025\050\026\103\027\041" +
    "\030\061\031\020\032\074\033\111\034\052\035\047\036" +
    "\106\037\077\040\037\041\040\042\100\043\073\044\102" +
    "\045\114\047\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0150\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u012c\020\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u012c\020\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\015" +
    "\132\024\140\025\050\026\103\027\041\030\061\031\020" +
    "\032\074\033\111\034\052\035\047\036\106\037\077\040" +
    "\037\041\040\042\100\043\073\044\102\045\114\047\u0160" +
    "\001\001\000\004\010\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0165\001\001" +
    "\000\002\001\001\000\004\010\u0167\001\001\000\002\001" +
    "\001\000\006\007\146\011\u0169\001\001\000\002\001\001" +
    "\000\006\007\146\011\u016b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u017e\001\001\000\002\001" +
    "\001\000\004\010\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\204\044\373\052\u0183\001\001\000" +
    "\002\001\001\000\052\015\132\024\140\025\050\026\103" +
    "\027\041\030\061\031\020\032\074\033\111\034\052\035" +
    "\047\036\106\037\077\040\037\041\040\042\100\043\073" +
    "\044\102\045\114\047\u0185\001\001\000\002\001\001\000" +
    "\052\015\132\024\140\025\050\026\103\027\041\030\061" +
    "\031\020\032\074\033\111\034\052\035\047\036\106\037" +
    "\077\040\037\041\040\042\100\043\073\044\102\045\114" +
    "\047\u0187\001\001\000\002\001\001\000\052\015\132\024" +
    "\140\025\050\026\103\027\041\030\061\031\020\032\074" +
    "\033\111\034\052\035\047\036\106\037\077\040\037\041" +
    "\040\042\100\043\073\044\102\045\114\047\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



String command;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= wffNameCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= snepslogCommand 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = sc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= wffCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wffNameCommand ::= wffName terminalPunctuation 
            {
              String RESULT =null;
		 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffNameCommand",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wffCommand ::= wff terminalPunctuation 
            {
              String RESULT =null;
		 
				
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // snepslogCommand ::= ACTIVATE wff optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // snepslogCommand ::= ACTIVATE BANG wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 
                		RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // snepslogCommand ::= ADD_TO_CONTEXT IDENTIFIER termSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // snepslogCommand ::= ASK wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // snepslogCommand ::= ASKIFNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // snepslogCommand ::= ASKWH wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // snepslogCommand ::= ASKWHNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // snepslogCommand ::= BELIEFS_ABOUT pTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // snepslogCommand ::= BR_MODE optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // snepslogCommand ::= BR_MODE AUTO optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // snepslogCommand ::= BR_MODE MANUAL optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // snepslogCommand ::= CLEAR_INFER optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // snepslogCommand ::= CLEARKB optionalDot 
            {
              String RESULT =null;
		 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // snepslogCommand ::= COPYRIGHT optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "copyright statement goes here.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list STRING_LIT optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // snepslogCommand ::= DEFINE_PATH IDENTIFIER path optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER EXPAND INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER REDUCE INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER NONE INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // snepslogCommand ::= DESCRIBE_CONTEXT optionalIdentifier optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // snepslogCommand ::= DESCRIBE_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // snepslogCommand ::= EXPERT optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // snepslogCommand ::= LIST_ASSERTED_WFFS optionalIdentifier optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // snepslogCommand ::= LIST_CONTEXTS optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // snepslogCommand ::= LIST_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // snepslogCommand ::= LOAD FILEPATH optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // snepslogCommand ::= NORMAL optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // snepslogCommand ::= PERFORM atomicTerm optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // snepslogCommand ::= REMOVE_FROM_CONTEXT IDENTIFIER pTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // snepslogCommand ::= SET_CONTEXT IDENTIFIER optionalPTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // snepslogCommand ::= SET_DEFAULT_CONTEXT IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // snepslogCommand ::= SET_MODE_1 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // snepslogCommand ::= SET_MODE_2 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // snepslogCommand ::= SET_MODE_3 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // snepslogCommand ::= SHOW optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // snepslogCommand ::= TRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // snepslogCommand ::= UNDEFINE_PATH IDENTIFIER optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // snepslogCommand ::= UNLABELED optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // snepslogCommand ::= UNTRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // snepslogFunction ::= INFERENCE 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // snepslogFunction ::= ACTING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // snepslogFunction ::= PARSING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // wff ::= infixedTerm 
            {
              Node RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = it;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // wff ::= entailment 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // infixedTerm ::= prefixedTerm andOrEquality infixedTerm 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    				RESULT = AP.buildInfixedTerm(type, arg1, arg2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // infixedTerm ::= prefixedTerm 
            {
              Node RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		RESULT = pt;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // andOrEquality ::= AND 
            {
              String RESULT =null;
		
             			RESULT = "and";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // andOrEquality ::= OR 
            {
              String RESULT =null;
		
             			RESULT = "or";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // andOrEquality ::= EQUALITY 
            {
              String RESULT =null;
		
             			RESULT = "equality";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // entailment ::= termSet IMPLICATION termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    				RESULT = AP.buildEntailment("Implication", antecedents, consequents, null);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // entailment ::= termSet OR_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = AP.buildEntailment("OrEntailment", antecedents, consequents, null);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // entailment ::= termSet AND_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = AP.buildEntailment("AndEntailment", antecedents, consequents, null);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // entailment ::= termSet NUMERICAL_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = AP.buildEntailment("NumericalEntailment", antecedents, consequents, ne.substring(0,ne.length()-2));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pTermSet ::= termSet 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    			ArrayList<Node> out = new ArrayList<Node>();
			for (int i = 0; i < ts.size(); i++) {
				ArrayList<Node> temp = AP.match(ts.get(i));
				for (int j = 0; j < temp.size(); j++) {
					out.add(temp.get(j));
				}
			}
			RESULT = out;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pTermSet",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termSet ::= prefixedTerm 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList<Node> temp = new ArrayList<Node>();
			temp.add(pt);
			RESULT = temp;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termSet ::= OPEN_CURLY termSequence CLOSE_CURLY 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = ts;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termSequence ::= prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             	ArrayList<Node> out = new ArrayList<Node>();
             	out.add(pt);
				for (int i = 0; i < pts.size(); i++) {
					out.add(pts.get(i));				
				}
				RESULT = out;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSequence",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prefixedTerms ::= COMMA prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<Node> out = new ArrayList<Node>();
             		out.add(pt);
					for (int i = 0; i < pts.size(); i++) {
						out.add(pts.get(i));				
					}
					RESULT = out;
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prefixedTerms ::= 
            {
              ArrayList<Node> RESULT =null;
		
					ArrayList<Node> out = new ArrayList<Node>();
					RESULT = out;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prefixedTerm ::= negatedTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prefixedTerm ::= andorTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prefixedTerm ::= setTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixedTerm ::= threshTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixedTerm ::= ifdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixedTerm ::= whendoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prefixedTerm ::= wheneverdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixedTerm ::= actplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixedTerm ::= effectTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixedTerm ::= goalplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prefixedTerm ::= preconditionTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prefixedTerm ::= allTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prefixedTerm ::= atomicTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // negatedTerm ::= NOT atomicTerm 
            {
              Node RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = AP.buildNegatedTerm(node);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negatedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = AP.buildAndorTerm(i, j, arguments);
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andorTerm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // setTerm ::= AND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("and", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // setTerm ::= OR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("or", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // setTerm ::= NAND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("nand", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // setTerm ::= NOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("nor", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // setTerm ::= XOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("xor", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // setTerm ::= IFF termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = AP.buildSetTerm("iff", arguments);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int threshmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String threshmax = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             	RESULT = AP.buildThreshTerm(thresh, threshmax, arguments);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // threshTerm ::= THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             	RESULT = AP.buildThreshTerm(thresh, arguments.size()-1+"", arguments);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = AP.buildSNeRETerm("ifdo", arg1, arg2);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdoTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = AP.buildSNeRETerm("whendo", arg1, arg2);
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whendoTerm",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = AP.buildSNeRETerm("wheneverdo", arg1, arg2);
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wheneverdoTerm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = AP.buildSNeRETerm("ActPlan", arg1, arg2);
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actplanTerm",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = AP.buildSNeRETerm("Effect", arg1, arg2);
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("effectTerm",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = AP.buildSNeRETerm("GoalPlan", arg1, arg2);
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goalplanTerm",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = AP.buildSNeRETerm("Precondition", arg1, arg2);
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preconditionTerm",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // atomicTerm ::= wffName 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atomicTerm ::= qvar 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomicTerm ::= IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // atomicTerm ::= IDENTIFIER COLON IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // atomicTerm ::= withsomeTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // atomicTerm ::= withallTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // atomicTerm ::= qvar OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // atomicTerm ::= snepslogSymbol OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // atomicTerm ::= OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // termSetSequence ::= termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSetSequence",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termSets ::= COMMA termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // termSets ::= 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // symbolSequence ::= snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolSequence",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // snepslogSymbols ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // wffName ::= WFF INT_LIT 
            {
              String RESULT =null;
		
			
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffName",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // qvar ::= QUESTION_MARK snepslogSymbol 
            {
              Node RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qvar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // snepslogSymbol ::= wffName 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // snepslogSymbol ::= IDENTIFIER 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminalPunctuation ::= DOT 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminalPunctuation ::= BANG 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminalPunctuation ::= QUESTION_MARK QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminalPunctuation ::= QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // optionalDot ::= DOT 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optionalDot ::= 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optionalIdentifier ::= IDENTIFIER 
            {
              String RESULT =null;
		
			       
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optionalIdentifier ::= 
            {
              String RESULT =null;
		
			       
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // optionalTerminalPunctuation ::= terminalPunctuation 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optionalTerminalPunctuation ::= 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optionalPTermSet ::= pTermSet 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optionalPTermSet ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // identifiers ::= IDENTIFIER identifiers 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // identifiers ::= 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN 
            {
              String RESULT =null;
		
                 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // path ::= BANGPATH 
            {
              Path RESULT =null;
		
     
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // path ::= EMPTYPATH 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // path ::= FUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // path ::= BUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // path ::= CFRESFUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // path ::= CFRESBUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // path ::= KPLUS OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // path ::= KSTAR OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // path ::= AND OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // path ::= AND OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // path ::= OR OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // path ::= OR OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // path ::= COMPOSE OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // path ::= COMPOSE OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // path ::= CONVERSE OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // path ::= IRREFLEXIVE_RESTRICT OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // path ::= DOMAIN_RESTRICT OPEN_PARAN path OPEN_PARAN wff CLOSE_PARAN COMMA path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // path ::= RANGE_RESTRICT OPEN_PARAN path COMMA path OPEN_PARAN wff CLOSE_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // paths ::= path COMMA paths 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // paths ::= path 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
