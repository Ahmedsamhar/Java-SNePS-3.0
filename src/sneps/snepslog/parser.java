
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javafx.util.Pair;
import sneps.network.Node;
import sneps.network.paths.Path;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\006\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\010\000" +
    "\002\005\006\000\002\005\004\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\047" +
    "\003\000\002\050\003\000\002\050\005\000\002\051\004" +
    "\000\002\052\005\000\002\052\002\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\027\011\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\031\011\000\002\031\007\000\002\032\011" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\033\006\000\002\033\006\000\002\033\005\000\002\034" +
    "\014\000\002\034\012\000\002\035\014\000\002\035\012" +
    "\000\002\036\010\000\002\037\010\000\002\040\010\000" +
    "\002\041\010\000\002\042\010\000\002\043\010\000\002" +
    "\044\010\000\002\056\004\000\002\057\005\000\002\057" +
    "\002\000\002\053\004\000\002\054\005\000\002\054\002" +
    "\000\002\017\004\000\002\046\004\000\002\045\003\000" +
    "\002\045\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\006\000\002\007" +
    "\007\000\002\010\003\000\002\010\002\000\002\011\003" +
    "\000\002\011\002\000\002\055\003\000\002\055\002\000" +
    "\002\012\004\000\002\012\002\000\002\013\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\002\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\002\000\002\020\003\000\002\020\003\000\002" +
    "\020\006\000\002\020\006\000\002\020\010\000\002\020" +
    "\010\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\020\013\000\002\020\013\000\002\021" +
    "\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\172\004\125\007\025\010\020\011\060\012" +
    "\015\013\126\014\022\015\034\020\005\021\057\022\122" +
    "\023\103\024\026\025\023\026\012\032\100\033\117\042" +
    "\120\043\031\044\045\045\111\046\014\047\052\050\067" +
    "\051\011\052\071\053\046\054\124\055\076\056\066\057" +
    "\065\060\063\061\072\062\013\063\007\064\030\065\006" +
    "\075\036\076\043\077\123\100\106\101\130\102\037\103" +
    "\131\104\127\105\073\106\032\111\055\113\077\115\004" +
    "\116\027\117\056\120\035\121\115\122\044\123\112\124" +
    "\132\125\064\126\121\147\010\001\002\000\004\111\u0192" +
    "\001\002\000\006\002\uff7b\006\164\001\002\000\010\066" +
    "\u0180\067\u017f\070\u017e\001\002\000\004\147\u018d\001\002" +
    "\000\042\002\uff9e\005\uff9e\006\uff9e\033\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\077\uff9e\100\uff9e\107\uff9e\110\u018b" +
    "\111\uff83\112\uff9e\114\uff9e\150\uff9e\001\002\000\006\002" +
    "\uff7b\006\164\001\002\000\004\147\u0182\001\002\000\010" +
    "\066\u0180\067\u017f\070\u017e\001\002\000\006\002\uff7b\006" +
    "\164\001\002\000\062\033\117\075\036\076\043\077\123" +
    "\100\106\101\130\102\037\103\131\104\127\105\073\106" +
    "\032\111\055\113\077\115\004\116\027\117\056\120\035" +
    "\121\115\122\044\123\112\124\132\125\064\126\121\147" +
    "\010\001\002\000\004\002\001\001\002\000\016\002\uffc8" +
    "\005\uffc8\006\uffc8\033\uffc8\107\uffc8\112\uffc8\001\002\000" +
    "\062\033\117\075\036\076\043\077\123\100\106\101\130" +
    "\102\037\103\131\104\127\105\073\106\032\111\055\113" +
    "\077\115\004\116\027\117\056\120\035\121\115\122\044" +
    "\123\112\124\132\125\064\126\121\147\010\001\002\000" +
    "\036\002\uffb4\005\uffb4\006\uffb4\033\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\077\uffb4\100\uffb4\107\uffb4\112\uffb4\114" +
    "\uffb4\150\uffb4\001\002\000\004\147\u0175\001\002\000\004" +
    "\147\u0172\001\002\000\010\005\146\006\151\033\147\001" +
    "\002\000\004\147\u016e\001\002\000\004\147\u0121\001\002" +
    "\000\004\111\u0117\001\002\000\006\002\uff7b\006\164\001" +
    "\002\000\066\002\uff77\006\uff77\033\117\075\036\076\043" +
    "\077\123\100\106\101\130\102\037\103\131\104\127\105" +
    "\073\106\032\111\055\113\077\115\004\116\027\117\056" +
    "\120\035\121\115\122\044\123\112\124\132\125\064\126" +
    "\121\147\010\001\002\000\004\111\u0109\001\002\000\030" +
    "\005\146\006\151\033\147\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\077\uffa0\100\uffa0\111\uff84\150\uffa0\001\002\000\012" +
    "\002\uff7b\006\164\016\u0105\017\u0104\001\002\000\004\111" +
    "\376\001\002\000\016\033\117\111\055\115\004\116\027" +
    "\117\056\147\010\001\002\000\062\033\117\075\036\076" +
    "\043\077\123\100\106\101\130\102\037\103\131\104\127" +
    "\105\073\106\032\111\055\113\077\115\004\116\027\117" +
    "\056\120\035\121\115\122\044\123\112\124\132\125\064" +
    "\126\121\147\010\001\002\000\036\002\uffaf\005\uffaf\006" +
    "\uffaf\033\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\077\uffaf" +
    "\100\uffaf\107\uffaf\112\uffaf\114\uffaf\150\uffaf\001\002\000" +
    "\036\002\uffae\005\uffae\006\uffae\033\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\077\uffae\100\uffae\107\uffae\112\uffae\114" +
    "\uffae\150\uffae\001\002\000\036\002\uffb6\005\uffb6\006\uffb6" +
    "\033\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\077\uffb6\100" +
    "\uffb6\107\uffb6\112\uffb6\114\uffb6\150\uffb6\001\002\000\004" +
    "\111\366\001\002\000\004\111\361\001\002\000\006\002" +
    "\uff7b\006\164\001\002\000\004\147\356\001\002\000\034" +
    "\002\uffc6\005\uffc6\006\uffc6\033\uffc6\071\351\072\uffbd\073" +
    "\uffbd\074\uffbd\077\352\100\353\107\uffc6\112\uffc6\150\uffbd" +
    "\001\002\000\036\002\uffb2\005\uffb2\006\uffb2\033\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\077\uffb2\100\uffb2\107\uffb2" +
    "\112\uffb2\114\uffb2\150\uffb2\001\002\000\036\002\uffb8\005" +
    "\uffb8\006\uffb8\033\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\077\uffb8\100\uffb8\107\uffb8\112\uffb8\114\uffb8\150\uffb8\001" +
    "\002\000\066\002\uff77\006\uff77\033\117\075\036\076\043" +
    "\077\123\100\106\101\130\102\037\103\131\104\127\105" +
    "\073\106\032\111\055\113\077\115\004\116\027\117\056" +
    "\120\035\121\115\122\044\123\112\124\132\125\064\126" +
    "\121\147\010\001\002\000\036\002\uff9b\005\uff9b\006\uff9b" +
    "\033\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\077\uff9b\100" +
    "\uff9b\107\uff9b\112\uff9b\114\uff9b\150\uff9b\001\002\000\004" +
    "\002\345\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\004\146\342\001\002\000\006\002" +
    "\uff7b\006\164\001\002\000\062\033\117\075\036\076\043" +
    "\077\123\100\106\101\130\102\037\103\131\104\127\105" +
    "\073\106\032\111\055\113\077\115\004\116\027\117\056" +
    "\120\035\121\115\122\044\123\112\124\132\125\064\126" +
    "\121\147\010\001\002\000\004\002\ufffe\001\002\000\036" +
    "\002\uffb5\005\uffb5\006\uffb5\033\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\077\uffb5\100\uffb5\107\uffb5\112\uffb5\114\uffb5" +
    "\150\uffb5\001\002\000\006\002\uff7b\006\164\001\002\000" +
    "\004\111\331\001\002\000\006\002\uff7b\006\164\001\002" +
    "\000\006\002\uff7b\006\164\001\002\000\004\144\325\001" +
    "\002\000\004\002\uffff\001\002\000\016\033\117\111\055" +
    "\115\004\116\027\117\056\147\010\001\002\000\066\002" +
    "\uff77\006\uff77\033\117\075\036\076\043\077\123\100\106" +
    "\101\130\102\037\103\131\104\127\105\073\106\032\111" +
    "\055\113\077\115\004\116\027\117\056\120\035\121\115" +
    "\122\044\123\112\124\132\125\064\126\121\147\010\001" +
    "\002\000\004\111\311\001\002\000\036\002\uffb3\005\uffb3" +
    "\006\uffb3\033\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\077" +
    "\uffb3\100\uffb3\107\uffb3\112\uffb3\114\uffb3\150\uffb3\001\002" +
    "\000\036\002\uffac\005\uffac\006\uffac\033\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\077\uffac\100\uffac\107\uffac\112\uffac" +
    "\114\uffac\150\uffac\001\002\000\004\147\310\001\002\000" +
    "\060\033\117\075\036\076\043\077\123\100\106\101\130" +
    "\102\037\103\131\104\127\105\073\106\032\111\055\115" +
    "\004\116\027\117\056\120\035\121\115\122\044\123\112" +
    "\124\132\125\064\126\121\147\010\001\002\000\030\002" +
    "\uff70\006\uff70\033\265\034\uff70\035\uff70\036\uff70\037\uff70" +
    "\040\uff70\041\uff70\144\266\146\270\001\002\000\036\002" +
    "\uffb0\005\uffb0\006\uffb0\033\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\077\uffb0\100\uffb0\107\uffb0\112\uffb0\114\uffb0\150" +
    "\uffb0\001\002\000\036\002\uffad\005\uffad\006\uffad\033\uffad" +
    "\071\uffad\072\uffad\073\uffad\074\uffad\077\uffad\100\uffad\107" +
    "\uffad\112\uffad\114\uffad\150\uffad\001\002\000\004\147\251" +
    "\001\002\000\004\111\246\001\002\000\036\002\uffb7\005" +
    "\uffb7\006\uffb7\033\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\077\uffb7\100\uffb7\107\uffb7\112\uffb7\114\uffb7\150\uffb7\001" +
    "\002\000\062\033\117\075\036\076\043\077\123\100\106" +
    "\101\130\102\037\103\131\104\127\105\073\106\032\111" +
    "\055\113\077\115\004\116\027\117\056\120\035\121\115" +
    "\122\044\123\112\124\132\125\064\126\121\147\010\001" +
    "\002\000\012\072\236\073\235\074\237\150\240\001\002" +
    "\000\036\002\uffb1\005\uffb1\006\uffb1\033\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\077\uffb1\100\uffb1\107\uffb1\112\uffb1" +
    "\114\uffb1\150\uffb1\001\002\000\010\002\uff7b\006\164\147" +
    "\233\001\002\000\004\111\225\001\002\000\036\002\uff9c" +
    "\005\uff9c\006\uff9c\033\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\077\uff9c\100\uff9c\107\uff9c\112\uff9c\114\uff9c\150\uff9c" +
    "\001\002\000\016\002\uffc9\005\uffc9\006\uffc9\033\uffc9\107" +
    "\uffc9\112\uffc9\001\002\000\004\111\220\001\002\000\040" +
    "\002\uff9f\005\uff9f\006\uff9f\033\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\074\uff9f\077\uff9f\100\uff9f\107\uff9f\111\210\112\uff9f" +
    "\114\uff9f\150\uff9f\001\002\000\006\117\056\147\207\001" +
    "\002\000\010\002\uff7b\006\164\147\203\001\002\000\004" +
    "\111\175\001\002\000\006\002\uff7b\006\164\001\002\000" +
    "\062\033\117\075\036\076\043\077\123\100\106\101\130" +
    "\102\037\103\131\104\127\105\073\106\032\111\055\113" +
    "\077\115\004\116\027\117\056\120\035\121\115\122\044" +
    "\123\112\124\132\125\064\126\121\147\010\001\002\000" +
    "\004\147\167\001\002\000\064\005\161\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\004\111\133\001\002" +
    "\000\016\033\117\111\055\115\004\116\027\117\056\147" +
    "\010\001\002\000\040\002\uffa0\005\uffa0\006\uffa0\033\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\074\uffa0\077\uffa0\100\uffa0\107" +
    "\uffa0\111\uff84\112\uffa0\114\uffa0\150\uffa0\001\002\000\004" +
    "\107\136\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\004\112\140\001\002\000\036\002" +
    "\uff8f\005\uff8f\006\uff8f\033\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\077\uff8f\100\uff8f\107\uff8f\112\uff8f\114\uff8f\150" +
    "\uff8f\001\002\000\036\002\uffa5\005\uffa5\006\uffa5\033\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\077\uffa5\100\uffa5\107" +
    "\uffa5\112\uffa5\114\uffa5\150\uffa5\001\002\000\036\002\uffbd" +
    "\005\uffbd\006\uffbd\033\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\077\uffbd\100\uffbd\107\uffbd\112\uffbd\114\uffbd\150\uffbd" +
    "\001\002\000\036\002\uffa7\005\uffa7\006\uffa7\033\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\077\uffa7\100\uffa7\107\uffa7" +
    "\112\uffa7\114\uffa7\150\uffa7\001\002\000\036\002\uffa4\005" +
    "\uffa4\006\uffa4\033\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\077\uffa4\100\uffa4\107\uffa4\112\uffa4\114\uffa4\150\uffa4\001" +
    "\002\000\012\002\uff79\005\146\006\151\033\147\001\002" +
    "\000\004\002\uff81\001\002\000\010\002\uff7f\033\153\111" +
    "\154\001\002\000\004\002\uff7a\001\002\000\004\002\uff82" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\uff80\001" +
    "\002\000\004\146\155\001\002\000\006\112\156\146\157" +
    "\001\002\000\004\002\uff7e\001\002\000\004\112\160\001" +
    "\002\000\004\002\uff7d\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\006\002\uff7b\006\164" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\uff7c\001" +
    "\002\000\012\002\uff79\005\146\006\151\033\147\001\002" +
    "\000\004\002\ufffa\001\002\000\064\002\uff77\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\113\077\115\004\116" +
    "\027\117\056\120\035\121\115\122\044\123\112\124\132" +
    "\125\064\126\121\147\010\001\002\000\006\002\uffbe\006" +
    "\uffbe\001\002\000\004\002\uffd6\001\002\000\006\002\uff78" +
    "\006\uff78\001\002\000\036\002\uffa9\005\uffa9\006\uffa9\033" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\077\uffa9\100\uffa9" +
    "\107\uffa9\112\uffa9\114\uffa9\150\uffa9\001\002\000\004\002" +
    "\uffee\001\002\000\016\033\117\111\055\115\004\116\027" +
    "\117\056\147\010\001\002\000\004\107\177\001\002\000" +
    "\062\033\117\075\036\076\043\077\123\100\106\101\130" +
    "\102\037\103\131\104\127\105\073\106\032\111\055\113" +
    "\077\115\004\116\027\117\056\120\035\121\115\122\044" +
    "\123\112\124\132\125\064\126\121\147\010\001\002\000" +
    "\004\112\201\001\002\000\036\002\uff8d\005\uff8d\006\uff8d" +
    "\033\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\077\uff8d\100" +
    "\uff8d\107\uff8d\112\uff8d\114\uff8d\150\uff8d\001\002\000\004" +
    "\002\uffe1\001\002\000\006\002\uff7b\006\164\001\002\000" +
    "\004\002\uffe2\001\002\000\040\002\uff85\005\uff85\006\uff85" +
    "\033\uff85\071\uff85\072\uff85\073\uff85\074\uff85\077\uff85\100" +
    "\uff85\107\uff85\111\uff85\112\uff85\114\uff85\150\uff85\001\002" +
    "\000\040\002\uff84\005\uff84\006\uff84\033\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\077\uff84\100\uff84\107\uff84\111\uff84" +
    "\112\uff84\114\uff84\150\uff84\001\002\000\040\002\uff83\005" +
    "\uff83\006\uff83\033\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\077\uff83\100\uff83\107\uff83\111\uff83\112\uff83\114\uff83\150" +
    "\uff83\001\002\000\062\033\117\075\036\076\043\077\123" +
    "\100\106\101\130\102\037\103\131\104\127\105\073\106" +
    "\032\111\055\113\077\115\004\116\027\117\056\120\035" +
    "\121\115\122\044\123\112\124\132\125\064\126\121\147" +
    "\010\001\002\000\006\107\214\112\uff8a\001\002\000\004" +
    "\112\213\001\002\000\036\002\uff9a\005\uff9a\006\uff9a\033" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\077\uff9a\100\uff9a" +
    "\107\uff9a\112\uff9a\114\uff9a\150\uff9a\001\002\000\062\033" +
    "\117\075\036\076\043\077\123\100\106\101\130\102\037" +
    "\103\131\104\127\105\073\106\032\111\055\113\077\115" +
    "\004\116\027\117\056\120\035\121\115\122\044\123\112" +
    "\124\132\125\064\126\121\147\010\001\002\000\004\112" +
    "\uff8c\001\002\000\006\107\214\112\uff8a\001\002\000\004" +
    "\112\uff8b\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\004\107\222\001\002\000\016\033" +
    "\117\111\055\115\004\116\027\117\056\147\010\001\002" +
    "\000\004\112\224\001\002\000\036\002\uff92\005\uff92\006" +
    "\uff92\033\uff92\071\uff92\072\uff92\073\uff92\074\uff92\077\uff92" +
    "\100\uff92\107\uff92\112\uff92\114\uff92\150\uff92\001\002\000" +
    "\016\033\117\111\055\115\004\116\027\117\056\147\010" +
    "\001\002\000\004\107\227\001\002\000\016\033\117\111" +
    "\055\115\004\116\027\117\056\147\010\001\002\000\004" +
    "\112\231\001\002\000\036\002\uff90\005\uff90\006\uff90\033" +
    "\uff90\071\uff90\072\uff90\073\uff90\074\uff90\077\uff90\100\uff90" +
    "\107\uff90\112\uff90\114\uff90\150\uff90\001\002\000\004\002" +
    "\uffdd\001\002\000\006\002\uff7b\006\164\001\002\000\004" +
    "\002\uffde\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\016\002\uffbf\005\uffbf\006\uffbf\033" +
    "\uffbf\107\uffbf\112\uffbf\001\002\000\016\002\uffc0\005\uffc0" +
    "\006\uffc0\033\uffc0\107\uffc0\112\uffc0\001\002\000\016\002" +
    "\uffc2\005\uffc2\006\uffc2\033\uffc2\107\uffc2\112\uffc2\001\002" +
    "\000\016\002\uffc1\005\uffc1\006\uffc1\033\uffc1\107\uffc1\112" +
    "\uffc1\001\002\000\036\002\uffa8\005\uffa8\006\uffa8\033\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\077\uffa8\100\uffa8\107" +
    "\uffa8\112\uffa8\114\uffa8\150\uffa8\001\002\000\062\033\117" +
    "\075\036\076\043\077\123\100\106\101\130\102\037\103" +
    "\131\104\127\105\073\106\032\111\055\113\077\115\004" +
    "\116\027\117\056\120\035\121\115\122\044\123\112\124" +
    "\132\125\064\126\121\147\010\001\002\000\004\112\250" +
    "\001\002\000\036\002\uff99\005\uff99\006\uff99\033\uff99\071" +
    "\uff99\072\uff99\073\uff99\074\uff99\077\uff99\100\uff99\107\uff99" +
    "\112\uff99\114\uff99\150\uff99\001\002\000\004\147\252\001" +
    "\002\000\004\111\254\001\002\000\010\002\uff7b\006\164" +
    "\145\263\001\002\000\004\147\255\001\002\000\006\112" +
    "\uff75\147\257\001\002\000\004\112\261\001\002\000\006" +
    "\112\uff75\147\257\001\002\000\004\112\uff76\001\002\000" +
    "\010\002\uff74\006\uff74\145\uff74\001\002\000\004\002\uffed" +
    "\001\002\000\006\002\uff7b\006\164\001\002\000\004\002" +
    "\uffec\001\002\000\022\002\uff72\006\uff72\034\uff72\035\uff72" +
    "\036\uff72\037\uff72\040\uff72\041\uff72\001\002\000\022\002" +
    "\uff73\006\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\041\uff73\001\002\000\022\002\uff69\006\uff69\034\276\035" +
    "\273\036\277\037\274\040\275\041\272\001\002\000\022" +
    "\002\uff71\006\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\041\uff71\001\002\000\006\002\uff7b\006\164\001\002" +
    "\000\006\002\uff6a\006\uff6a\001\002\000\006\002\uff6e\006" +
    "\uff6e\001\002\000\006\002\uff6c\006\uff6c\001\002\000\006" +
    "\002\uff6b\006\uff6b\001\002\000\006\002\uff6f\006\uff6f\001" +
    "\002\000\006\002\uff6d\006\uff6d\001\002\000\004\002\uffe3" +
    "\001\002\000\004\114\307\001\002\000\006\107\303\114" +
    "\uffb9\001\002\000\060\033\117\075\036\076\043\077\123" +
    "\100\106\101\130\102\037\103\131\104\127\105\073\106" +
    "\032\111\055\115\004\116\027\117\056\120\035\121\115" +
    "\122\044\123\112\124\132\125\064\126\121\147\010\001" +
    "\002\000\004\114\uffbb\001\002\000\006\107\303\114\uffb9" +
    "\001\002\000\004\114\uffba\001\002\000\036\002\uffbc\005" +
    "\uffbc\006\uffbc\033\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\077\uffbc\100\uffbc\107\uffbc\112\uffbc\114\uffbc\150\uffbc\001" +
    "\002\000\004\002\uffd5\001\002\000\004\146\312\001\002" +
    "\000\006\107\313\112\314\001\002\000\004\146\316\001" +
    "\002\000\062\033\117\075\036\076\043\077\123\100\106" +
    "\101\130\102\037\103\131\104\127\105\073\106\032\111" +
    "\055\113\077\115\004\116\027\117\056\120\035\121\115" +
    "\122\044\123\112\124\132\125\064\126\121\147\010\001" +
    "\002\000\036\002\uffa2\005\uffa2\006\uffa2\033\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\074\uffa2\077\uffa2\100\uffa2\107\uffa2\112" +
    "\uffa2\114\uffa2\150\uffa2\001\002\000\004\112\317\001\002" +
    "\000\062\033\117\075\036\076\043\077\123\100\106\101" +
    "\130\102\037\103\131\104\127\105\073\106\032\111\055" +
    "\113\077\115\004\116\027\117\056\120\035\121\115\122" +
    "\044\123\112\124\132\125\064\126\121\147\010\001\002" +
    "\000\036\002\uffa3\005\uffa3\006\uffa3\033\uffa3\071\uffa3\072" +
    "\uffa3\073\uffa3\074\uffa3\077\uffa3\100\uffa3\107\uffa3\112\uffa3" +
    "\114\uffa3\150\uffa3\001\002\000\006\002\uff7b\006\164\001" +
    "\002\000\004\002\uffd1\001\002\000\006\002\uff7b\006\164" +
    "\001\002\000\004\002\uffd8\001\002\000\006\002\uff7b\006" +
    "\164\001\002\000\004\002\uffda\001\002\000\004\002\uffd4" +
    "\001\002\000\004\002\uffd3\001\002\000\062\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\113\077\115\004\116" +
    "\027\117\056\120\035\121\115\122\044\123\112\124\132" +
    "\125\064\126\121\147\010\001\002\000\004\107\333\001" +
    "\002\000\016\033\117\111\055\115\004\116\027\117\056" +
    "\147\010\001\002\000\004\112\335\001\002\000\036\002" +
    "\uff8e\005\uff8e\006\uff8e\033\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\074\uff8e\077\uff8e\100\uff8e\107\uff8e\112\uff8e\114\uff8e\150" +
    "\uff8e\001\002\000\004\002\uffd2\001\002\000\012\002\uff79" +
    "\005\146\006\151\033\147\001\002\000\004\002\ufff7\001" +
    "\002\000\004\002\uffef\001\002\000\040\002\uff86\005\uff86" +
    "\006\uff86\033\uff86\071\uff86\072\uff86\073\uff86\074\uff86\077" +
    "\uff86\100\uff86\107\uff86\111\uff86\112\uff86\114\uff86\150\uff86" +
    "\001\002\000\004\112\344\001\002\000\036\002\uff98\005" +
    "\uff98\006\uff98\033\uff98\071\uff98\072\uff98\073\uff98\074\uff98" +
    "\077\uff98\100\uff98\107\uff98\112\uff98\114\uff98\150\uff98\001" +
    "\002\000\004\002\000\001\002\000\006\002\uff7b\006\164" +
    "\001\002\000\004\002\uffdb\001\002\000\060\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\115\004\116\027\117" +
    "\056\120\035\121\115\122\044\123\112\124\132\125\064" +
    "\126\121\147\010\001\002\000\060\033\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\111\uffc3\115\uffc3\116\uffc3\117\uffc3\120" +
    "\uffc3\121\uffc3\122\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3" +
    "\147\uffc3\001\002\000\060\033\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\111\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\147\uffc5" +
    "\001\002\000\060\033\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\111\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122" +
    "\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\147\uffc4\001\002" +
    "\000\024\002\uffc6\005\uffc6\006\uffc6\033\uffc6\071\351\077" +
    "\352\100\353\107\uffc6\112\uffc6\001\002\000\016\002\uffc7" +
    "\005\uffc7\006\uffc7\033\uffc7\107\uffc7\112\uffc7\001\002\000" +
    "\062\033\117\075\036\076\043\077\123\100\106\101\130" +
    "\102\037\103\131\104\127\105\073\106\032\111\055\113" +
    "\077\115\004\116\027\117\056\120\035\121\115\122\044" +
    "\123\112\124\132\125\064\126\121\147\010\001\002\000" +
    "\004\002\uffd7\001\002\000\004\002\uffdf\001\002\000\062" +
    "\033\117\075\036\076\043\077\123\100\106\101\130\102" +
    "\037\103\131\104\127\105\073\106\032\111\055\113\077" +
    "\115\004\116\027\117\056\120\035\121\115\122\044\123" +
    "\112\124\132\125\064\126\121\147\010\001\002\000\004" +
    "\107\363\001\002\000\016\033\117\111\055\115\004\116" +
    "\027\117\056\147\010\001\002\000\004\112\365\001\002" +
    "\000\036\002\uff91\005\uff91\006\uff91\033\uff91\071\uff91\072" +
    "\uff91\073\uff91\074\uff91\077\uff91\100\uff91\107\uff91\112\uff91" +
    "\114\uff91\150\uff91\001\002\000\004\146\367\001\002\000" +
    "\004\107\370\001\002\000\004\146\371\001\002\000\004" +
    "\112\372\001\002\000\062\033\117\075\036\076\043\077" +
    "\123\100\106\101\130\102\037\103\131\104\127\105\073" +
    "\106\032\111\055\113\077\115\004\116\027\117\056\120" +
    "\035\121\115\122\044\123\112\124\132\125\064\126\121" +
    "\147\010\001\002\000\036\002\uffaa\005\uffaa\006\uffaa\033" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\077\uffaa\100\uffaa" +
    "\107\uffaa\112\uffaa\114\uffaa\150\uffaa\001\002\000\036\002" +
    "\uffa6\005\uffa6\006\uffa6\033\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\077\uffa6\100\uffa6\107\uffa6\112\uffa6\114\uffa6\150" +
    "\uffa6\001\002\000\036\002\uffab\005\uffab\006\uffab\033\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\077\uffab\100\uffab\107" +
    "\uffab\112\uffab\114\uffab\150\uffab\001\002\000\062\033\117" +
    "\075\036\076\043\077\123\100\106\101\130\102\037\103" +
    "\131\104\127\105\073\106\032\111\055\113\077\115\004" +
    "\116\027\117\056\120\035\121\115\122\044\123\112\124" +
    "\132\125\064\126\121\147\010\001\002\000\004\107\u0100" +
    "\001\002\000\016\033\117\111\055\115\004\116\027\117" +
    "\056\147\010\001\002\000\004\112\u0102\001\002\000\036" +
    "\002\uff93\005\uff93\006\uff93\033\uff93\071\uff93\072\uff93\073" +
    "\uff93\074\uff93\077\uff93\100\uff93\107\uff93\112\uff93\114\uff93" +
    "\150\uff93\001\002\000\004\002\ufff3\001\002\000\006\002" +
    "\uff7b\006\164\001\002\000\006\002\uff7b\006\164\001\002" +
    "\000\004\002\ufff2\001\002\000\004\002\ufff1\001\002\000" +
    "\004\002\ufffd\001\002\000\006\117\056\147\207\001\002" +
    "\000\006\107\u0110\112\uff87\001\002\000\004\112\u010c\001" +
    "\002\000\004\111\u010d\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\004\112\u010f\001\002" +
    "\000\036\002\uffa1\005\uffa1\006\uffa1\033\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\077\uffa1\100\uffa1\107\uffa1\112\uffa1" +
    "\114\uffa1\150\uffa1\001\002\000\006\117\056\147\207\001" +
    "\002\000\006\107\uff89\112\uff89\001\002\000\006\107\u0110" +
    "\112\uff87\001\002\000\006\107\uff88\112\uff88\001\002\000" +
    "\006\002\uff7b\006\164\001\002\000\004\002\uffe0\001\002" +
    "\000\004\002\uffce\001\002\000\006\117\056\147\207\001" +
    "\002\000\004\107\u0119\001\002\000\062\033\117\075\036" +
    "\076\043\077\123\100\106\101\130\102\037\103\131\104" +
    "\127\105\073\106\032\111\055\113\077\115\004\116\027" +
    "\117\056\120\035\121\115\122\044\123\112\124\132\125" +
    "\064\126\121\147\010\001\002\000\004\107\u011b\001\002" +
    "\000\062\033\117\075\036\076\043\077\123\100\106\101" +
    "\130\102\037\103\131\104\127\105\073\106\032\111\055" +
    "\113\077\115\004\116\027\117\056\120\035\121\115\122" +
    "\044\123\112\124\132\125\064\126\121\147\010\001\002" +
    "\000\006\107\u011d\112\u011e\001\002\000\062\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\113\077\115\004\116" +
    "\027\117\056\120\035\121\115\122\044\123\112\124\132" +
    "\125\064\126\121\147\010\001\002\000\036\002\uff94\005" +
    "\uff94\006\uff94\033\uff94\071\uff94\072\uff94\073\uff94\074\uff94" +
    "\077\uff94\100\uff94\107\uff94\112\uff94\114\uff94\150\uff94\001" +
    "\002\000\004\112\u0120\001\002\000\036\002\uff95\005\uff95" +
    "\006\uff95\033\uff95\071\uff95\072\uff95\073\uff95\074\uff95\077" +
    "\uff95\100\uff95\107\uff95\112\uff95\114\uff95\150\uff95\001\002" +
    "\000\040\077\u0124\100\u012e\127\u012f\130\u012d\131\u0125\132" +
    "\u0128\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131\140\u012c" +
    "\141\u0122\142\u0123\143\u0129\001\002\000\004\111\u0169\001" +
    "\002\000\014\002\uff68\006\uff68\107\uff68\111\uff68\112\uff68" +
    "\001\002\000\004\111\u0165\001\002\000\004\111\u0161\001" +
    "\002\000\004\111\u0159\001\002\000\004\111\u0151\001\002" +
    "\000\004\111\u014e\001\002\000\014\002\uff67\006\uff67\107" +
    "\uff67\111\uff67\112\uff67\001\002\000\004\111\u014b\001\002" +
    "\000\004\111\u0148\001\002\000\004\111\u0143\001\002\000" +
    "\004\111\u0140\001\002\000\004\111\u0139\001\002\000\004" +
    "\111\u0136\001\002\000\006\002\uff7b\006\164\001\002\000" +
    "\004\111\u0132\001\002\000\004\147\u0133\001\002\000\004" +
    "\112\u0134\001\002\000\014\002\uff65\006\uff65\107\uff65\111" +
    "\uff65\112\uff65\001\002\000\004\002\uffeb\001\002\000\040" +
    "\077\u0124\100\u012e\127\u012f\130\u012d\131\u0125\132\u0128\133" +
    "\u012a\134\u0126\135\u0127\136\u012b\137\u0131\140\u012c\141\u0122" +
    "\142\u0123\143\u0129\001\002\000\004\112\u0138\001\002\000" +
    "\014\002\uff62\006\uff62\107\uff62\111\uff62\112\uff62\001\002" +
    "\000\042\077\u0124\100\u012e\112\u013a\127\u012f\130\u012d\131" +
    "\u0125\132\u0128\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131" +
    "\140\u012c\141\u0122\142\u0123\143\u0129\001\002\000\014\002" +
    "\uff5d\006\uff5d\107\uff5d\111\uff5d\112\uff5d\001\002\000\006" +
    "\107\u013e\112\uff55\001\002\000\004\112\u013d\001\002\000" +
    "\014\002\uff5e\006\uff5e\107\uff5e\111\uff5e\112\uff5e\001\002" +
    "\000\040\077\u0124\100\u012e\127\u012f\130\u012d\131\u0125\132" +
    "\u0128\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131\140\u012c" +
    "\141\u0122\142\u0123\143\u0129\001\002\000\004\112\uff56\001" +
    "\002\000\040\077\u0124\100\u012e\127\u012f\130\u012d\131\u0125" +
    "\132\u0128\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131\140" +
    "\u012c\141\u0122\142\u0123\143\u0129\001\002\000\004\112\u0142" +
    "\001\002\000\014\002\uff61\006\uff61\107\uff61\111\uff61\112" +
    "\uff61\001\002\000\004\147\u0144\001\002\000\004\107\u0145" +
    "\001\002\000\004\147\u0146\001\002\000\004\112\u0147\001" +
    "\002\000\014\002\uff64\006\uff64\107\uff64\111\uff64\112\uff64" +
    "\001\002\000\004\147\u0149\001\002\000\004\112\u014a\001" +
    "\002\000\014\002\uff66\006\uff66\107\uff66\111\uff66\112\uff66" +
    "\001\002\000\040\077\u0124\100\u012e\127\u012f\130\u012d\131" +
    "\u0125\132\u0128\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131" +
    "\140\u012c\141\u0122\142\u0123\143\u0129\001\002\000\004\112" +
    "\u014d\001\002\000\014\002\uff59\006\uff59\107\uff59\111\uff59" +
    "\112\uff59\001\002\000\040\077\u0124\100\u012e\127\u012f\130" +
    "\u012d\131\u0125\132\u0128\133\u012a\134\u0126\135\u0127\136\u012b" +
    "\137\u0131\140\u012c\141\u0122\142\u0123\143\u0129\001\002\000" +
    "\004\112\u0150\001\002\000\014\002\uff5a\006\uff5a\107\uff5a" +
    "\111\uff5a\112\uff5a\001\002\000\040\077\u0124\100\u012e\127" +
    "\u012f\130\u012d\131\u0125\132\u0128\133\u012a\134\u0126\135\u0127" +
    "\136\u012b\137\u0131\140\u012c\141\u0122\142\u0123\143\u0129\001" +
    "\002\000\004\107\u0153\001\002\000\040\077\u0124\100\u012e" +
    "\127\u012f\130\u012d\131\u0125\132\u0128\133\u012a\134\u0126\135" +
    "\u0127\136\u012b\137\u0131\140\u012c\141\u0122\142\u0123\143\u0129" +
    "\001\002\000\004\111\u0155\001\002\000\062\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\113\077\115\004\116" +
    "\027\117\056\120\035\121\115\122\044\123\112\124\132" +
    "\125\064\126\121\147\010\001\002\000\004\112\u0157\001" +
    "\002\000\004\112\u0158\001\002\000\014\002\uff57\006\uff57" +
    "\107\uff57\111\uff57\112\uff57\001\002\000\040\077\u0124\100" +
    "\u012e\127\u012f\130\u012d\131\u0125\132\u0128\133\u012a\134\u0126" +
    "\135\u0127\136\u012b\137\u0131\140\u012c\141\u0122\142\u0123\143" +
    "\u0129\001\002\000\004\111\u015b\001\002\000\062\033\117" +
    "\075\036\076\043\077\123\100\106\101\130\102\037\103" +
    "\131\104\127\105\073\106\032\111\055\113\077\115\004" +
    "\116\027\117\056\120\035\121\115\122\044\123\112\124" +
    "\132\125\064\126\121\147\010\001\002\000\004\112\u015d" +
    "\001\002\000\004\107\u015e\001\002\000\040\077\u0124\100" +
    "\u012e\127\u012f\130\u012d\131\u0125\132\u0128\133\u012a\134\u0126" +
    "\135\u0127\136\u012b\137\u0131\140\u012c\141\u0122\142\u0123\143" +
    "\u0129\001\002\000\004\112\u0160\001\002\000\014\002\uff58" +
    "\006\uff58\107\uff58\111\uff58\112\uff58\001\002\000\042\077" +
    "\u0124\100\u012e\112\u0162\127\u012f\130\u012d\131\u0125\132\u0128" +
    "\133\u012a\134\u0126\135\u0127\136\u012b\137\u0131\140\u012c\141" +
    "\u0122\142\u0123\143\u0129\001\002\000\014\002\uff5b\006\uff5b" +
    "\107\uff5b\111\uff5b\112\uff5b\001\002\000\004\112\u0164\001" +
    "\002\000\014\002\uff5c\006\uff5c\107\uff5c\111\uff5c\112\uff5c" +
    "\001\002\000\042\077\u0124\100\u012e\112\u0166\127\u012f\130" +
    "\u012d\131\u0125\132\u0128\133\u012a\134\u0126\135\u0127\136\u012b" +
    "\137\u0131\140\u012c\141\u0122\142\u0123\143\u0129\001\002\000" +
    "\014\002\uff5f\006\uff5f\107\uff5f\111\uff5f\112\uff5f\001\002" +
    "\000\004\112\u0168\001\002\000\014\002\uff60\006\uff60\107" +
    "\uff60\111\uff60\112\uff60\001\002\000\004\147\u016a\001\002" +
    "\000\004\107\u016b\001\002\000\004\147\u016c\001\002\000" +
    "\004\112\u016d\001\002\000\014\002\uff63\006\uff63\107\uff63" +
    "\111\uff63\112\uff63\001\002\000\062\033\117\075\036\076" +
    "\043\077\123\100\106\101\130\102\037\103\131\104\127" +
    "\105\073\106\032\111\055\113\077\115\004\116\027\117" +
    "\056\120\035\121\115\122\044\123\112\124\132\125\064" +
    "\126\121\147\010\001\002\000\006\002\uff7b\006\164\001" +
    "\002\000\004\002\ufff9\001\002\000\004\002\ufffc\001\002" +
    "\000\006\002\uffea\147\u0173\001\002\000\006\002\uffe9\111" +
    "\254\001\002\000\004\002\uffe8\001\002\000\062\033\117" +
    "\075\036\076\043\077\123\100\106\101\130\102\037\103" +
    "\131\104\127\105\073\106\032\111\055\113\077\115\004" +
    "\116\027\117\056\120\035\121\115\122\044\123\112\124" +
    "\132\125\064\126\121\147\010\001\002\000\006\002\uff7b" +
    "\006\164\001\002\000\004\002\ufff4\001\002\000\012\002" +
    "\uff79\005\146\006\151\033\147\001\002\000\004\002\ufff8" +
    "\001\002\000\012\002\uff79\005\146\006\151\033\147\001" +
    "\002\000\004\002\ufff6\001\002\000\004\002\uffdc\001\002" +
    "\000\006\002\uff7b\006\164\001\002\000\006\002\uffca\006" +
    "\uffca\001\002\000\006\002\uffcb\006\uffcb\001\002\000\006" +
    "\002\uffcc\006\uffcc\001\002\000\004\002\uffd0\001\002\000" +
    "\004\147\u0183\001\002\000\012\002\uffe7\027\u0184\030\u0185" +
    "\031\u0186\001\002\000\004\146\u0189\001\002\000\004\146" +
    "\u0188\001\002\000\004\146\u0187\001\002\000\004\002\uffe4" +
    "\001\002\000\004\002\uffe5\001\002\000\004\002\uffe6\001" +
    "\002\000\004\002\uffd9\001\002\000\004\147\u018c\001\002" +
    "\000\036\002\uff9d\005\uff9d\006\uff9d\033\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\077\uff9d\100\uff9d\107\uff9d\112\uff9d" +
    "\114\uff9d\150\uff9d\001\002\000\006\002\uff7b\006\164\001" +
    "\002\000\004\002\uffcf\001\002\000\006\002\uff7b\006\164" +
    "\001\002\000\004\002\uffcd\001\002\000\004\002\ufff0\001" +
    "\002\000\006\117\056\147\207\001\002\000\004\107\u0194" +
    "\001\002\000\062\033\117\075\036\076\043\077\123\100" +
    "\106\101\130\102\037\103\131\104\127\105\073\106\032" +
    "\111\055\113\077\115\004\116\027\117\056\120\035\121" +
    "\115\122\044\123\112\124\132\125\064\126\121\147\010" +
    "\001\002\000\004\107\u0196\001\002\000\062\033\117\075" +
    "\036\076\043\077\123\100\106\101\130\102\037\103\131" +
    "\104\127\105\073\106\032\111\055\113\077\115\004\116" +
    "\027\117\056\120\035\121\115\122\044\123\112\124\132" +
    "\125\064\126\121\147\010\001\002\000\006\107\u0198\112" +
    "\u0199\001\002\000\062\033\117\075\036\076\043\077\123" +
    "\100\106\101\130\102\037\103\131\104\127\105\073\106" +
    "\032\111\055\113\077\115\004\116\027\117\056\120\035" +
    "\121\115\122\044\123\112\124\132\125\064\126\121\147" +
    "\010\001\002\000\036\002\uff96\005\uff96\006\uff96\033\uff96" +
    "\071\uff96\072\uff96\073\uff96\074\uff96\077\uff96\100\uff96\107" +
    "\uff96\112\uff96\114\uff96\150\uff96\001\002\000\004\112\u019b" +
    "\001\002\000\036\002\uff97\005\uff97\006\uff97\033\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\077\uff97\100\uff97\107\uff97" +
    "\112\uff97\114\uff97\150\uff97\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\070\002\053\003\015\004\060\005\067\017" +
    "\032\022\023\023\113\024\016\025\046\026\050\027\104" +
    "\030\041\031\061\032\020\033\073\034\112\035\052\036" +
    "\047\037\107\040\100\041\037\042\040\043\101\044\074" +
    "\045\103\046\115\050\106\001\001\000\002\001\001\000" +
    "\004\010\u0190\001\001\000\004\006\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0189\001\001\000" +
    "\002\001\001\000\004\006\u017c\001\001\000\004\010\u017b" +
    "\001\001\000\060\017\133\022\u0179\023\113\024\016\025" +
    "\046\026\050\027\104\030\041\031\061\032\020\033\073" +
    "\034\112\035\052\036\047\037\107\040\100\041\037\042" +
    "\040\043\101\044\074\045\103\046\115\050\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\017\133\022" +
    "\u0177\023\113\024\016\025\046\026\050\027\104\030\041" +
    "\031\061\032\020\033\073\034\112\035\052\036\047\037" +
    "\107\040\100\041\037\042\040\043\101\044\074\045\103" +
    "\046\115\050\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0115\001\001\000\056\017\133\025\141\026\050\027\104" +
    "\030\041\031\061\032\020\033\073\034\112\035\052\036" +
    "\047\037\107\040\100\041\037\042\040\043\101\044\074" +
    "\045\103\046\115\047\171\050\167\055\u0113\001\001\000" +
    "\002\001\001\000\004\007\u0107\001\001\000\004\010\u0102" +
    "\001\001\000\002\001\001\000\016\017\133\033\374\034" +
    "\112\035\052\045\103\046\115\001\001\000\052\017\133" +
    "\025\141\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\357\001" +
    "\001\000\002\001\001\000\004\016\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\017\133\025\141\026" +
    "\050\027\104\030\041\031\061\032\020\033\073\034\112" +
    "\035\052\036\047\037\107\040\100\041\037\042\040\043" +
    "\101\044\074\045\103\046\115\047\171\050\167\055\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\017" +
    "\133\022\342\023\113\024\016\025\046\026\050\027\104" +
    "\030\041\031\061\032\020\033\073\034\112\035\052\036" +
    "\047\037\107\040\100\041\037\042\040\043\101\044\074" +
    "\045\103\046\115\050\106\001\001\000\002\001\001\000" +
    "\004\010\340\001\001\000\060\017\133\022\336\023\113" +
    "\024\016\025\046\026\050\027\104\030\041\031\061\032" +
    "\020\033\073\034\112\035\052\036\047\037\107\040\100" +
    "\041\037\042\040\043\101\044\074\045\103\046\115\050" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\335\001\001\000\002\001\001\000\004\010\327\001" +
    "\001\000\004\010\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\133\033\322\034\112\035\052\045" +
    "\103\046\115\001\001\000\056\017\133\025\141\026\050" +
    "\027\104\030\041\031\061\032\020\033\073\034\112\035" +
    "\052\036\047\037\107\040\100\041\037\042\040\043\101" +
    "\044\074\045\103\046\115\047\171\050\167\055\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\017\133\025\301\026\050\027" +
    "\104\030\041\031\061\032\020\033\073\034\112\035\052" +
    "\036\047\037\107\040\100\041\037\042\040\043\101\044" +
    "\074\045\103\046\115\051\300\001\001\000\004\014\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\017\133" +
    "\025\141\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\205" +
    "\045\204\001\001\000\004\010\201\001\001\000\002\001" +
    "\001\000\004\010\173\001\001\000\052\017\133\025\141" +
    "\026\050\027\104\030\041\031\061\032\020\033\073\034" +
    "\112\035\052\036\047\037\107\040\100\041\037\042\040" +
    "\043\101\044\074\045\103\046\115\050\172\001\001\000" +
    "\002\001\001\000\060\017\133\022\161\023\113\024\016" +
    "\025\046\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\106\001" +
    "\001\000\060\017\133\022\144\023\113\024\016\025\046" +
    "\026\050\027\104\030\041\031\061\032\020\033\073\034" +
    "\112\035\052\036\047\037\107\040\100\041\037\042\040" +
    "\043\101\044\074\045\103\046\115\050\106\001\001\000" +
    "\052\017\133\025\141\026\050\027\104\030\041\031\061" +
    "\032\020\033\073\034\112\035\052\036\047\037\107\040" +
    "\100\041\037\042\040\043\101\044\074\045\103\046\115" +
    "\050\143\001\001\000\052\017\133\025\141\026\050\027" +
    "\104\030\041\031\061\032\020\033\073\034\112\035\052" +
    "\036\047\037\107\040\100\041\037\042\040\043\101\044" +
    "\074\045\103\046\115\050\142\001\001\000\052\017\133" +
    "\025\141\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\140\001" +
    "\001\000\002\001\001\000\016\017\133\033\134\034\112" +
    "\035\052\045\103\046\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\017\133\022\136\023\113\024\016" +
    "\025\046\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\147\011\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\017\133\022\164\023\113\024\016\025\046\026\050" +
    "\027\104\030\041\031\061\032\020\033\073\034\112\035" +
    "\052\036\047\037\107\040\100\041\037\042\040\043\101" +
    "\044\074\045\103\046\115\050\106\001\001\000\004\010" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\147\011\165\001\001\000\002\001\001\000\056\017" +
    "\133\025\141\026\050\027\104\030\041\031\061\032\020" +
    "\033\073\034\112\035\052\036\047\037\107\040\100\041" +
    "\037\042\040\043\101\044\074\045\103\046\115\047\171" +
    "\050\167\055\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\133\033\175\034\112\035\052\045\103\046" +
    "\115\001\001\000\002\001\001\000\060\017\133\022\177" +
    "\023\113\024\016\025\046\026\050\027\104\030\041\031" +
    "\061\032\020\033\073\034\112\035\052\036\047\037\107" +
    "\040\100\041\037\042\040\043\101\044\074\045\103\046" +
    "\115\050\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\017\133\025\141\026\050\027\104\030\041\031" +
    "\061\032\020\033\073\034\112\035\052\036\047\037\107" +
    "\040\100\041\037\042\040\043\101\044\074\045\103\046" +
    "\115\050\210\056\211\001\001\000\004\057\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\017\133\025" +
    "\141\026\050\027\104\030\041\031\061\032\020\033\073" +
    "\034\112\035\052\036\047\037\107\040\100\041\037\042" +
    "\040\043\101\044\074\045\103\046\115\050\215\001\001" +
    "\000\002\001\001\000\004\057\216\001\001\000\002\001" +
    "\001\000\060\017\133\022\220\023\113\024\016\025\046" +
    "\026\050\027\104\030\041\031\061\032\020\033\073\034" +
    "\112\035\052\036\047\037\107\040\100\041\037\042\040" +
    "\043\101\044\074\045\103\046\115\050\106\001\001\000" +
    "\002\001\001\000\016\017\133\033\222\034\112\035\052" +
    "\045\103\046\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\133\033\225\034\112\035\052\045\103" +
    "\046\115\001\001\000\002\001\001\000\016\017\133\033" +
    "\227\034\112\035\052\045\103\046\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\233\001\001\000\002\001\001\000\052\017\133\025\141" +
    "\026\050\027\104\030\041\031\061\032\020\033\073\034" +
    "\112\035\052\036\047\037\107\040\100\041\037\042\040" +
    "\043\101\044\074\045\103\046\115\050\243\001\001\000" +
    "\052\017\133\025\141\026\050\027\104\030\041\031\061" +
    "\032\020\033\073\034\112\035\052\036\047\037\107\040" +
    "\100\041\037\042\040\043\101\044\074\045\103\046\115" +
    "\050\242\001\001\000\052\017\133\025\141\026\050\027" +
    "\104\030\041\031\061\032\020\033\073\034\112\035\052" +
    "\036\047\037\107\040\100\041\037\042\040\043\101\044" +
    "\074\045\103\046\115\050\241\001\001\000\052\017\133" +
    "\025\141\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\017\133\025" +
    "\141\026\050\027\104\030\041\031\061\032\020\033\073" +
    "\034\112\035\052\036\047\037\107\040\100\041\037\042" +
    "\040\043\101\044\074\045\103\046\115\050\210\056\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\252\001\001\000\004\010\261\001\001" +
    "\000\002\001\001\000\004\012\255\001\001\000\002\001" +
    "\001\000\004\012\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\270\001\001\000\002\001\001\000\004\010\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\303\001\001" +
    "\000\050\017\133\025\304\026\050\027\104\030\041\031" +
    "\061\032\020\033\073\034\112\035\052\036\047\037\107" +
    "\040\100\041\037\042\040\043\101\044\074\045\103\046" +
    "\115\001\001\000\002\001\001\000\004\052\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\017\133\025\141\026\050\027\104\030\041\031\061\032" +
    "\020\033\073\034\112\035\052\036\047\037\107\040\100" +
    "\041\037\042\040\043\101\044\074\045\103\046\115\050" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\017\133\025\141\026\050\027\104\030\041\031\061\032" +
    "\020\033\073\034\112\035\052\036\047\037\107\040\100" +
    "\041\037\042\040\043\101\044\074\045\103\046\115\050" +
    "\317\001\001\000\002\001\001\000\004\010\321\001\001" +
    "\000\002\001\001\000\004\010\323\001\001\000\002\001" +
    "\001\000\004\010\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\017\133\022\331\023" +
    "\113\024\016\025\046\026\050\027\104\030\041\031\061" +
    "\032\020\033\073\034\112\035\052\036\047\037\107\040" +
    "\100\041\037\042\040\043\101\044\074\045\103\046\115" +
    "\050\106\001\001\000\002\001\001\000\016\017\133\033" +
    "\333\034\112\035\052\045\103\046\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\147\011\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\346\001\001\000\002\001\001" +
    "\000\052\017\133\023\354\025\353\026\050\027\104\030" +
    "\041\031\061\032\020\033\073\034\112\035\052\036\047" +
    "\037\107\040\100\041\037\042\040\043\101\044\074\045" +
    "\103\046\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\347\001\001\000\002\001" +
    "\001\000\054\017\133\025\141\026\050\027\104\030\041" +
    "\031\061\032\020\033\073\034\112\035\052\036\047\037" +
    "\107\040\100\041\037\042\040\043\101\044\074\045\103" +
    "\046\115\047\356\050\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\017\133\022\361\023\113\024\016" +
    "\025\046\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\106\001" +
    "\001\000\002\001\001\000\016\017\133\033\363\034\112" +
    "\035\052\045\103\046\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\017\133\025\141\026" +
    "\050\027\104\030\041\031\061\032\020\033\073\034\112" +
    "\035\052\036\047\037\107\040\100\041\037\042\040\043" +
    "\101\044\074\045\103\046\115\050\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\017" +
    "\133\022\376\023\113\024\016\025\046\026\050\027\104" +
    "\030\041\031\061\032\020\033\073\034\112\035\052\036" +
    "\047\037\107\040\100\041\037\042\040\043\101\044\074" +
    "\045\103\046\115\050\106\001\001\000\002\001\001\000" +
    "\016\017\133\033\u0100\034\112\035\052\045\103\046\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0106\001\001\000\004\010\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\205\045\u0109\053\u010a\001\001\000\004\054\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\017" +
    "\133\022\u010d\023\113\024\016\025\046\026\050\027\104" +
    "\030\041\031\061\032\020\033\073\034\112\035\052\036" +
    "\047\037\107\040\100\041\037\042\040\043\101\044\074" +
    "\045\103\046\115\050\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\205\045\u0111\001\001\000\002" +
    "\001\001\000\004\054\u0112\001\001\000\002\001\001\000" +
    "\004\010\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\205\045\u0109\053\u0117\001\001\000\002\001" +
    "\001\000\052\017\133\025\141\026\050\027\104\030\041" +
    "\031\061\032\020\033\073\034\112\035\052\036\047\037" +
    "\107\040\100\041\037\042\040\043\101\044\074\045\103" +
    "\046\115\050\u0119\001\001\000\002\001\001\000\052\017" +
    "\133\025\141\026\050\027\104\030\041\031\061\032\020" +
    "\033\073\034\112\035\052\036\047\037\107\040\100\041" +
    "\037\042\040\043\101\044\074\045\103\046\115\050\u011b" +
    "\001\001\000\002\001\001\000\052\017\133\025\141\026" +
    "\050\027\104\030\041\031\061\032\020\033\073\034\112" +
    "\035\052\036\047\037\107\040\100\041\037\042\040\043" +
    "\101\044\074\045\103\046\115\050\u011e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\u013a\021" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u013a\021\u013e\001" +
    "\001\000\002\001\001\000\004\020\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u014b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0151\001\001\000\002\001\001\000\004" +
    "\020\u0153\001\001\000\002\001\001\000\060\017\133\022" +
    "\u0155\023\113\024\016\025\046\026\050\027\104\030\041" +
    "\031\061\032\020\033\073\034\112\035\052\036\047\037" +
    "\107\040\100\041\037\042\040\043\101\044\074\045\103" +
    "\046\115\050\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0159\001\001\000\002" +
    "\001\001\000\060\017\133\022\u015b\023\113\024\016\025" +
    "\046\026\050\027\104\030\041\031\061\032\020\033\073" +
    "\034\112\035\052\036\047\037\107\040\100\041\037\042" +
    "\040\043\101\044\074\045\103\046\115\050\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u015e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\u013a" +
    "\021\u0162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\u013a\021\u0166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\017\133\025\141\026\050\027" +
    "\104\030\041\031\061\032\020\033\073\034\112\035\052" +
    "\036\047\037\107\040\100\041\037\042\040\043\101\044" +
    "\074\045\103\046\115\050\u016e\001\001\000\004\010\u016f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0173\001\001\000\002\001\001\000\054" +
    "\017\133\025\141\026\050\027\104\030\041\031\061\032" +
    "\020\033\073\034\112\035\052\036\047\037\107\040\100" +
    "\041\037\042\040\043\101\044\074\045\103\046\115\047" +
    "\u0175\050\167\001\001\000\004\010\u0176\001\001\000\002" +
    "\001\001\000\006\007\147\011\u0178\001\001\000\002\001" +
    "\001\000\006\007\147\011\u017a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u018d\001\001\000\002" +
    "\001\001\000\004\010\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\205\045\u0109\053\u0192\001\001" +
    "\000\002\001\001\000\052\017\133\025\141\026\050\027" +
    "\104\030\041\031\061\032\020\033\073\034\112\035\052" +
    "\036\047\037\107\040\100\041\037\042\040\043\101\044" +
    "\074\045\103\046\115\050\u0194\001\001\000\002\001\001" +
    "\000\052\017\133\025\141\026\050\027\104\030\041\031" +
    "\061\032\020\033\073\034\112\035\052\036\047\037\107" +
    "\040\100\041\037\042\040\043\101\044\074\045\103\046" +
    "\115\050\u0196\001\001\000\002\001\001\000\052\017\133" +
    "\025\141\026\050\027\104\030\041\031\061\032\020\033" +
    "\073\034\112\035\052\036\047\037\107\040\100\041\037" +
    "\042\040\043\101\044\074\045\103\046\115\050\u0199\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



String command;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= wffNameCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= snepslogCommand 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = sc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= wffCommand 
            {
              String RESULT =null;
		 

		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wffNameCommand ::= wffName terminalPunctuation 
            {
              String RESULT =null;
		 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffNameCommand",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wffCommand ::= wff terminalPunctuation 
            {
              String RESULT =null;
		 
				
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // snepslogCommand ::= ACTIVATE wff optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // snepslogCommand ::= ACTIVATE BANG wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 
                		RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // snepslogCommand ::= ADD_TO_CONTEXT IDENTIFIER termSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // snepslogCommand ::= ASK wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // snepslogCommand ::= ASKIFNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // snepslogCommand ::= ASKWH wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // snepslogCommand ::= ASKWHNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // snepslogCommand ::= BELIEFS_ABOUT IDENTIFIER pTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // snepslogCommand ::= BR_MODE optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // snepslogCommand ::= BR_MODE AUTO optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // snepslogCommand ::= BR_MODE MANUAL optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // snepslogCommand ::= CLEAR_INFER optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "This functionality is still under development.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // snepslogCommand ::= CLEARKB optionalDot 
            {
              String RESULT =null;
		 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // snepslogCommand ::= COPYRIGHT optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "copyright statement goes here.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list STRING_LIT optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // snepslogCommand ::= DEFINE_PATH IDENTIFIER path optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER EXPAND INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER REDUCE INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER NONE INT_LIT 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // snepslogCommand ::= DEMO demoFirstOptionalOptionSet demoSecondOptionalOptionSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // snepslogCommand ::= DESCRIBE_CONTEXT IDENTIFIER optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // snepslogCommand ::= DESCRIBE_CONTEXT optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // snepslogCommand ::= DESCRIBE_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // snepslogCommand ::= EXPERT optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // snepslogCommand ::= LIST_ASSERTED_WFFS IDENTIFIER optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // snepslogCommand ::= LIST_ASSERTED_WFFS optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // snepslogCommand ::= LIST_CONTEXTS optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // snepslogCommand ::= LIST_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // snepslogCommand ::= LOAD FILEPATH optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // snepslogCommand ::= NORMAL optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // snepslogCommand ::= PERFORM atomicTerm optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // snepslogCommand ::= REMOVE_FROM_CONTEXT IDENTIFIER pTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // snepslogCommand ::= SET_CONTEXT IDENTIFIER optionalPTermSet 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // snepslogCommand ::= SET_DEFAULT_CONTEXT IDENTIFIER 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // snepslogCommand ::= SET_MODE_1 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // snepslogCommand ::= SET_MODE_2 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // snepslogCommand ::= SET_MODE_3 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // snepslogCommand ::= SHOW optionalPTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // snepslogCommand ::= TRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // snepslogCommand ::= UNDEFINE_PATH IDENTIFIER optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // snepslogCommand ::= UNLABELED optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // snepslogCommand ::= UNTRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // snepslogFunction ::= INFERENCE 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // snepslogFunction ::= ACTING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // snepslogFunction ::= PARSING 
            {
              String RESULT =null;
		
			
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // wff ::= infixedTerm 
            {
              Node RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // wff ::= entailment 
            {
              Node RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // infixedTerm ::= prefixedTerm andOrEquality infixedTerm 
            {
              Node RESULT =null;
		
    
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // infixedTerm ::= prefixedTerm 
            {
              Node RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // andOrEquality ::= AND 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // andOrEquality ::= OR 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // andOrEquality ::= EQUALITY 
            {
              String RESULT =null;
		
             
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // entailment ::= termSet IMPLICATION termSet 
            {
              Node RESULT =null;
		
    
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // entailment ::= termSet OR_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // entailment ::= termSet AND_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // entailment ::= termSet NUMERICAL_ENTAILMENT termSet 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pTermSet ::= termSet 
            {
              ArrayList<Node> RESULT =null;
		
    
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pTermSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termSet ::= prefixedTerm 
            {
              ArrayList<Node> RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termSet ::= OPEN_CURLY termSequence CLOSE_CURLY 
            {
              ArrayList<Node> RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termSequence ::= prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSequence",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prefixedTerms ::= COMMA prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		
			
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prefixedTerms ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixedTerm ::= negatedTerm 
            {
              Node RESULT =null;
		
			
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixedTerm ::= andorTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixedTerm ::= setTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prefixedTerm ::= threshTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixedTerm ::= allTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixedTerm ::= atomicTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixedTerm ::= ifdoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prefixedTerm ::= whendoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prefixedTerm ::= wheneverdoTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prefixedTerm ::= actplanTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prefixedTerm ::= effectTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prefixedTerm ::= goalplanTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prefixedTerm ::= preconditionTerm 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // negatedTerm ::= NOT atomicTerm 
            {
              Node RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negatedTerm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
			
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andorTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // setTerm ::= AND termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // setTerm ::= OR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // setTerm ::= NAND termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // setTerm ::= NOR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // setTerm ::= XOR termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // setTerm ::= IFF termSet 
            {
              Node RESULT =null;
		
             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
             
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // threshTerm ::= THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		
             
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atomicTerm ::= wffName 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atomicTerm ::= qvar 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // atomicTerm ::= IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // atomicTerm ::= IDENTIFIER COLON IDENTIFIER 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // atomicTerm ::= withsomeTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atomicTerm ::= withallTerm 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomicTerm ::= qvar OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // atomicTerm ::= snepslogSymbol OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // atomicTerm ::= OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
           
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		
             
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdoTerm",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whendoTerm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wheneverdoTerm",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actplanTerm",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("effectTerm",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goalplanTerm",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		
			
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preconditionTerm",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // termSetSequence ::= termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSetSequence",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // termSets ::= COMMA termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // termSets ::= 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // symbolSequence ::= snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolSequence",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		
			
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // snepslogSymbols ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // wffName ::= WFF INT_LIT 
            {
              String RESULT =null;
		
			
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffName",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // qvar ::= QUESTION_MARK snepslogSymbol 
            {
              Node RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qvar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // snepslogSymbol ::= wffName 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // snepslogSymbol ::= IDENTIFIER 
            {
              Node RESULT =null;
		
               
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminalPunctuation ::= DOT 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // terminalPunctuation ::= BANG 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // terminalPunctuation ::= QUESTION_MARK QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // terminalPunctuation ::= QUESTION_MARK 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		
           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optionalDot ::= DOT 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // optionalDot ::= 
            {
              String RESULT =null;
		
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optionalTerminalPunctuation ::= terminalPunctuation 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optionalTerminalPunctuation ::= 
            {
              String RESULT =null;
		
			
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optionalPTermSet ::= pTermSet 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optionalPTermSet ::= 
            {
              ArrayList<Node> RESULT =null;
		
			
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // identifiers ::= IDENTIFIER identifiers 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // identifiers ::= 
            {
              String RESULT =null;
		
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN 
            {
              String RESULT =null;
		
                 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // demoFirstOptionalOptionSet ::= FILEPATH 
            {
              String RESULT =null;
		
						  
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // demoFirstOptionalOptionSet ::= QUESTION_MARK 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // demoFirstOptionalOptionSet ::= INT_LIT 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // demoFirstOptionalOptionSet ::= 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoFirstOptionalOptionSet",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // demoSecondOptionalOptionSet ::= OPTION_T 
            {
              String RESULT =null;
		
						  
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // demoSecondOptionalOptionSet ::= OPTION_B 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // demoSecondOptionalOptionSet ::= OPTION_BV 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // demoSecondOptionalOptionSet ::= OPTION_A 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // demoSecondOptionalOptionSet ::= OPTION_AV 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // demoSecondOptionalOptionSet ::= OPTION_N 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // demoSecondOptionalOptionSet ::= 
            {
              String RESULT =null;
		
			
				          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("demoSecondOptionalOptionSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // path ::= BANGPATH 
            {
              Path RESULT =null;
		
     
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // path ::= EMPTYPATH 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // path ::= FUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // path ::= BUNIT OPEN_PARAN IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // path ::= CFRESFUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // path ::= CFRESBUNIT OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // path ::= KPLUS OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // path ::= KSTAR OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // path ::= AND OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // path ::= AND OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // path ::= OR OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // path ::= OR OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // path ::= COMPOSE OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // path ::= COMPOSE OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // path ::= CONVERSE OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // path ::= IRREFLEXIVE_RESTRICT OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // path ::= DOMAIN_RESTRICT OPEN_PARAN path OPEN_PARAN wff CLOSE_PARAN COMMA path CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // path ::= RANGE_RESTRICT OPEN_PARAN path COMMA path OPEN_PARAN wff CLOSE_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
			
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // paths ::= path COMMA paths 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // paths ::= path 
            {
              ArrayList<Path> RESULT =null;
		
      
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
