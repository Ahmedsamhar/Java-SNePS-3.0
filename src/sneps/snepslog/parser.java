
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Set;
import sneps.network.Node;
import sneps.network.PropositionNode;
import sneps.network.VariableNode;
import sneps.network.Network;
import sneps.network.classes.CaseFrame;
import sneps.network.classes.Relation;
import sneps.network.classes.Semantic;
import sneps.network.classes.SemanticHierarchy;
import sneps.network.classes.Wire;
import sneps.network.classes.term.Base;
import sneps.network.paths.Path;
import sneps.network.paths.BangPath;
import sneps.network.paths.EmptyPath;
import sneps.network.paths.BUnitPath;
import sneps.network.paths.FUnitPath;
import sneps.network.paths.CFResBUnitPath;
import sneps.network.paths.CFResFUnitPath;
import sneps.network.paths.AndPath;
import sneps.network.paths.ComposePath;
import sneps.network.paths.ConversePath;
import sneps.network.paths.DomainRestrictPath;
import sneps.network.paths.IrreflexiveRestrictPath;
import sneps.network.paths.KPlusPath;
import sneps.network.paths.KStarPath;
import sneps.network.paths.OrPath;
import sneps.network.paths.RangeRestrictPath;
import sneps.snebr.Controller;
import sneps.exceptions.CannotFindCaseFrameException;
import sneps.exceptions.ContextNameDoesntExistException;
import sneps.exceptions.DuplicateContextNameException;
import sneps.exceptions.DuplicatePropositionException;
import sneps.exceptions.InvalidArgumentsException;
import sneps.exceptions.InvalidWffNameException;
import sneps.exceptions.ModeOneOnlyException;
import sneps.exceptions.ModeThreeOnlyException;
import sneps.exceptions.NodeNotFoundInNetworkException;
import sneps.exceptions.NotAPropositionNodeException;
import sneps.exceptions.RelationDoesntExistException;
import sneps.exceptions.SemanticAlreadySetException;
import sneps.exceptions.IllegalAtomicSymbolException;
import sneps.exceptions.EquivalentNodeException;
import sneps.gui.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\010\000\002\004\006\000\002\004\005\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\046\003\000\002" +
    "\047\003\000\002\047\005\000\002\050\004\000\002\051" +
    "\005\000\002\051\002\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\004\000\002\026\011" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\030\011\000\002\030\007\000\002\035\010\000\002\036" +
    "\010\000\002\037\010\000\002\040\010\000\002\041\010" +
    "\000\002\042\010\000\002\043\010\000\002\031\011\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\006\000\002\032\006\000\002\032\005\000\002\033\015" +
    "\000\002\033\013\000\002\034\015\000\002\034\013\000" +
    "\002\055\004\000\002\056\005\000\002\056\002\000\002" +
    "\052\004\000\002\053\005\000\002\053\002\000\002\012" +
    "\003\000\002\045\004\000\002\044\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\006\000\002\006\007\000\002\007\003\000\002" +
    "\007\002\000\002\013\003\000\002\013\002\000\002\010" +
    "\003\000\002\010\002\000\002\054\003\000\002\054\002" +
    "\000\002\014\004\000\002\014\002\000\002\015\006\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\010\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\005\000\002\017\006" +
    "\000\002\017\005\000\002\017\006\000\002\017\005\000" +
    "\002\017\006\000\002\017\006\000\002\017\013\000\002" +
    "\017\013\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\172\004\123\007\024\010\017\011\060\012" +
    "\015\013\124\014\021\015\033\020\005\021\057\022\120" +
    "\023\102\024\025\025\022\026\012\027\115\030\116\031" +
    "\030\032\045\033\107\034\014\035\052\036\042\037\067" +
    "\040\011\041\071\042\046\043\122\044\076\045\066\046" +
    "\065\047\063\050\072\051\013\052\006\053\027\054\007" +
    "\064\035\065\043\066\121\067\104\070\126\071\036\072" +
    "\127\073\125\074\073\075\031\100\055\102\077\104\004" +
    "\105\026\106\034\107\113\110\044\111\110\112\130\113" +
    "\064\114\117\132\010\137\056\001\002\000\004\100\u017b" +
    "\001\002\000\006\002\uff80\006\161\001\002\000\004\132" +
    "\u0178\001\002\000\010\055\u0162\056\u0160\057\u0161\001\002" +
    "\000\042\002\uff9b\005\uff9b\006\uff9b\027\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b\076\uff9b\077\u0171" +
    "\100\u0172\101\uff9b\103\uff9b\133\uff9b\001\002\000\006\002" +
    "\uff80\006\161\001\002\000\004\132\u0164\001\002\000\010" +
    "\055\u0162\056\u0160\057\u0161\001\002\000\006\002\uff80\006" +
    "\161\001\002\000\062\027\115\064\035\065\043\066\121" +
    "\067\104\070\126\071\036\072\127\073\125\074\073\075" +
    "\031\100\055\102\077\104\004\105\026\106\034\107\113" +
    "\110\044\111\110\112\130\113\064\114\117\132\010\137" +
    "\056\001\002\000\016\002\uffcc\005\uffcc\006\uffcc\027\uffcc" +
    "\076\uffcc\101\uffcc\001\002\000\062\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\036\002\uffb1\005\uffb1\006" +
    "\uffb1\027\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\066\uffb1" +
    "\067\uffb1\076\uffb1\101\uffb1\103\uffb1\133\uffb1\001\002\000" +
    "\062\027\115\064\035\065\043\066\121\067\104\070\126" +
    "\071\036\072\127\073\125\074\073\075\031\100\055\102" +
    "\077\104\004\105\026\106\034\107\113\110\044\111\110" +
    "\112\130\113\064\114\117\132\010\137\056\001\002\000" +
    "\004\132\u0152\001\002\000\010\005\143\006\146\027\144" +
    "\001\002\000\004\132\u014e\001\002\000\004\132\u010d\001" +
    "\002\000\004\100\u0102\001\002\000\006\002\uff80\006\161" +
    "\001\002\000\066\002\uff7a\006\uff7a\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\004\100\363\001\002\000" +
    "\036\002\uff9d\005\uff9d\006\uff9d\027\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\066\uff9d\067\uff9d\076\uff9d\101\uff9d\103" +
    "\uff9d\133\uff9d\001\002\000\012\002\uff80\006\161\016\360" +
    "\017\357\001\002\000\004\100\351\001\002\000\016\027" +
    "\115\100\055\104\004\105\026\132\010\137\056\001\002" +
    "\000\062\027\115\064\035\065\043\066\121\067\104\070" +
    "\126\071\036\072\127\073\125\074\073\075\031\100\055" +
    "\102\077\104\004\105\026\106\034\107\113\110\044\111" +
    "\110\112\130\113\064\114\117\132\010\137\056\001\002" +
    "\000\036\002\uffb5\005\uffb5\006\uffb5\027\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\066\uffb5\067\uffb5\076\uffb5\101\uffb5" +
    "\103\uffb5\133\uffb5\001\002\000\036\002\uffb4\005\uffb4\006" +
    "\uffb4\027\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\066\uffb4" +
    "\067\uffb4\076\uffb4\101\uffb4\103\uffb4\133\uffb4\001\002\000" +
    "\036\002\uffba\005\uffba\006\uffba\027\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\066\uffba\067\uffba\076\uffba\101\uffba\103" +
    "\uffba\133\uffba\001\002\000\006\002\uff80\006\161\001\002" +
    "\000\004\100\340\001\002\000\004\100\333\001\002\000" +
    "\006\002\uff80\006\161\001\002\000\004\132\330\001\002" +
    "\000\034\002\uffca\005\uffca\006\uffca\027\uffca\060\323\061" +
    "\uffc1\062\uffc1\063\uffc1\066\324\067\325\076\uffca\101\uffca" +
    "\133\uffc1\001\002\000\036\002\uffb8\005\uffb8\006\uffb8\027" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\066\uffb8\067\uffb8" +
    "\076\uffb8\101\uffb8\103\uffb8\133\uffb8\001\002\000\036\002" +
    "\uffbc\005\uffbc\006\uffbc\027\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\066\uffbc\067\uffbc\076\uffbc\101\uffbc\103\uffbc\133" +
    "\uffbc\001\002\000\066\002\uff7a\006\uff7a\027\115\064\035" +
    "\065\043\066\121\067\104\070\126\071\036\072\127\073" +
    "\125\074\073\075\031\100\055\102\077\104\004\105\026" +
    "\106\034\107\113\110\044\111\110\112\130\113\064\114" +
    "\117\132\010\137\056\001\002\000\036\002\uff98\005\uff98" +
    "\006\uff98\027\uff98\060\uff98\061\uff98\062\uff98\063\uff98\066" +
    "\uff98\067\uff98\076\uff98\101\uff98\103\uff98\133\uff98\001\002" +
    "\000\004\002\317\001\002\000\062\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\036\002\uff8a\005\uff8a\006" +
    "\uff8a\027\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\066\uff8a" +
    "\067\uff8a\076\uff8a\101\uff8a\103\uff8a\133\uff8a\001\002\000" +
    "\006\002\uff80\006\161\001\002\000\062\027\115\064\035" +
    "\065\043\066\121\067\104\070\126\071\036\072\127\073" +
    "\125\074\073\075\031\100\055\102\077\104\004\105\026" +
    "\106\034\107\113\110\044\111\110\112\130\113\064\114" +
    "\117\132\010\137\056\001\002\000\004\002\uffff\001\002" +
    "\000\036\002\uffb9\005\uffb9\006\uffb9\027\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\066\uffb9\067\uffb9\076\uffb9\101\uffb9" +
    "\103\uffb9\133\uffb9\001\002\000\006\002\uff80\006\161\001" +
    "\002\000\004\100\304\001\002\000\006\002\uff80\006\161" +
    "\001\002\000\006\002\uff80\006\161\001\002\000\004\127" +
    "\300\001\002\000\004\002\001\001\002\000\016\027\115" +
    "\100\055\104\004\105\026\132\010\137\056\001\002\000" +
    "\062\027\115\064\035\065\043\066\121\067\104\070\126" +
    "\071\036\072\127\073\125\074\073\075\031\100\055\102" +
    "\077\104\004\105\026\106\034\107\113\110\044\111\110" +
    "\112\130\113\064\114\117\132\010\137\056\001\002\000" +
    "\004\100\264\001\002\000\036\002\uffb2\005\uffb2\006\uffb2" +
    "\027\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\066\uffb2\067" +
    "\uffb2\076\uffb2\101\uffb2\103\uffb2\133\uffb2\001\002\000\036" +
    "\002\uffb0\005\uffb0\006\uffb0\027\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\066\uffb0\067\uffb0\076\uffb0\101\uffb0\103\uffb0" +
    "\133\uffb0\001\002\000\004\132\263\001\002\000\060\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\104\004\105" +
    "\026\106\034\107\113\110\044\111\110\112\130\113\064" +
    "\114\117\132\010\137\056\001\002\000\036\002\uffb6\005" +
    "\uffb6\006\uffb6\027\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\066\uffb6\067\uffb6\076\uffb6\101\uffb6\103\uffb6\133\uffb6\001" +
    "\002\000\036\002\uffb3\005\uffb3\006\uffb3\027\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\066\uffb3\067\uffb3\076\uffb3\101" +
    "\uffb3\103\uffb3\133\uffb3\001\002\000\004\132\240\001\002" +
    "\000\036\002\uffbb\005\uffbb\006\uffbb\027\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\066\uffbb\067\uffbb\076\uffbb\101\uffbb" +
    "\103\uffbb\133\uffbb\001\002\000\062\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\012\061\230\062\227\063" +
    "\231\133\232\001\002\000\036\002\uffb7\005\uffb7\006\uffb7" +
    "\027\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\066\uffb7\067" +
    "\uffb7\076\uffb7\101\uffb7\103\uffb7\133\uffb7\001\002\000\010" +
    "\002\uff7e\006\uff7e\132\200\001\002\000\004\100\220\001" +
    "\002\000\036\002\uff99\005\uff99\006\uff99\027\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\066\uff99\067\uff99\076\uff99\101" +
    "\uff99\103\uff99\133\uff99\001\002\000\016\002\uffcd\005\uffcd" +
    "\006\uffcd\027\uffcd\076\uffcd\101\uffcd\001\002\000\004\100" +
    "\213\001\002\000\040\002\uff9c\005\uff9c\006\uff9c\027\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\067\uff9c\076" +
    "\uff9c\100\203\101\uff9c\103\uff9c\133\uff9c\001\002\000\004" +
    "\132\202\001\002\000\010\002\uff7e\006\uff7e\132\200\001" +
    "\002\000\004\100\172\001\002\000\006\002\uff80\006\161" +
    "\001\002\000\062\027\115\064\035\065\043\066\121\067" +
    "\104\070\126\071\036\072\127\073\125\074\073\075\031" +
    "\100\055\102\077\104\004\105\026\106\034\107\113\110" +
    "\044\111\110\112\130\113\064\114\117\132\010\137\056" +
    "\001\002\000\004\132\164\001\002\000\064\005\156\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\004\100" +
    "\131\001\002\000\016\027\115\100\055\104\004\105\026" +
    "\132\010\137\056\001\002\000\004\076\133\001\002\000" +
    "\062\027\115\064\035\065\043\066\121\067\104\070\126" +
    "\071\036\072\127\073\125\074\073\075\031\100\055\102" +
    "\077\104\004\105\026\106\034\107\113\110\044\111\110" +
    "\112\130\113\064\114\117\132\010\137\056\001\002\000" +
    "\004\101\135\001\002\000\036\002\uffa1\005\uffa1\006\uffa1" +
    "\027\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\066\uffa1\067" +
    "\uffa1\076\uffa1\101\uffa1\103\uffa1\133\uffa1\001\002\000\036" +
    "\002\uffa9\005\uffa9\006\uffa9\027\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\066\uffa9\067\uffa9\076\uffa9\101\uffa9\103\uffa9" +
    "\133\uffa9\001\002\000\036\002\uffc1\005\uffc1\006\uffc1\027" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\066\uffc1\067\uffc1" +
    "\076\uffc1\101\uffc1\103\uffc1\133\uffc1\001\002\000\036\002" +
    "\uffab\005\uffab\006\uffab\027\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\066\uffab\067\uffab\076\uffab\101\uffab\103\uffab\133" +
    "\uffab\001\002\000\036\002\uffa8\005\uffa8\006\uffa8\027\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\066\uffa8\067\uffa8\076" +
    "\uffa8\101\uffa8\103\uffa8\133\uffa8\001\002\000\012\002\uff7c" +
    "\005\143\006\146\027\144\001\002\000\004\002\uff86\001" +
    "\002\000\010\002\uff84\027\150\100\151\001\002\000\004" +
    "\002\uff7d\001\002\000\004\002\uff87\001\002\000\004\002" +
    "\ufff7\001\002\000\004\002\uff85\001\002\000\004\131\152" +
    "\001\002\000\006\101\153\131\154\001\002\000\004\002" +
    "\uff83\001\002\000\004\101\155\001\002\000\004\002\uff82" +
    "\001\002\000\062\027\115\064\035\065\043\066\121\067" +
    "\104\070\126\071\036\072\127\073\125\074\073\075\031" +
    "\100\055\102\077\104\004\105\026\106\034\107\113\110" +
    "\044\111\110\112\130\113\064\114\117\132\010\137\056" +
    "\001\002\000\006\002\uff80\006\161\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uff81\001\002\000\012\002\uff7c" +
    "\005\143\006\146\027\144\001\002\000\004\002\ufffc\001" +
    "\002\000\064\002\uff7a\027\115\064\035\065\043\066\121" +
    "\067\104\070\126\071\036\072\127\073\125\074\073\075" +
    "\031\100\055\102\077\104\004\105\026\106\034\107\113" +
    "\110\044\111\110\112\130\113\064\114\117\132\010\137" +
    "\056\001\002\000\006\002\uffc2\006\uffc2\001\002\000\004" +
    "\002\uffda\001\002\000\006\002\uff7b\006\uff7b\001\002\000" +
    "\036\002\uffad\005\uffad\006\uffad\027\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\066\uffad\067\uffad\076\uffad\101\uffad\103" +
    "\uffad\133\uffad\001\002\000\004\002\ufff0\001\002\000\016" +
    "\027\115\100\055\104\004\105\026\132\010\137\056\001" +
    "\002\000\004\076\174\001\002\000\062\027\115\064\035" +
    "\065\043\066\121\067\104\070\126\071\036\072\127\073" +
    "\125\074\073\075\031\100\055\102\077\104\004\105\026" +
    "\106\034\107\113\110\044\111\110\112\130\113\064\114" +
    "\117\132\010\137\056\001\002\000\004\101\176\001\002" +
    "\000\036\002\uff9f\005\uff9f\006\uff9f\027\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\066\uff9f\067\uff9f\076\uff9f\101\uff9f" +
    "\103\uff9f\133\uff9f\001\002\000\006\002\uff80\006\161\001" +
    "\002\000\006\002\uff7f\006\uff7f\001\002\000\004\002\uffe5" +
    "\001\002\000\040\002\uff89\005\uff89\006\uff89\027\uff89\060" +
    "\uff89\061\uff89\062\uff89\063\uff89\066\uff89\067\uff89\076\uff89" +
    "\100\uff89\101\uff89\103\uff89\133\uff89\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\006\076" +
    "\207\101\uff8e\001\002\000\004\101\206\001\002\000\036" +
    "\002\uff97\005\uff97\006\uff97\027\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\066\uff97\067\uff97\076\uff97\101\uff97\103\uff97" +
    "\133\uff97\001\002\000\062\027\115\064\035\065\043\066" +
    "\121\067\104\070\126\071\036\072\127\073\125\074\073" +
    "\075\031\100\055\102\077\104\004\105\026\106\034\107" +
    "\113\110\044\111\110\112\130\113\064\114\117\132\010" +
    "\137\056\001\002\000\004\101\uff90\001\002\000\006\076" +
    "\207\101\uff8e\001\002\000\004\101\uff8f\001\002\000\062" +
    "\027\115\064\035\065\043\066\121\067\104\070\126\071" +
    "\036\072\127\073\125\074\073\075\031\100\055\102\077" +
    "\104\004\105\026\106\034\107\113\110\044\111\110\112" +
    "\130\113\064\114\117\132\010\137\056\001\002\000\004" +
    "\076\215\001\002\000\016\027\115\100\055\104\004\105" +
    "\026\132\010\137\056\001\002\000\004\101\217\001\002" +
    "\000\036\002\uffa4\005\uffa4\006\uffa4\027\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\066\uffa4\067\uffa4\076\uffa4\101\uffa4" +
    "\103\uffa4\133\uffa4\001\002\000\016\027\115\100\055\104" +
    "\004\105\026\132\010\137\056\001\002\000\004\076\222" +
    "\001\002\000\016\027\115\100\055\104\004\105\026\132" +
    "\010\137\056\001\002\000\004\101\224\001\002\000\036" +
    "\002\uffa2\005\uffa2\006\uffa2\027\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\066\uffa2\067\uffa2\076\uffa2\101\uffa2\103\uffa2" +
    "\133\uffa2\001\002\000\006\002\uff80\006\161\001\002\000" +
    "\004\002\uffe2\001\002\000\062\027\115\064\035\065\043" +
    "\066\121\067\104\070\126\071\036\072\127\073\125\074" +
    "\073\075\031\100\055\102\077\104\004\105\026\106\034" +
    "\107\113\110\044\111\110\112\130\113\064\114\117\132" +
    "\010\137\056\001\002\000\062\027\115\064\035\065\043" +
    "\066\121\067\104\070\126\071\036\072\127\073\125\074" +
    "\073\075\031\100\055\102\077\104\004\105\026\106\034" +
    "\107\113\110\044\111\110\112\130\113\064\114\117\132" +
    "\010\137\056\001\002\000\062\027\115\064\035\065\043" +
    "\066\121\067\104\070\126\071\036\072\127\073\125\074" +
    "\073\075\031\100\055\102\077\104\004\105\026\106\034" +
    "\107\113\110\044\111\110\112\130\113\064\114\117\132" +
    "\010\137\056\001\002\000\062\027\115\064\035\065\043" +
    "\066\121\067\104\070\126\071\036\072\127\073\125\074" +
    "\073\075\031\100\055\102\077\104\004\105\026\106\034" +
    "\107\113\110\044\111\110\112\130\113\064\114\117\132" +
    "\010\137\056\001\002\000\016\002\uffc3\005\uffc3\006\uffc3" +
    "\027\uffc3\076\uffc3\101\uffc3\001\002\000\016\002\uffc4\005" +
    "\uffc4\006\uffc4\027\uffc4\076\uffc4\101\uffc4\001\002\000\016" +
    "\002\uffc6\005\uffc6\006\uffc6\027\uffc6\076\uffc6\101\uffc6\001" +
    "\002\000\016\002\uffc5\005\uffc5\006\uffc5\027\uffc5\076\uffc5" +
    "\101\uffc5\001\002\000\036\002\uffac\005\uffac\006\uffac\027" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\067\uffac" +
    "\076\uffac\101\uffac\103\uffac\133\uffac\001\002\000\004\132" +
    "\241\001\002\000\004\100\243\001\002\000\010\002\uff80" +
    "\006\161\130\252\001\002\000\004\132\244\001\002\000" +
    "\006\101\uff78\132\246\001\002\000\004\101\250\001\002" +
    "\000\006\101\uff78\132\246\001\002\000\004\101\uff79\001" +
    "\002\000\010\002\uff77\006\uff77\130\uff77\001\002\000\004" +
    "\002\uffef\001\002\000\006\002\uff80\006\161\001\002\000" +
    "\004\002\uffee\001\002\000\004\103\262\001\002\000\006" +
    "\076\256\103\uffbd\001\002\000\060\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\104\004\105\026\106\034\107" +
    "\113\110\044\111\110\112\130\113\064\114\117\132\010" +
    "\137\056\001\002\000\004\103\uffbf\001\002\000\006\076" +
    "\256\103\uffbd\001\002\000\004\103\uffbe\001\002\000\036" +
    "\002\uffc0\005\uffc0\006\uffc0\027\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\066\uffc0\067\uffc0\076\uffc0\101\uffc0\103\uffc0" +
    "\133\uffc0\001\002\000\004\002\uffd9\001\002\000\004\131" +
    "\265\001\002\000\006\076\266\101\267\001\002\000\004" +
    "\131\271\001\002\000\062\027\115\064\035\065\043\066" +
    "\121\067\104\070\126\071\036\072\127\073\125\074\073" +
    "\075\031\100\055\102\077\104\004\105\026\106\034\107" +
    "\113\110\044\111\110\112\130\113\064\114\117\132\010" +
    "\137\056\001\002\000\036\002\uffa6\005\uffa6\006\uffa6\027" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\066\uffa6\067\uffa6" +
    "\076\uffa6\101\uffa6\103\uffa6\133\uffa6\001\002\000\004\101" +
    "\272\001\002\000\062\027\115\064\035\065\043\066\121" +
    "\067\104\070\126\071\036\072\127\073\125\074\073\075" +
    "\031\100\055\102\077\104\004\105\026\106\034\107\113" +
    "\110\044\111\110\112\130\113\064\114\117\132\010\137" +
    "\056\001\002\000\036\002\uffa7\005\uffa7\006\uffa7\027\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\063\uffa7\066\uffa7\067\uffa7\076" +
    "\uffa7\101\uffa7\103\uffa7\133\uffa7\001\002\000\006\002\uff80" +
    "\006\161\001\002\000\004\002\uffd5\001\002\000\006\002" +
    "\uff80\006\161\001\002\000\004\002\uffdc\001\002\000\006" +
    "\002\uff80\006\161\001\002\000\004\002\uffde\001\002\000" +
    "\004\002\uffd8\001\002\000\004\002\uffd7\001\002\000\062" +
    "\027\115\064\035\065\043\066\121\067\104\070\126\071" +
    "\036\072\127\073\125\074\073\075\031\100\055\102\077" +
    "\104\004\105\026\106\034\107\113\110\044\111\110\112" +
    "\130\113\064\114\117\132\010\137\056\001\002\000\004" +
    "\076\306\001\002\000\016\027\115\100\055\104\004\105" +
    "\026\132\010\137\056\001\002\000\004\101\310\001\002" +
    "\000\036\002\uffa0\005\uffa0\006\uffa0\027\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\066\uffa0\067\uffa0\076\uffa0\101\uffa0" +
    "\103\uffa0\133\uffa0\001\002\000\004\002\uffd6\001\002\000" +
    "\012\002\uff7c\005\143\006\146\027\144\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufff1\001\002\000\004\101" +
    "\316\001\002\000\036\002\uff95\005\uff95\006\uff95\027\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\066\uff95\067\uff95\076" +
    "\uff95\101\uff95\103\uff95\133\uff95\001\002\000\004\002\000" +
    "\001\002\000\006\002\uff80\006\161\001\002\000\004\002" +
    "\uffe0\001\002\000\060\027\115\064\035\065\043\066\121" +
    "\067\104\070\126\071\036\072\127\073\125\074\073\075" +
    "\031\100\055\104\004\105\026\106\034\107\113\110\044" +
    "\111\110\112\130\113\064\114\117\132\010\137\056\001" +
    "\002\000\060\027\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\100" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\112\uffc7\113\uffc7\114\uffc7\132\uffc7\137\uffc7\001\002\000" +
    "\060\027\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\100\uffc9\104" +
    "\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9" +
    "\113\uffc9\114\uffc9\132\uffc9\137\uffc9\001\002\000\060\027" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\100\uffc8\104\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8" +
    "\114\uffc8\132\uffc8\137\uffc8\001\002\000\024\002\uffca\005" +
    "\uffca\006\uffca\027\uffca\060\323\066\324\067\325\076\uffca" +
    "\101\uffca\001\002\000\016\002\uffcb\005\uffcb\006\uffcb\027" +
    "\uffcb\076\uffcb\101\uffcb\001\002\000\062\027\115\064\035" +
    "\065\043\066\121\067\104\070\126\071\036\072\127\073" +
    "\125\074\073\075\031\100\055\102\077\104\004\105\026" +
    "\106\034\107\113\110\044\111\110\112\130\113\064\114" +
    "\117\132\010\137\056\001\002\000\004\002\uffdb\001\002" +
    "\000\004\002\uffe3\001\002\000\062\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\004\076\335\001\002\000" +
    "\016\027\115\100\055\104\004\105\026\132\010\137\056" +
    "\001\002\000\004\101\337\001\002\000\036\002\uffa3\005" +
    "\uffa3\006\uffa3\027\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\066\uffa3\067\uffa3\076\uffa3\101\uffa3\103\uffa3\133\uffa3\001" +
    "\002\000\004\131\341\001\002\000\004\076\342\001\002" +
    "\000\004\131\343\001\002\000\004\101\344\001\002\000" +
    "\062\027\115\064\035\065\043\066\121\067\104\070\126" +
    "\071\036\072\127\073\125\074\073\075\031\100\055\102" +
    "\077\104\004\105\026\106\034\107\113\110\044\111\110" +
    "\112\130\113\064\114\117\132\010\137\056\001\002\000" +
    "\036\002\uffae\005\uffae\006\uffae\027\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\066\uffae\067\uffae\076\uffae\101\uffae\103" +
    "\uffae\133\uffae\001\002\000\004\002\uffdf\001\002\000\036" +
    "\002\uffaa\005\uffaa\006\uffaa\027\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\066\uffaa\067\uffaa\076\uffaa\101\uffaa\103\uffaa" +
    "\133\uffaa\001\002\000\036\002\uffaf\005\uffaf\006\uffaf\027" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\067\uffaf" +
    "\076\uffaf\101\uffaf\103\uffaf\133\uffaf\001\002\000\062\027" +
    "\115\064\035\065\043\066\121\067\104\070\126\071\036" +
    "\072\127\073\125\074\073\075\031\100\055\102\077\104" +
    "\004\105\026\106\034\107\113\110\044\111\110\112\130" +
    "\113\064\114\117\132\010\137\056\001\002\000\004\076" +
    "\353\001\002\000\016\027\115\100\055\104\004\105\026" +
    "\132\010\137\056\001\002\000\004\101\355\001\002\000" +
    "\036\002\uffa5\005\uffa5\006\uffa5\027\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\066\uffa5\067\uffa5\076\uffa5\101\uffa5\103" +
    "\uffa5\133\uffa5\001\002\000\004\002\ufff5\001\002\000\006" +
    "\002\uff80\006\161\001\002\000\006\002\uff80\006\161\001" +
    "\002\000\004\002\ufff4\001\002\000\004\002\ufff3\001\002" +
    "\000\004\132\366\001\002\000\006\076\373\101\uff8b\001" +
    "\002\000\004\101\367\001\002\000\006\076\uff88\101\uff88" +
    "\001\002\000\004\100\370\001\002\000\062\027\115\064" +
    "\035\065\043\066\121\067\104\070\126\071\036\072\127" +
    "\073\125\074\073\075\031\100\055\102\077\104\004\105" +
    "\026\106\034\107\113\110\044\111\110\112\130\113\064" +
    "\114\117\132\010\137\056\001\002\000\004\101\372\001" +
    "\002\000\036\002\uff9e\005\uff9e\006\uff9e\027\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e\076\uff9e\101" +
    "\uff9e\103\uff9e\133\uff9e\001\002\000\004\132\366\001\002" +
    "\000\004\101\uff8d\001\002\000\006\076\373\101\uff8b\001" +
    "\002\000\004\101\uff8c\001\002\000\006\002\uff80\006\161" +
    "\001\002\000\004\002\uffe4\001\002\000\004\002\uffd2\001" +
    "\002\000\004\132\366\001\002\000\004\101\u0104\001\002" +
    "\000\004\100\u0105\001\002\000\062\027\115\064\035\065" +
    "\043\066\121\067\104\070\126\071\036\072\127\073\125" +
    "\074\073\075\031\100\055\102\077\104\004\105\026\106" +
    "\034\107\113\110\044\111\110\112\130\113\064\114\117" +
    "\132\010\137\056\001\002\000\004\076\u0107\001\002\000" +
    "\062\027\115\064\035\065\043\066\121\067\104\070\126" +
    "\071\036\072\127\073\125\074\073\075\031\100\055\102" +
    "\077\104\004\105\026\106\034\107\113\110\044\111\110" +
    "\112\130\113\064\114\117\132\010\137\056\001\002\000" +
    "\006\076\u0109\101\u010a\001\002\000\062\027\115\064\035" +
    "\065\043\066\121\067\104\070\126\071\036\072\127\073" +
    "\125\074\073\075\031\100\055\102\077\104\004\105\026" +
    "\106\034\107\113\110\044\111\110\112\130\113\064\114" +
    "\117\132\010\137\056\001\002\000\036\002\uff91\005\uff91" +
    "\006\uff91\027\uff91\060\uff91\061\uff91\062\uff91\063\uff91\066" +
    "\uff91\067\uff91\076\uff91\101\uff91\103\uff91\133\uff91\001\002" +
    "\000\004\101\u010c\001\002\000\036\002\uff92\005\uff92\006" +
    "\uff92\027\uff92\060\uff92\061\uff92\062\uff92\063\uff92\066\uff92" +
    "\067\uff92\076\uff92\101\uff92\103\uff92\133\uff92\001\002\000" +
    "\030\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110\120\u0113" +
    "\121\u0115\122\u0111\123\u0112\124\u010f\132\u0116\001\002\000" +
    "\004\100\u014a\001\002\000\004\100\u0145\001\002\000\004" +
    "\100\u0141\001\002\000\004\100\u0139\001\002\000\004\100" +
    "\u0131\001\002\000\004\100\u012e\001\002\000\006\002\uff80" +
    "\006\161\001\002\000\004\100\u012a\001\002\000\014\002" +
    "\uff73\006\uff73\076\uff73\100\uff73\101\uff73\001\002\000\004" +
    "\100\u0127\001\002\000\004\100\u0124\001\002\000\004\100" +
    "\u011a\001\002\000\036\066\u010e\067\u0119\101\u011d\115\u0118" +
    "\116\u0117\117\u0110\120\u0113\121\u0115\122\u0111\123\u0112\124" +
    "\u010f\125\u011b\126\u011c\132\u0116\001\002\000\010\076\uff75" +
    "\100\uff75\101\uff75\001\002\000\010\076\uff74\100\uff74\101" +
    "\uff74\001\002\000\014\002\uff6c\006\uff6c\076\uff6c\100\uff6c" +
    "\101\uff6c\001\002\000\010\076\uff76\100\uff76\101\uff76\001" +
    "\002\000\004\101\u0123\001\002\000\006\076\u0121\101\uff64" +
    "\001\002\000\034\066\u010e\067\u0119\115\u0118\116\u0117\117" +
    "\u0110\120\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b" +
    "\126\u011c\132\u0116\001\002\000\004\101\uff65\001\002\000" +
    "\014\002\uff6d\006\uff6d\076\uff6d\100\uff6d\101\uff6d\001\002" +
    "\000\034\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110\120" +
    "\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126\u011c" +
    "\132\u0116\001\002\000\004\101\u0126\001\002\000\014\002" +
    "\uff71\006\uff71\076\uff71\100\uff71\101\uff71\001\002\000\034" +
    "\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110\120\u0113\121" +
    "\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126\u011c\132\u0116" +
    "\001\002\000\004\101\u0129\001\002\000\014\002\uff70\006" +
    "\uff70\076\uff70\100\uff70\101\uff70\001\002\000\034\066\u010e" +
    "\067\u0119\115\u0118\116\u0117\117\u0110\120\u0113\121\u0115\122" +
    "\u0111\123\u0112\124\u010f\125\u011b\126\u011c\132\u0116\001\002" +
    "\000\004\101\u012c\001\002\000\014\002\uff68\006\uff68\076" +
    "\uff68\100\uff68\101\uff68\001\002\000\004\002\uffed\001\002" +
    "\000\034\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110\120" +
    "\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126\u011c" +
    "\132\u0116\001\002\000\004\101\u0130\001\002\000\014\002" +
    "\uff69\006\uff69\076\uff69\100\uff69\101\uff69\001\002\000\034" +
    "\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110\120\u0113\121" +
    "\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126\u011c\132\u0116" +
    "\001\002\000\004\076\u0133\001\002\000\034\066\u010e\067" +
    "\u0119\115\u0118\116\u0117\117\u0110\120\u0113\121\u0115\122\u0111" +
    "\123\u0112\124\u010f\125\u011b\126\u011c\132\u0116\001\002\000" +
    "\004\100\u0135\001\002\000\062\027\115\064\035\065\043" +
    "\066\121\067\104\070\126\071\036\072\127\073\125\074" +
    "\073\075\031\100\055\102\077\104\004\105\026\106\034" +
    "\107\113\110\044\111\110\112\130\113\064\114\117\132" +
    "\010\137\056\001\002\000\004\101\u0137\001\002\000\004" +
    "\101\u0138\001\002\000\014\002\uff66\006\uff66\076\uff66\100" +
    "\uff66\101\uff66\001\002\000\034\066\u010e\067\u0119\115\u0118" +
    "\116\u0117\117\u0110\120\u0113\121\u0115\122\u0111\123\u0112\124" +
    "\u010f\125\u011b\126\u011c\132\u0116\001\002\000\004\100\u013b" +
    "\001\002\000\062\027\115\064\035\065\043\066\121\067" +
    "\104\070\126\071\036\072\127\073\125\074\073\075\031" +
    "\100\055\102\077\104\004\105\026\106\034\107\113\110" +
    "\044\111\110\112\130\113\064\114\117\132\010\137\056" +
    "\001\002\000\004\101\u013d\001\002\000\004\076\u013e\001" +
    "\002\000\034\066\u010e\067\u0119\115\u0118\116\u0117\117\u0110" +
    "\120\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126" +
    "\u011c\132\u0116\001\002\000\004\101\u0140\001\002\000\014" +
    "\002\uff67\006\uff67\076\uff67\100\uff67\101\uff67\001\002\000" +
    "\036\066\u010e\067\u0119\101\u0142\115\u0118\116\u0117\117\u0110" +
    "\120\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126" +
    "\u011c\132\u0116\001\002\000\014\002\uff6a\006\uff6a\076\uff6a" +
    "\100\uff6a\101\uff6a\001\002\000\004\101\u0144\001\002\000" +
    "\014\002\uff6b\006\uff6b\076\uff6b\100\uff6b\101\uff6b\001\002" +
    "\000\004\132\u0146\001\002\000\004\076\u0147\001\002\000" +
    "\004\132\u0148\001\002\000\004\101\u0149\001\002\000\014" +
    "\002\uff72\006\uff72\076\uff72\100\uff72\101\uff72\001\002\000" +
    "\036\066\u010e\067\u0119\101\u014b\115\u0118\116\u0117\117\u0110" +
    "\120\u0113\121\u0115\122\u0111\123\u0112\124\u010f\125\u011b\126" +
    "\u011c\132\u0116\001\002\000\014\002\uff6e\006\uff6e\076\uff6e" +
    "\100\uff6e\101\uff6e\001\002\000\004\101\u014d\001\002\000" +
    "\014\002\uff6f\006\uff6f\076\uff6f\100\uff6f\101\uff6f\001\002" +
    "\000\062\027\115\064\035\065\043\066\121\067\104\070" +
    "\126\071\036\072\127\073\125\074\073\075\031\100\055" +
    "\102\077\104\004\105\026\106\034\107\113\110\044\111" +
    "\110\112\130\113\064\114\117\132\010\137\056\001\002" +
    "\000\006\002\uff80\006\161\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufffe\001\002\000\010\002\uff80\006\161" +
    "\132\u0154\001\002\000\004\002\uffec\001\002\000\010\002" +
    "\uff80\006\161\100\243\001\002\000\004\002\uffeb\001\002" +
    "\000\006\002\uff80\006\161\001\002\000\004\002\uffea\001" +
    "\002\000\006\002\uff80\006\161\001\002\000\004\002\ufff6" +
    "\001\002\000\012\002\uff7c\005\143\006\146\027\144\001" +
    "\002\000\004\002\ufffa\001\002\000\012\002\uff7c\005\143" +
    "\006\146\027\144\001\002\000\004\002\ufff8\001\002\000" +
    "\004\002\uffe1\001\002\000\006\002\uff80\006\161\001\002" +
    "\000\006\002\uffcf\006\uffcf\001\002\000\006\002\uffce\006" +
    "\uffce\001\002\000\006\002\uffd0\006\uffd0\001\002\000\004" +
    "\002\uffd4\001\002\000\004\132\u0165\001\002\000\014\002" +
    "\uff80\006\161\134\u0167\135\u0168\136\u0169\001\002\000\004" +
    "\002\uffe9\001\002\000\004\131\u016e\001\002\000\004\131" +
    "\u016c\001\002\000\004\131\u016a\001\002\000\006\002\uff80" +
    "\006\161\001\002\000\004\002\uffe6\001\002\000\006\002" +
    "\uff80\006\161\001\002\000\004\002\uffe7\001\002\000\006" +
    "\002\uff80\006\161\001\002\000\004\002\uffe8\001\002\000" +
    "\004\002\uffdd\001\002\000\004\132\u0175\001\002\000\062" +
    "\027\115\064\035\065\043\066\121\067\104\070\126\071" +
    "\036\072\127\073\125\074\073\075\031\100\055\102\077" +
    "\104\004\105\026\106\034\107\113\110\044\111\110\112" +
    "\130\113\064\114\117\132\010\137\056\001\002\000\004" +
    "\101\u0174\001\002\000\036\002\uff96\005\uff96\006\uff96\027" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\066\uff96\067\uff96" +
    "\076\uff96\101\uff96\103\uff96\133\uff96\001\002\000\036\002" +
    "\uff9a\005\uff9a\006\uff9a\027\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\066\uff9a\067\uff9a\076\uff9a\101\uff9a\103\uff9a\133" +
    "\uff9a\001\002\000\006\002\uff80\006\161\001\002\000\004" +
    "\002\uffd1\001\002\000\006\002\uff80\006\161\001\002\000" +
    "\004\002\uffd3\001\002\000\004\002\ufff2\001\002\000\004" +
    "\132\366\001\002\000\004\101\u017d\001\002\000\004\100" +
    "\u017e\001\002\000\062\027\115\064\035\065\043\066\121" +
    "\067\104\070\126\071\036\072\127\073\125\074\073\075" +
    "\031\100\055\102\077\104\004\105\026\106\034\107\113" +
    "\110\044\111\110\112\130\113\064\114\117\132\010\137" +
    "\056\001\002\000\004\076\u0180\001\002\000\062\027\115" +
    "\064\035\065\043\066\121\067\104\070\126\071\036\072" +
    "\127\073\125\074\073\075\031\100\055\102\077\104\004" +
    "\105\026\106\034\107\113\110\044\111\110\112\130\113" +
    "\064\114\117\132\010\137\056\001\002\000\006\076\u0182" +
    "\101\u0183\001\002\000\062\027\115\064\035\065\043\066" +
    "\121\067\104\070\126\071\036\072\127\073\125\074\073" +
    "\075\031\100\055\102\077\104\004\105\026\106\034\107" +
    "\113\110\044\111\110\112\130\113\064\114\117\132\010" +
    "\137\056\001\002\000\036\002\uff93\005\uff93\006\uff93\027" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\066\uff93\067\uff93" +
    "\076\uff93\101\uff93\103\uff93\133\uff93\001\002\000\004\101" +
    "\u0185\001\002\000\036\002\uff94\005\uff94\006\uff94\027\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\066\uff94\067\uff94\076" +
    "\uff94\101\uff94\103\uff94\133\uff94\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\064\002\053\003\060\004\067\012\031\021" +
    "\022\022\111\023\015\024\046\025\050\026\102\027\040" +
    "\030\061\031\017\032\074\033\110\034\052\035\047\036" +
    "\105\037\077\040\036\041\037\042\100\043\073\045\113" +
    "\047\104\001\001\000\002\001\001\000\004\007\u0179\001" +
    "\001\000\002\001\001\000\004\005\u0175\001\001\000\002" +
    "\001\001\000\004\007\u016f\001\001\000\002\001\001\000" +
    "\004\005\u015e\001\001\000\004\007\u015d\001\001\000\056" +
    "\012\031\021\u015b\022\111\023\015\024\046\025\050\026" +
    "\102\027\040\030\061\031\017\032\074\033\110\034\052" +
    "\035\047\036\105\037\077\040\036\041\037\042\100\043" +
    "\073\045\113\047\104\001\001\000\002\001\001\000\056" +
    "\012\031\021\u0159\022\111\023\015\024\046\025\050\026" +
    "\102\027\040\030\061\031\017\032\074\033\110\034\052" +
    "\035\047\036\105\037\077\040\036\041\037\042\100\043" +
    "\073\045\113\047\104\001\001\000\002\001\001\000\052" +
    "\012\031\024\136\025\050\026\102\027\040\030\061\031" +
    "\017\032\074\033\110\034\052\035\047\036\105\037\077" +
    "\040\036\041\037\042\100\043\073\045\113\046\u0157\047" +
    "\164\001\001\000\002\001\001\000\004\006\u0150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u0100\001\001\000\054\012\031\024\136\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\046\166\047\164\054\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\355\001\001" +
    "\000\002\001\001\000\014\012\031\032\347\033\110\034" +
    "\052\045\113\001\001\000\050\012\031\024\136\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\047\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\331\001" +
    "\001\000\002\001\001\000\004\011\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\012\031\024\136\025" +
    "\050\026\102\027\040\030\061\031\017\032\074\033\110" +
    "\034\052\035\047\036\105\037\077\040\036\041\037\042" +
    "\100\043\073\045\113\046\166\047\164\054\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\012\031\021" +
    "\314\022\111\023\015\024\046\025\050\026\102\027\040" +
    "\030\061\031\017\032\074\033\110\034\052\035\047\036" +
    "\105\037\077\040\036\041\037\042\100\043\073\045\113" +
    "\047\104\001\001\000\002\001\001\000\004\007\313\001" +
    "\001\000\056\012\031\021\311\022\111\023\015\024\046" +
    "\025\050\026\102\027\040\030\061\031\017\032\074\033" +
    "\110\034\052\035\047\036\105\037\077\040\036\041\037" +
    "\042\100\043\073\045\113\047\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\310\001\001\000\002" +
    "\001\001\000\004\007\302\001\001\000\004\007\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\031" +
    "\032\275\033\110\034\052\045\113\001\001\000\052\012" +
    "\031\024\136\025\050\026\102\027\040\030\061\031\017" +
    "\032\074\033\110\034\052\035\047\036\105\037\077\040" +
    "\036\041\037\042\100\043\073\045\113\046\273\047\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\012\031\024\254\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\050\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\012\031\024\136\025\050\026\102\027\040\030\061\031" +
    "\017\032\074\033\110\034\052\035\047\036\105\037\077" +
    "\040\036\041\037\042\100\043\073\045\113\047\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\176\001\001\000\002\001\001\000\004\007" +
    "\170\001\001\000\050\012\031\024\136\025\050\026\102" +
    "\027\040\030\061\031\017\032\074\033\110\034\052\035" +
    "\047\036\105\037\077\040\036\041\037\042\100\043\073" +
    "\045\113\047\167\001\001\000\002\001\001\000\056\012" +
    "\031\021\156\022\111\023\015\024\046\025\050\026\102" +
    "\027\040\030\061\031\017\032\074\033\110\034\052\035" +
    "\047\036\105\037\077\040\036\041\037\042\100\043\073" +
    "\045\113\047\104\001\001\000\056\012\031\021\141\022" +
    "\111\023\015\024\046\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\047\104" +
    "\001\001\000\050\012\031\024\136\025\050\026\102\027" +
    "\040\030\061\031\017\032\074\033\110\034\052\035\047" +
    "\036\105\037\077\040\036\041\037\042\100\043\073\045" +
    "\113\047\140\001\001\000\050\012\031\024\136\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\047\137\001\001\000\050\012\031\024" +
    "\136\025\050\026\102\027\040\030\061\031\017\032\074" +
    "\033\110\034\052\035\047\036\105\037\077\040\036\041" +
    "\037\042\100\043\073\045\113\047\135\001\001\000\002" +
    "\001\001\000\014\012\031\032\131\033\110\034\052\045" +
    "\113\001\001\000\002\001\001\000\056\012\031\021\133" +
    "\022\111\023\015\024\046\025\050\026\102\027\040\030" +
    "\061\031\017\032\074\033\110\034\052\035\047\036\105" +
    "\037\077\040\036\041\037\042\100\043\073\045\113\047" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\144\010\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\012\031\021\161\022\111\023\015\024\046" +
    "\025\050\026\102\027\040\030\061\031\017\032\074\033" +
    "\110\034\052\035\047\036\105\037\077\040\036\041\037" +
    "\042\100\043\073\045\113\047\104\001\001\000\004\007" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\144\010\162\001\001\000\002\001\001\000\054\012" +
    "\031\024\136\025\050\026\102\027\040\030\061\031\017" +
    "\032\074\033\110\034\052\035\047\036\105\037\077\040" +
    "\036\041\037\042\100\043\073\045\113\046\166\047\164" +
    "\054\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\031\032\172\033\110\034\052\045\113\001\001\000" +
    "\002\001\001\000\056\012\031\021\174\022\111\023\015" +
    "\024\046\025\050\026\102\027\040\030\061\031\017\032" +
    "\074\033\110\034\052\035\047\036\105\037\077\040\036" +
    "\041\037\042\100\043\073\045\113\047\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\012\031\024\136\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\047\203" +
    "\055\204\001\001\000\004\056\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\012\031\024\136\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\047\210\001\001\000\002\001\001\000" +
    "\004\056\211\001\001\000\002\001\001\000\056\012\031" +
    "\021\213\022\111\023\015\024\046\025\050\026\102\027" +
    "\040\030\061\031\017\032\074\033\110\034\052\035\047" +
    "\036\105\037\077\040\036\041\037\042\100\043\073\045" +
    "\113\047\104\001\001\000\002\001\001\000\014\012\031" +
    "\032\215\033\110\034\052\045\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\031\032\220\033\110" +
    "\034\052\045\113\001\001\000\002\001\001\000\014\012" +
    "\031\032\222\033\110\034\052\045\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\225\001\001\000" +
    "\002\001\001\000\050\012\031\024\136\025\050\026\102" +
    "\027\040\030\061\031\017\032\074\033\110\034\052\035" +
    "\047\036\105\037\077\040\036\041\037\042\100\043\073" +
    "\045\113\047\235\001\001\000\050\012\031\024\136\025" +
    "\050\026\102\027\040\030\061\031\017\032\074\033\110" +
    "\034\052\035\047\036\105\037\077\040\036\041\037\042" +
    "\100\043\073\045\113\047\234\001\001\000\050\012\031" +
    "\024\136\025\050\026\102\027\040\030\061\031\017\032" +
    "\074\033\110\034\052\035\047\036\105\037\077\040\036" +
    "\041\037\042\100\043\073\045\113\047\233\001\001\000" +
    "\050\012\031\024\136\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\047\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\241\001\001\000\004\007\250\001\001\000" +
    "\002\001\001\000\004\014\244\001\001\000\002\001\001" +
    "\000\004\014\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\256\001\001\000" +
    "\046\012\031\024\257\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\001\001" +
    "\000\002\001\001\000\004\051\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\012\031\024" +
    "\136\025\050\026\102\027\040\030\061\031\017\032\074" +
    "\033\110\034\052\035\047\036\105\037\077\040\036\041" +
    "\037\042\100\043\073\045\113\047\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\012\031\024\136\025" +
    "\050\026\102\027\040\030\061\031\017\032\074\033\110" +
    "\034\052\035\047\036\105\037\077\040\036\041\037\042" +
    "\100\043\073\045\113\047\272\001\001\000\002\001\001" +
    "\000\004\007\274\001\001\000\002\001\001\000\004\007" +
    "\276\001\001\000\002\001\001\000\004\007\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\012\031\021\304\022\111\023\015\024\046\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\047\104\001\001\000\002\001\001\000" +
    "\014\012\031\032\306\033\110\034\052\045\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\144\010\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\320\001\001\000\002\001\001\000\050" +
    "\012\031\022\326\024\325\025\050\026\102\027\040\030" +
    "\061\031\017\032\074\033\110\034\052\035\047\036\105" +
    "\037\077\040\036\041\037\042\100\043\073\045\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\321\001\001\000\002\001\001\000\052\012" +
    "\031\024\136\025\050\026\102\027\040\030\061\031\017" +
    "\032\074\033\110\034\052\035\047\036\105\037\077\040" +
    "\036\041\037\042\100\043\073\045\113\046\330\047\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\012" +
    "\031\021\333\022\111\023\015\024\046\025\050\026\102" +
    "\027\040\030\061\031\017\032\074\033\110\034\052\035" +
    "\047\036\105\037\077\040\036\041\037\042\100\043\073" +
    "\045\113\047\104\001\001\000\002\001\001\000\014\012" +
    "\031\032\335\033\110\034\052\045\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\012\031" +
    "\024\136\025\050\026\102\027\040\030\061\031\017\032" +
    "\074\033\110\034\052\035\047\036\105\037\077\040\036" +
    "\041\037\042\100\043\073\045\113\047\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\012\031\021\351\022\111\023\015\024" +
    "\046\025\050\026\102\027\040\030\061\031\017\032\074" +
    "\033\110\034\052\035\047\036\105\037\077\040\036\041" +
    "\037\042\100\043\073\045\113\047\104\001\001\000\002" +
    "\001\001\000\014\012\031\032\353\033\110\034\052\045" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\361\001\001\000\004\007\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\363" +
    "\052\364\001\001\000\004\053\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\012\031" +
    "\021\370\022\111\023\015\024\046\025\050\026\102\027" +
    "\040\030\061\031\017\032\074\033\110\034\052\035\047" +
    "\036\105\037\077\040\036\041\037\042\100\043\073\045" +
    "\113\047\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\374\001\001\000\002\001\001\000\004\053" +
    "\375\001\001\000\002\001\001\000\004\007\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\363\052" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\012\031\024\136\025\050\026\102\027\040\030\061\031" +
    "\017\032\074\033\110\034\052\035\047\036\105\037\077" +
    "\040\036\041\037\042\100\043\073\045\113\047\u0105\001" +
    "\001\000\002\001\001\000\050\012\031\024\136\025\050" +
    "\026\102\027\040\030\061\031\017\032\074\033\110\034" +
    "\052\035\047\036\105\037\077\040\036\041\037\042\100" +
    "\043\073\045\113\047\u0107\001\001\000\002\001\001\000" +
    "\050\012\031\024\136\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\047\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\u011f\017\u011d\020\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\u011f\017\u011d\020\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0124\017\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0127\017" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\u012a\017\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u012e\017\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0131\017" +
    "\u011d\001\001\000\002\001\001\000\006\016\u0133\017\u011d" +
    "\001\001\000\002\001\001\000\056\012\031\021\u0135\022" +
    "\111\023\015\024\046\025\050\026\102\027\040\030\061" +
    "\031\017\032\074\033\110\034\052\035\047\036\105\037" +
    "\077\040\036\041\037\042\100\043\073\045\113\047\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u0139\017\u011d\001\001\000\002\001\001" +
    "\000\056\012\031\021\u013b\022\111\023\015\024\046\025" +
    "\050\026\102\027\040\030\061\031\017\032\074\033\110" +
    "\034\052\035\047\036\105\037\077\040\036\041\037\042" +
    "\100\043\073\045\113\047\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u013e\017\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u011f\017\u011d" +
    "\020\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\u011f\017\u011d\020\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\012\031\024\136\025" +
    "\050\026\102\027\040\030\061\031\017\032\074\033\110" +
    "\034\052\035\047\036\105\037\077\040\036\041\037\042" +
    "\100\043\073\045\113\047\u014e\001\001\000\004\007\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0152\001\001\000\002\001\001\000\006\007\u0154\015\u0155" +
    "\001\001\000\002\001\001\000\004\007\u0156\001\001\000" +
    "\002\001\001\000\004\007\u0158\001\001\000\002\001\001" +
    "\000\006\006\144\010\u015a\001\001\000\002\001\001\000" +
    "\006\006\144\010\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u016a\001\001\000\002\001\001\000\004\007\u016c\001" +
    "\001\000\002\001\001\000\004\007\u016e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\012" +
    "\031\024\136\025\050\026\102\027\040\030\061\031\017" +
    "\032\074\033\110\034\052\035\047\036\105\037\077\040" +
    "\036\041\037\042\100\043\073\045\113\047\203\055\u0172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u0176\001\001\000\002\001\001\000\004" +
    "\007\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\363\052\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\012\031\024\136\025\050\026\102\027" +
    "\040\030\061\031\017\032\074\033\110\034\052\035\047" +
    "\036\105\037\077\040\036\041\037\042\100\043\073\045" +
    "\113\047\u017e\001\001\000\002\001\001\000\050\012\031" +
    "\024\136\025\050\026\102\027\040\030\061\031\017\032" +
    "\074\033\110\034\052\035\047\036\105\037\077\040\036" +
    "\041\037\042\100\043\073\045\113\047\u0180\001\001\000" +
    "\002\001\001\000\050\012\031\024\136\025\050\026\102" +
    "\027\040\030\061\031\017\032\074\033\110\034\052\035" +
    "\047\036\105\037\077\040\036\041\037\042\100\043\073" +
    "\045\113\047\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



String command;
String warning = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= snepslogCommand 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(warning.length()!=0){
				warning+="\n";
			}
			RESULT = warning + sc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= wffCommand 
            {
              String RESULT =null;
		int wcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(warning.length()!=0){
				warning+="\n";
			}
			RESULT = warning + wc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // wffCommand ::= wff terminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		   		if(w.getTerm() instanceof Base){
		   			throw new IllegalAtomicSymbolException("wff must not be an atomic symbol");
		   		}
				ArrayList<Node> nodes = new ArrayList<>();
				ArrayList<Node> matchingNodes = new ArrayList<>();
				switch (tp) {
				case ".":
					try {
						Controller.addPropToCurrentContext(w.getId());
						nodes.add(w);
						RESULT = AP.displayWffs(nodes);
					} catch (DuplicatePropositionException e) {
						RESULT = e.getMessage();
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "!":
					try {
						nodes = AP.forwardInference(w, "!");
						RESULT = AP.displayWffs(nodes);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "??":
					try{
					matchingNodes = AP.match(w);
						for(int i=0;i<matchingNodes.size();i++){
							if(Controller.getCurrentContext().isAsserted((PropositionNode) matchingNodes.get(i))){
								nodes.add(matchingNodes.get(i));
							}
						}
						if (!nodes.isEmpty()) {
							RESULT = AP.displayWffs(nodes);
						} else {
							RESULT = "";
						}
						}catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				case "?":
						try {
							matchingNodes = AP.match(w);
							for(int i=0;i<matchingNodes.size();i++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(i), "?", -1, -1);
								for(int j=0;j<temp.size();j++){
									nodes.add(temp.get(j));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
						break;
				default:
					try{
						if (tp.startsWith("ONE")) {
							int i = Integer.parseInt(tp.substring(3));
							matchingNodes = AP.match(w);
					    		for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, -1);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} else {
							int i = Integer.parseInt(tp.substring(3).split(",")[0]);
							int j = Integer.parseInt(tp.substring(3).split(",")[1]);
							matchingNodes = AP.match(w);
							for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, j);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						}
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				}
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffCommand",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // snepslogCommand ::= ACTIVATE wff optionalDot 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.forwardInference(w, "activate");
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // snepslogCommand ::= ACTIVATE BANG wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                		try {
						ArrayList<Node> output = AP.forwardInference(w, "activate!");
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // snepslogCommand ::= ADD_TO_CONTEXT IDENTIFIER termSet optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						Controller.addPropsToContext(id, AP.arrayListToPropositionSet(ts));
						RESULT = "";
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // snepslogCommand ::= ASK wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "ask", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // snepslogCommand ::= ASKIFNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askifnot", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // snepslogCommand ::= ASKWH wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askwh", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // snepslogCommand ::= ASKWHNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askwhnot", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // snepslogCommand ::= BELIEFS_ABOUT pTermSet optionalDot 
            {
              String RESULT =null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						RESULT = AP.displayWffs(AP.beliefsAbout(pts));
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // snepslogCommand ::= BR_MODE optionalDot 
            {
              String RESULT =null;
		 
					boolean auto = Controller.isAutomaticBR();
					if(auto){
						RESULT = "Belief revision mode currently set to auto";
					}else{
						RESULT = "Belief revision mode currently set to manual";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // snepslogCommand ::= BR_MODE AUTO optionalDot 
            {
              String RESULT =null;
		 
					Controller.setAutomaticBR(true);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // snepslogCommand ::= BR_MODE MANUAL optionalDot 
            {
              String RESULT =null;
		 
					Controller.setAutomaticBR(false);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // snepslogCommand ::= CLEAR_INFER optionalDot 
            {
              String RESULT =null;
		 
					AP.clearInfer();
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // snepslogCommand ::= CLEARKB optionalDot 
            {
              String RESULT =null;
		 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // snepslogCommand ::= COPYRIGHT optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "copyright statement goes here.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							AP.createModeThreeCaseFrame(id1, id2, idl, null);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list STRING_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							AP.createModeThreeCaseFrame(id1, id2, idl, sl);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // snepslogCommand ::= DEFINE_PATH IDENTIFIER snepsPath optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path sp = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							Network.definePath(Network.getRelation(id),sp);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id,null,null);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id1,id2,null);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id1,id2,ids);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER EXPAND INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER REDUCE INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER NONE INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // snepslogCommand ::= DESCRIBE_CONTEXT optionalIdentifier optionalDot 
            {
              String RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(oid!=null){
						RESULT = Controller.getContextByName(oid).toString();
					}else{
						RESULT = Controller.getCurrentContext().toString();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // snepslogCommand ::= DESCRIBE_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(opts!=null){
						RESULT = AP.describeTerms(opts);
					}else{
						RESULT = AP.describeTerms(AP.getAllClosedNodesFromTheNetwork());
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // snepslogCommand ::= EXPERT optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // snepslogCommand ::= LIST_ASSERTED_WFFS optionalIdentifier optionalDot 
            {
              String RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				try{
					if(oid!=null){
						RESULT = AP.displayWffs(AP.propositionSetToArrayList(Controller.getContextByName(oid).allAsserted()));
					}else{
						RESULT = AP.displayWffs(AP.propositionSetToArrayList(Controller.getCurrentContext().allAsserted()));
					}
				}  catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
				} catch (NodeNotFoundInNetworkException e) {
					RESULT = e.getMessage();
				} catch (Exception e) {
					RESULT = e.getMessage();
				}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // snepslogCommand ::= LIST_CONTEXTS optionalDot 
            {
              String RESULT =null;
		 
					Set<String> contexts = Controller.getAllNamesOfContexts();
					String output = "";
					for (String context : contexts) {
						output+=context+'\n';
					}
					if(output.length()!=0) {
						output=output.substring(0, output.length()-1);
					}
					RESULT = output;		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // snepslogCommand ::= LIST_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(opts!=null){
							RESULT = AP.displayWffs(AP.getClosed(opts));
						}else{
							RESULT = AP.displayWffs(AP.getAllClosedNodesFromTheNetwork());
						}
					}  catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // snepslogCommand ::= LIST_WFFS optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // snepslogCommand ::= LOAD FILEPATH optionalDot 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					RESULT = AP.loadFile(fp);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // snepslogCommand ::= NORMAL optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // snepslogCommand ::= PERFORM atomicTerm optionalDot 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node at = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.perform(at);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // snepslogCommand ::= REMOVE_FROM_CONTEXT IDENTIFIER pTermSet 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					try {
						Controller.removeHypsFromContext(AP.arrayListToPropositionSet(pts),id);
						RESULT = "";
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // snepslogCommand ::= SET_CONTEXT IDENTIFIER optionalPTermSet 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					try{
						if(opts!=null){
							Controller.createContext(id, AP.arrayListToPropositionSet(opts));
						}else{
							Controller.createContext(id);
						}
						RESULT = "";
					} catch (DuplicateContextNameException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // snepslogCommand ::= SET_DEFAULT_CONTEXT IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					try{
						Controller.setCurrentContext(id);
						RESULT = "";
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					}catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // snepslogCommand ::= SET_MODE_1 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // snepslogCommand ::= SET_MODE_2 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // snepslogCommand ::= SET_MODE_3 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // snepslogCommand ::= SHOW pTermSet optionalDot 
            {
              String RESULT =null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					Main.visualizeNodes(pts);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // snepslogCommand ::= TRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.activateTracing(sf);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // snepslogCommand ::= UNDEFINE_PATH IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							Network.undefinePath(Network.getRelation(id));
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // snepslogCommand ::= UNLABELED optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // snepslogCommand ::= UNTRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.deactivateTracing(sf);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // snepslogFunction ::= INFERENCE 
            {
              String RESULT =null;
		
					RESULT = "inference";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // snepslogFunction ::= ACTING 
            {
              String RESULT =null;
		
					RESULT = "acting";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // snepslogFunction ::= PARSING 
            {
              String RESULT =null;
		
					RESULT = "parsing";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // wff ::= infixedTerm 
            {
              Node RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = it;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // wff ::= entailment 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // infixedTerm ::= prefixedTerm andOrEquality infixedTerm 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		try{
    					RESULT = AP.buildInfixedTerm(type, arg1, arg2);
    				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // infixedTerm ::= prefixedTerm 
            {
              Node RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		RESULT = pt;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // andOrEquality ::= AND 
            {
              String RESULT =null;
		
             			RESULT = "and";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // andOrEquality ::= OR 
            {
              String RESULT =null;
		
             			RESULT = "or";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // andOrEquality ::= EQUALITY 
            {
              String RESULT =null;
		
             			RESULT = "equality";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // entailment ::= termSet IMPLICATION termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    				try{
    					RESULT = AP.buildEntailment("Implication", antecedents, consequents, null);
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // entailment ::= termSet OR_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("OrEntailment", antecedents, consequents, null);
				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // entailment ::= termSet AND_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("AndEntailment", antecedents, consequents, null);
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // entailment ::= termSet NUMERICAL_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("NumericalEntailment", antecedents, consequents, ne.substring(0,ne.length()-2));
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pTermSet ::= termSet 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    			ArrayList<Node> out = new ArrayList<Node>();
			for (int i = 0; i < ts.size(); i++) {
				ArrayList<Node> temp = AP.match(ts.get(i));
				for (int j = 0; j < temp.size(); j++) {
					out.add(temp.get(j));
				}
			}
			RESULT = out;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pTermSet",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termSet ::= prefixedTerm 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList<Node> temp = new ArrayList<Node>();
			temp.add(pt);
			RESULT = temp;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termSet ::= OPEN_CURLY termSequence CLOSE_CURLY 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = ts;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termSequence ::= prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             	ArrayList<Node> out = new ArrayList<Node>();
             	out.add(pt);
				for (int i = 0; i < pts.size(); i++) {
					out.add(pts.get(i));				
				}
				RESULT = out;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSequence",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prefixedTerms ::= COMMA prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<Node> out = new ArrayList<Node>();
             		out.add(pt);
					for (int i = 0; i < pts.size(); i++) {
						out.add(pts.get(i));				
					}
					RESULT = out;
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prefixedTerms ::= 
            {
              ArrayList<Node> RESULT =null;
		
					ArrayList<Node> out = new ArrayList<Node>();
					RESULT = out;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prefixedTerm ::= negatedTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prefixedTerm ::= andorTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prefixedTerm ::= setTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prefixedTerm ::= threshTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixedTerm ::= ifdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixedTerm ::= whendoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixedTerm ::= wheneverdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prefixedTerm ::= actplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixedTerm ::= effectTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixedTerm ::= goalplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixedTerm ::= preconditionTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prefixedTerm ::= allTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prefixedTerm ::= atomicTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // negatedTerm ::= NOT atomicTerm 
            {
              Node RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		    		try{
					RESULT = AP.buildNegatedTerm(node);
				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negatedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  		if(Integer.valueOf(i)>=0&&Integer.valueOf(i)<=Integer.valueOf(j)){
		  			try{
						RESULT = AP.buildAndorTerm(i, j, arguments);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i<=j");
				}
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andorTerm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // setTerm ::= AND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        		try{
             	RESULT = AP.buildSetTerm("and", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // setTerm ::= OR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("or", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // setTerm ::= NAND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("nand", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // setTerm ::= NOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("nor", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // setTerm ::= XOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("xor", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // setTerm ::= IFF termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("iff", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int threshmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String threshmax = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(Integer.valueOf(thresh)>=0&&Integer.valueOf(thresh)<=Integer.valueOf(threshmax)){
           			try{
						RESULT = AP.buildThreshTerm(thresh, threshmax, arguments);
					} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i<=j");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // threshTerm ::= THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(Integer.valueOf(thresh)>=0){
           			try{
						RESULT = AP.buildThreshTerm(thresh, arguments.size()-1+"", arguments);
					} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
         		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("ifdo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdoTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("whendo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whendoTerm",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("wheneverdo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wheneverdoTerm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("ActPlan", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actplanTerm",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("Effect", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("effectTerm",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("GoalPlan", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goalplanTerm",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("Precondition", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preconditionTerm",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Node> ss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(w.getTerm() instanceof Base){
		   		throw new IllegalAtomicSymbolException("wff must not be an atomic symbol");
		   	}
		   	try{
				RESULT = AP.buildAllTerm(ss, w);
			} catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // atomicTerm ::= wffName 
            {
              Node RESULT =null;
		int wnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = Network.getNodes().get("M"+wn.substring(3));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // atomicTerm ::= qvar 
            {
              Node RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = q;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atomicTerm ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = Network.buildBaseNode(id, Semantic.proposition);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomicTerm ::= IDENTIFIER COLON IDENTIFIER 
            {
              Node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(AP.getSnepslogMode()==3){
           			if (Network.getNodes().containsKey(id1)) {
           				throw new SemanticAlreadySetException("A semantic type was already set for this node");
					}else{
						RESULT = Network.buildBaseNode(id1, SemanticHierarchy.getSemantic(id2));
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // atomicTerm ::= withsomeTerm 
            {
              Node RESULT =null;
		int wstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node wst = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = wst;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // atomicTerm ::= withallTerm 
            {
              Node RESULT =null;
		int watleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int watright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node wat = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = wat;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // atomicTerm ::= qvar OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==1){
           			ArrayList<Wire> wires = new ArrayList<Wire>();
					CaseFrame caseFrame = AP.createModeOneCaseFrame(tss.size());
					LinkedList<Relation> relations = caseFrame.getRelations();
					wires.add(new Wire(relations.get(0),q));
					for(int i = 0;i<tss.size();i++){
						for(int j=0;j<tss.get(i).size();j++){
							wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
						}
					}
					try{
						RESULT = Network.buildMolecularNode(wires, caseFrame);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}else{
					throw new ModeOneOnlyException("A predicate can start with a variable only in Mode 1");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // atomicTerm ::= IDENTIFIER OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()!=3){
           			ArrayList<Wire> wires = new ArrayList<Wire>();
					CaseFrame caseFrame = null;
					if(AP.getSnepslogMode()==1){
						caseFrame = AP.createModeOneCaseFrame(tss.size());
					}else{
						caseFrame = AP.createModeTwoCaseFrame(id, tss.size());					
					}
					LinkedList<Relation> relations = caseFrame.getRelations();
					wires.add(new Wire(relations.get(0), Network.buildBaseNode(id, Semantic.proposition)));
					for(int i = 0;i<tss.size();i++){
						for(int j=0;j<tss.get(i).size();j++){
							wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
						}
					}
					try{
						RESULT = Network.buildMolecularNode(wires, caseFrame);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}else{
					String description = "";
					boolean flag = false;
					if(AP.getCfsDescriptions().containsKey(id)){
						description = AP.getCfsDescriptions().get(id);
						flag = true;
					}
					if(AP.getModeThreeCaseFrames().containsKey(id)){
						ArrayList<Wire> wires = new ArrayList<Wire>();
						CaseFrame caseFrame = AP.getModeThreeCaseFrames().get(id);
						LinkedList<Relation> relations = caseFrame.getRelations();
						wires.add(new Wire(relations.get(0), Network.buildBaseNode(id, SemanticHierarchy.createSemanticType(caseFrame.getRelations().get(0).getType()))));
						if(flag){
							description = description.replaceAll(relations.get(0).getName(), id);
						}
						for(int i = 0;i<tss.size();i++){
							for(int j=0;j<tss.get(i).size();j++){
								wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
								if(flag){
									description = description.replaceAll(relations.get(i+1).getName(), tss.get(i).get(j).getIdentifier());
								}
							}
						}
						try{
							Node node = Network.buildMolecularNode(wires, caseFrame);
							if(flag){
								Set<Node> keys = AP.getNodesDescriptions().keySet();
								for (Node key : keys) {
									description = description.replaceAll(key.getIdentifier()+" ", AP.getNodesDescriptions().get(key).substring(1,AP.getNodesDescriptions().get(key).length()-1)+" ");
								}
								AP.getNodesDescriptions().put(node, description);
							}
							RESULT = node;
						} catch(EquivalentNodeException e){
							warning = e.getMessage();
							RESULT = e.getEquivalentNode();
						}
					}else{
						if(AP.getModeThreeCaseFrames().containsKey(id+"$")){
							ArrayList<Wire> wires = new ArrayList<Wire>();
							CaseFrame caseFrame = AP.getModeThreeCaseFrames().get(id+"$");
							LinkedList<Relation> relations = caseFrame.getRelations();
							for(int i = 0;i<tss.size();i++){
								for(int j=0;j<tss.get(i).size();j++){
									wires.add(new Wire(relations.get(i),tss.get(i).get(j)));
									if(flag){
										description = description.replaceAll(relations.get(i).getName(), tss.get(i).get(j).getIdentifier());
									}
								}
							}
							try{
								Node node = Network.buildMolecularNode(wires, caseFrame);
								if(flag){
									Set<Node> keys = AP.getNodesDescriptions().keySet();
									for (Node key : keys) {
										description = description.replaceAll(key.getIdentifier()+" ", AP.getNodesDescriptions().get(key).substring(1,AP.getNodesDescriptions().get(key).length()-1)+" ");
									}
									AP.getNodesDescriptions().put(node, description);
								}
								RESULT = node;
							} catch(EquivalentNodeException e){
								warning = e.getMessage();
								RESULT = e.getEquivalentNode();
							}
						}else{
							throw new CannotFindCaseFrameException("Unable to find a matching CaseFrame.");
						}
					}
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // atomicTerm ::= OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		RESULT = w;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> elsee = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withsome", vars, suchthat, doo, elsee);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withsome", vars, suchthat, doo, null);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> elsee = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withall", vars, suchthat, doo, elsee);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withall", vars, suchthat, doo, null);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // termSetSequence ::= termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<ArrayList<Node>> out = new ArrayList<ArrayList<Node>>();
             		out.add(ts);
					for (int i = 0; i < tss.size(); i++) {
						out.add(tss.get(i));				
					}
					RESULT = out;
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSetSequence",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // termSets ::= COMMA termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			tss.add(0, ts);
			RESULT = tss;
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termSets ::= 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			RESULT = new ArrayList<ArrayList<Node>>();
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // symbolSequence ::= snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<Node> out = new ArrayList<Node>();
             		out.add(ss);
					for (int i = 0; i < sss.size(); i++) {
						out.add(sss.get(i));				
					}
					RESULT = out;
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolSequence",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	            		sss.add(ss);
					RESULT = sss;
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // snepslogSymbols ::= 
            {
              ArrayList<Node> RESULT =null;
		
					RESULT = new ArrayList<Node>();
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // wffName ::= WFF 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	    		if (Network.getNodes().containsKey("M"+w.substring(3))) {
        			RESULT = w;
			}else{
				throw new InvalidWffNameException("This wffName does not correspond to any wff in the Network");
			}
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffName",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // qvar ::= QUESTION_MARK IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = Network.buildVariableNode(id);
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qvar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // snepslogSymbol ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               		VariableNode vNode = Network.buildVariableNode(id);
					vNode.setSnepslogFlag(true);
					RESULT = vNode;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // terminalPunctuation ::= DOT 
            {
              String RESULT =null;
		
           				RESULT = ".";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // terminalPunctuation ::= BANG 
            {
              String RESULT =null;
		
                     	RESULT = "!";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminalPunctuation ::= QUESTION_MARK QUESTION_MARK 
            {
              String RESULT =null;
		
           				RESULT = "??";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminalPunctuation ::= QUESTION_MARK 
            {
              String RESULT =null;
		
           				RESULT = "?";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           				RESULT = "ONE"+il;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		int il1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String il1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int il2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int il2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String il2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           				RESULT = "TWO"+il1+","+il2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // optionalDot ::= DOT 
            {
              String RESULT =null;
		
				RESULT = ".";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // optionalDot ::= 
            {
              String RESULT =null;
		
				RESULT = null;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // optionalIdentifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			       		RESULT = id;
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optionalIdentifier ::= 
            {
              String RESULT =null;
		
			       		RESULT = null;
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optionalTerminalPunctuation ::= terminalPunctuation 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = tp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optionalTerminalPunctuation ::= 
            {
              String RESULT =null;
		
								RESULT = null;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // optionalPTermSet ::= pTermSet 
            {
              ArrayList<Node> RESULT =null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = pts;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optionalPTermSet ::= 
            {
              ArrayList<Node> RESULT =null;
		
					RESULT = null;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // identifiers ::= IDENTIFIER identifiers 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		ids.add(0, id);
            		RESULT = ids;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // identifiers ::= 
            {
              ArrayList<String> RESULT =null;
		
				RESULT = new ArrayList<String>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 	ArrayList<String> out = new ArrayList<String>();
             		out.add(id);
					for (int i = 0; i < ids.size(); i++) {
						out.add(ids.get(i));				
					}
					RESULT = out;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // path ::= snepsPath 
            {
              Path RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Path sp = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     	RESULT = sp;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // path ::= BANGPATH 
            {
              Path RESULT =null;
		
     	RESULT = new BangPath();
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // path ::= EMPTYPATH 
            {
              Path RESULT =null;
		
     	RESULT = new EmptyPath();
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // snepsPath ::= IDENTIFIER 
            {
              Path RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if(id.charAt(id.length()-1)=='-'){
					RESULT = new BUnitPath(Network.getRelation(id));
				}else{
					RESULT = new FUnitPath(Network.getRelation(id));
				}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // snepsPath ::= CFRES OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(id1.charAt(id1.length()-1)=='-'){
					RESULT = new CFResBUnitPath(Network.getRelation(id1), Network.getCaseFrame(id2));
				}else{
					RESULT = new CFResFUnitPath(Network.getRelation(id1), Network.getCaseFrame(id2));
				}
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // snepsPath ::= KPLUS OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new KPlusPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // snepsPath ::= KSTAR OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new KStarPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // snepsPath ::= AND OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new AndPath(ps);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // snepsPath ::= AND OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new AndPath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // snepsPath ::= OR OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new OrPath(ps);
     	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // snepsPath ::= OR OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new OrPath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // snepsPath ::= COMPOSE OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new ComposePath(ps);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // snepsPath ::= COMPOSE OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new ComposePath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // snepsPath ::= CONVERSE OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new ConversePath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // snepsPath ::= IRREFLEXIVE_RESTRICT OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new IrreflexiveRestrictPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // snepsPath ::= DOMAIN_RESTRICT OPEN_PARAN path OPEN_PARAN wff CLOSE_PARAN COMMA path CLOSE_PARAN 
            {
              Path RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Path p1 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p2 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new DomainRestrictPath(p1,w,p2);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // snepsPath ::= RANGE_RESTRICT OPEN_PARAN path COMMA path OPEN_PARAN wff CLOSE_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Path p1 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Path p2 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT = new RangeRestrictPath(p1,p2,w);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // paths ::= path COMMA paths 
            {
              LinkedList<Path> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      		ps.add(p);
      		RESULT = ps;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paths ::= path 
            {
              LinkedList<Path> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      		LinkedList<Path> out = new LinkedList<Path>();
      		out.add(p);
      		RESULT = out;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
