
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sneps.snepslog;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Set;
import sneps.network.Node;
import sneps.network.PropositionNode;
import sneps.network.VariableNode;
import sneps.network.Network;
import sneps.network.classes.CaseFrame;
import sneps.network.classes.Relation;
import sneps.network.classes.Semantic;
import sneps.network.classes.SemanticHierarchy;
import sneps.network.classes.Wire;
import sneps.network.classes.term.Base;
import sneps.network.paths.Path;
import sneps.network.paths.BangPath;
import sneps.network.paths.EmptyPath;
import sneps.network.paths.BUnitPath;
import sneps.network.paths.FUnitPath;
import sneps.network.paths.CFResBUnitPath;
import sneps.network.paths.CFResFUnitPath;
import sneps.network.paths.AndPath;
import sneps.network.paths.ComposePath;
import sneps.network.paths.ConversePath;
import sneps.network.paths.DomainRestrictPath;
import sneps.network.paths.IrreflexiveRestrictPath;
import sneps.network.paths.KPlusPath;
import sneps.network.paths.KStarPath;
import sneps.network.paths.OrPath;
import sneps.network.paths.RangeRestrictPath;
import sneps.snebr.Controller;
import sneps.exceptions.CannotFindCaseFrameException;
import sneps.exceptions.ContextNameDoesntExistException;
import sneps.exceptions.DuplicateContextNameException;
import sneps.exceptions.DuplicatePropositionException;
import sneps.exceptions.InvalidArgumentsException;
import sneps.exceptions.InvalidWffNameException;
import sneps.exceptions.ModeOneOnlyException;
import sneps.exceptions.ModeThreeOnlyException;
import sneps.exceptions.NodeNotFoundInNetworkException;
import sneps.exceptions.NotAPropositionNodeException;
import sneps.exceptions.RelationDoesntExistException;
import sneps.exceptions.SemanticAlreadySetException;
import sneps.exceptions.IllegalAtomicSymbolException;
import sneps.exceptions.EquivalentNodeException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\010\000" +
    "\002\005\006\000\002\005\005\000\002\005\006\000\002" +
    "\005\007\000\002\005\006\000\002\005\010\000\002\005" +
    "\010\000\002\005\010\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\047\003\000\002\050\003\000\002\050" +
    "\005\000\002\051\004\000\002\052\005\000\002\052\002" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\004\000\002\027\011\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\031\011\000\002\031" +
    "\007\000\002\036\010\000\002\037\010\000\002\040\010" +
    "\000\002\041\010\000\002\042\010\000\002\043\010\000" +
    "\002\044\010\000\002\032\011\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\006\000\002\033\006" +
    "\000\002\033\005\000\002\034\015\000\002\034\013\000" +
    "\002\035\015\000\002\035\013\000\002\056\004\000\002" +
    "\057\005\000\002\057\002\000\002\053\004\000\002\054" +
    "\005\000\002\054\002\000\002\013\003\000\002\046\004" +
    "\000\002\045\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\006\000\002" +
    "\007\007\000\002\010\003\000\002\010\002\000\002\014" +
    "\003\000\002\014\002\000\002\011\003\000\002\011\002" +
    "\000\002\055\003\000\002\055\002\000\002\015\004\000" +
    "\002\015\002\000\002\016\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\010\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\020\013\000\002\020\013\000\002\021" +
    "\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0186\000\172\004\124\007\025\010\020\011\061\012" +
    "\015\013\125\014\022\015\034\020\005\021\060\022\121" +
    "\023\103\024\026\025\023\026\012\027\116\030\117\031" +
    "\031\032\046\033\110\034\014\035\053\036\043\037\070" +
    "\040\011\041\072\042\047\043\123\044\077\045\067\046" +
    "\066\047\064\050\073\051\013\052\006\053\030\054\007" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\004\100\u017e" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\004\132" +
    "\u017b\001\002\000\010\055\u0165\056\u0164\057\u0163\001\002" +
    "\000\042\002\uff99\005\uff99\006\uff99\027\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\066\uff99\067\uff99\076\uff99\077\u0174" +
    "\100\u0175\101\uff99\103\uff99\133\uff99\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\132\u0167\001\002\000\010" +
    "\055\u0165\056\u0164\057\u0163\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\062\027\116\064\036\065\044\066\122" +
    "\067\105\070\127\071\037\072\130\073\126\074\074\075" +
    "\032\100\056\102\100\104\004\105\027\106\035\107\114" +
    "\110\045\111\111\112\131\113\065\114\120\132\010\137" +
    "\057\001\002\000\004\002\001\001\002\000\016\002\uffca" +
    "\005\uffca\006\uffca\027\uffca\076\uffca\101\uffca\001\002\000" +
    "\062\027\116\064\036\065\044\066\122\067\105\070\127" +
    "\071\037\072\130\073\126\074\074\075\032\100\056\102" +
    "\100\104\004\105\027\106\035\107\114\110\045\111\111" +
    "\112\131\113\065\114\120\132\010\137\057\001\002\000" +
    "\036\002\uffaf\005\uffaf\006\uffaf\027\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\066\uffaf\067\uffaf\076\uffaf\101\uffaf\103" +
    "\uffaf\133\uffaf\001\002\000\062\027\116\064\036\065\044" +
    "\066\122\067\105\070\127\071\037\072\130\073\126\074" +
    "\074\075\032\100\056\102\100\104\004\105\027\106\035" +
    "\107\114\110\045\111\111\112\131\113\065\114\120\132" +
    "\010\137\057\001\002\000\004\132\u0155\001\002\000\010" +
    "\005\145\006\150\027\146\001\002\000\004\132\u0151\001" +
    "\002\000\004\132\u0110\001\002\000\004\100\u0105\001\002" +
    "\000\006\002\uff7e\006\163\001\002\000\066\002\uff78\006" +
    "\uff78\027\116\064\036\065\044\066\122\067\105\070\127" +
    "\071\037\072\130\073\126\074\074\075\032\100\056\102" +
    "\100\104\004\105\027\106\035\107\114\110\045\111\111" +
    "\112\131\113\065\114\120\132\010\137\057\001\002\000" +
    "\004\100\366\001\002\000\026\005\145\006\150\027\146" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b\133" +
    "\uff9b\001\002\000\012\002\uff7e\006\163\016\362\017\361" +
    "\001\002\000\004\100\353\001\002\000\016\027\116\100" +
    "\056\104\004\105\027\132\010\137\057\001\002\000\062" +
    "\027\116\064\036\065\044\066\122\067\105\070\127\071" +
    "\037\072\130\073\126\074\074\075\032\100\056\102\100" +
    "\104\004\105\027\106\035\107\114\110\045\111\111\112" +
    "\131\113\065\114\120\132\010\137\057\001\002\000\036" +
    "\002\uffb3\005\uffb3\006\uffb3\027\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\066\uffb3\067\uffb3\076\uffb3\101\uffb3\103\uffb3" +
    "\133\uffb3\001\002\000\036\002\uffb2\005\uffb2\006\uffb2\027" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\066\uffb2\067\uffb2" +
    "\076\uffb2\101\uffb2\103\uffb2\133\uffb2\001\002\000\036\002" +
    "\uffb8\005\uffb8\006\uffb8\027\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\066\uffb8\067\uffb8\076\uffb8\101\uffb8\103\uffb8\133" +
    "\uffb8\001\002\000\006\002\uff7e\006\163\001\002\000\004" +
    "\100\342\001\002\000\004\100\335\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\132\332\001\002\000\034" +
    "\002\uffc8\005\uffc8\006\uffc8\027\uffc8\060\325\061\uffbf\062" +
    "\uffbf\063\uffbf\066\326\067\327\076\uffc8\101\uffc8\133\uffbf" +
    "\001\002\000\036\002\uffb6\005\uffb6\006\uffb6\027\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\066\uffb6\067\uffb6\076\uffb6" +
    "\101\uffb6\103\uffb6\133\uffb6\001\002\000\036\002\uffba\005" +
    "\uffba\006\uffba\027\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\066\uffba\067\uffba\076\uffba\101\uffba\103\uffba\133\uffba\001" +
    "\002\000\066\002\uff78\006\uff78\027\116\064\036\065\044" +
    "\066\122\067\105\070\127\071\037\072\130\073\126\074" +
    "\074\075\032\100\056\102\100\104\004\105\027\106\035" +
    "\107\114\110\045\111\111\112\131\113\065\114\120\132" +
    "\010\137\057\001\002\000\036\002\uff96\005\uff96\006\uff96" +
    "\027\uff96\060\uff96\061\uff96\062\uff96\063\uff96\066\uff96\067" +
    "\uff96\076\uff96\101\uff96\103\uff96\133\uff96\001\002\000\004" +
    "\002\321\001\002\000\062\027\116\064\036\065\044\066" +
    "\122\067\105\070\127\071\037\072\130\073\126\074\074" +
    "\075\032\100\056\102\100\104\004\105\027\106\035\107" +
    "\114\110\045\111\111\112\131\113\065\114\120\132\010" +
    "\137\057\001\002\000\036\002\uff88\005\uff88\006\uff88\027" +
    "\uff88\060\uff88\061\uff88\062\uff88\063\uff88\066\uff88\067\uff88" +
    "\076\uff88\101\uff88\103\uff88\133\uff88\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\062\027\116\064\036\065\044" +
    "\066\122\067\105\070\127\071\037\072\130\073\126\074" +
    "\074\075\032\100\056\102\100\104\004\105\027\106\035" +
    "\107\114\110\045\111\111\112\131\113\065\114\120\132" +
    "\010\137\057\001\002\000\004\002\ufffe\001\002\000\036" +
    "\002\uffb7\005\uffb7\006\uffb7\027\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\066\uffb7\067\uffb7\076\uffb7\101\uffb7\103\uffb7" +
    "\133\uffb7\001\002\000\006\002\uff7e\006\163\001\002\000" +
    "\004\100\306\001\002\000\006\002\uff7e\006\163\001\002" +
    "\000\006\002\uff7e\006\163\001\002\000\004\127\302\001" +
    "\002\000\004\002\uffff\001\002\000\016\027\116\100\056" +
    "\104\004\105\027\132\010\137\057\001\002\000\062\027" +
    "\116\064\036\065\044\066\122\067\105\070\127\071\037" +
    "\072\130\073\126\074\074\075\032\100\056\102\100\104" +
    "\004\105\027\106\035\107\114\110\045\111\111\112\131" +
    "\113\065\114\120\132\010\137\057\001\002\000\004\100" +
    "\266\001\002\000\036\002\uffb0\005\uffb0\006\uffb0\027\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\066\uffb0\067\uffb0\076" +
    "\uffb0\101\uffb0\103\uffb0\133\uffb0\001\002\000\036\002\uffae" +
    "\005\uffae\006\uffae\027\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\066\uffae\067\uffae\076\uffae\101\uffae\103\uffae\133\uffae" +
    "\001\002\000\004\132\265\001\002\000\060\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\104\004\105\027\106" +
    "\035\107\114\110\045\111\111\112\131\113\065\114\120" +
    "\132\010\137\057\001\002\000\036\002\uffb4\005\uffb4\006" +
    "\uffb4\027\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\066\uffb4" +
    "\067\uffb4\076\uffb4\101\uffb4\103\uffb4\133\uffb4\001\002\000" +
    "\036\002\uffb1\005\uffb1\006\uffb1\027\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\066\uffb1\067\uffb1\076\uffb1\101\uffb1\103" +
    "\uffb1\133\uffb1\001\002\000\004\132\242\001\002\000\036" +
    "\002\uffb9\005\uffb9\006\uffb9\027\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\066\uffb9\067\uffb9\076\uffb9\101\uffb9\103\uffb9" +
    "\133\uffb9\001\002\000\062\027\116\064\036\065\044\066" +
    "\122\067\105\070\127\071\037\072\130\073\126\074\074" +
    "\075\032\100\056\102\100\104\004\105\027\106\035\107" +
    "\114\110\045\111\111\112\131\113\065\114\120\132\010" +
    "\137\057\001\002\000\012\061\232\062\231\063\233\133" +
    "\234\001\002\000\036\002\uffb5\005\uffb5\006\uffb5\027\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\066\uffb5\067\uffb5\076" +
    "\uffb5\101\uffb5\103\uffb5\133\uffb5\001\002\000\010\002\uff7c" +
    "\006\uff7c\132\202\001\002\000\004\100\222\001\002\000" +
    "\036\002\uff97\005\uff97\006\uff97\027\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\066\uff97\067\uff97\076\uff97\101\uff97\103" +
    "\uff97\133\uff97\001\002\000\016\002\uffcb\005\uffcb\006\uffcb" +
    "\027\uffcb\076\uffcb\101\uffcb\001\002\000\004\100\215\001" +
    "\002\000\040\002\uff9a\005\uff9a\006\uff9a\027\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a\076\uff9a\100" +
    "\205\101\uff9a\103\uff9a\133\uff9a\001\002\000\004\132\204" +
    "\001\002\000\010\002\uff7c\006\uff7c\132\202\001\002\000" +
    "\004\100\174\001\002\000\006\002\uff7e\006\163\001\002" +
    "\000\062\027\116\064\036\065\044\066\122\067\105\070" +
    "\127\071\037\072\130\073\126\074\074\075\032\100\056" +
    "\102\100\104\004\105\027\106\035\107\114\110\045\111" +
    "\111\112\131\113\065\114\120\132\010\137\057\001\002" +
    "\000\004\132\166\001\002\000\064\005\160\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\004\100\132\001" +
    "\002\000\016\027\116\100\056\104\004\105\027\132\010" +
    "\137\057\001\002\000\036\002\uff9b\005\uff9b\006\uff9b\027" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b" +
    "\076\uff9b\101\uff9b\103\uff9b\133\uff9b\001\002\000\004\076" +
    "\135\001\002\000\062\027\116\064\036\065\044\066\122" +
    "\067\105\070\127\071\037\072\130\073\126\074\074\075" +
    "\032\100\056\102\100\104\004\105\027\106\035\107\114" +
    "\110\045\111\111\112\131\113\065\114\120\132\010\137" +
    "\057\001\002\000\004\101\137\001\002\000\036\002\uff9f" +
    "\005\uff9f\006\uff9f\027\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\066\uff9f\067\uff9f\076\uff9f\101\uff9f\103\uff9f\133\uff9f" +
    "\001\002\000\036\002\uffa7\005\uffa7\006\uffa7\027\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\066\uffa7\067\uffa7\076\uffa7" +
    "\101\uffa7\103\uffa7\133\uffa7\001\002\000\036\002\uffbf\005" +
    "\uffbf\006\uffbf\027\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\066\uffbf\067\uffbf\076\uffbf\101\uffbf\103\uffbf\133\uffbf\001" +
    "\002\000\036\002\uffa9\005\uffa9\006\uffa9\027\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\066\uffa9\067\uffa9\076\uffa9\101" +
    "\uffa9\103\uffa9\133\uffa9\001\002\000\036\002\uffa6\005\uffa6" +
    "\006\uffa6\027\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\066" +
    "\uffa6\067\uffa6\076\uffa6\101\uffa6\103\uffa6\133\uffa6\001\002" +
    "\000\012\002\uff7a\005\145\006\150\027\146\001\002\000" +
    "\004\002\uff84\001\002\000\010\002\uff82\027\152\100\153" +
    "\001\002\000\004\002\uff7b\001\002\000\004\002\uff85\001" +
    "\002\000\004\002\ufff5\001\002\000\004\002\uff83\001\002" +
    "\000\004\131\154\001\002\000\006\101\155\131\156\001" +
    "\002\000\004\002\uff81\001\002\000\004\101\157\001\002" +
    "\000\004\002\uff80\001\002\000\062\027\116\064\036\065" +
    "\044\066\122\067\105\070\127\071\037\072\130\073\126" +
    "\074\074\075\032\100\056\102\100\104\004\105\027\106" +
    "\035\107\114\110\045\111\111\112\131\113\065\114\120" +
    "\132\010\137\057\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\uff7f\001\002" +
    "\000\012\002\uff7a\005\145\006\150\027\146\001\002\000" +
    "\004\002\ufffa\001\002\000\064\002\uff78\027\116\064\036" +
    "\065\044\066\122\067\105\070\127\071\037\072\130\073" +
    "\126\074\074\075\032\100\056\102\100\104\004\105\027" +
    "\106\035\107\114\110\045\111\111\112\131\113\065\114" +
    "\120\132\010\137\057\001\002\000\006\002\uffc0\006\uffc0" +
    "\001\002\000\004\002\uffd8\001\002\000\006\002\uff79\006" +
    "\uff79\001\002\000\036\002\uffab\005\uffab\006\uffab\027\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\066\uffab\067\uffab\076" +
    "\uffab\101\uffab\103\uffab\133\uffab\001\002\000\004\002\uffee" +
    "\001\002\000\016\027\116\100\056\104\004\105\027\132" +
    "\010\137\057\001\002\000\004\076\176\001\002\000\062" +
    "\027\116\064\036\065\044\066\122\067\105\070\127\071" +
    "\037\072\130\073\126\074\074\075\032\100\056\102\100" +
    "\104\004\105\027\106\035\107\114\110\045\111\111\112" +
    "\131\113\065\114\120\132\010\137\057\001\002\000\004" +
    "\101\200\001\002\000\036\002\uff9d\005\uff9d\006\uff9d\027" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\067\uff9d" +
    "\076\uff9d\101\uff9d\103\uff9d\133\uff9d\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\006\002\uff7d\006\uff7d\001\002" +
    "\000\004\002\uffe3\001\002\000\040\002\uff87\005\uff87\006" +
    "\uff87\027\uff87\060\uff87\061\uff87\062\uff87\063\uff87\066\uff87" +
    "\067\uff87\076\uff87\100\uff87\101\uff87\103\uff87\133\uff87\001" +
    "\002\000\062\027\116\064\036\065\044\066\122\067\105" +
    "\070\127\071\037\072\130\073\126\074\074\075\032\100" +
    "\056\102\100\104\004\105\027\106\035\107\114\110\045" +
    "\111\111\112\131\113\065\114\120\132\010\137\057\001" +
    "\002\000\006\076\211\101\uff8c\001\002\000\004\101\210" +
    "\001\002\000\036\002\uff95\005\uff95\006\uff95\027\uff95\060" +
    "\uff95\061\uff95\062\uff95\063\uff95\066\uff95\067\uff95\076\uff95" +
    "\101\uff95\103\uff95\133\uff95\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\004\101\uff8e\001" +
    "\002\000\006\076\211\101\uff8c\001\002\000\004\101\uff8d" +
    "\001\002\000\062\027\116\064\036\065\044\066\122\067" +
    "\105\070\127\071\037\072\130\073\126\074\074\075\032" +
    "\100\056\102\100\104\004\105\027\106\035\107\114\110" +
    "\045\111\111\112\131\113\065\114\120\132\010\137\057" +
    "\001\002\000\004\076\217\001\002\000\016\027\116\100" +
    "\056\104\004\105\027\132\010\137\057\001\002\000\004" +
    "\101\221\001\002\000\036\002\uffa2\005\uffa2\006\uffa2\027" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\067\uffa2" +
    "\076\uffa2\101\uffa2\103\uffa2\133\uffa2\001\002\000\016\027" +
    "\116\100\056\104\004\105\027\132\010\137\057\001\002" +
    "\000\004\076\224\001\002\000\016\027\116\100\056\104" +
    "\004\105\027\132\010\137\057\001\002\000\004\101\226" +
    "\001\002\000\036\002\uffa0\005\uffa0\006\uffa0\027\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0\067\uffa0\076\uffa0" +
    "\101\uffa0\103\uffa0\133\uffa0\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\uffe0\001\002\000\062\027\116" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\062\027\116" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\062\027\116" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\062\027\116" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\016\002\uffc1" +
    "\005\uffc1\006\uffc1\027\uffc1\076\uffc1\101\uffc1\001\002\000" +
    "\016\002\uffc2\005\uffc2\006\uffc2\027\uffc2\076\uffc2\101\uffc2" +
    "\001\002\000\016\002\uffc4\005\uffc4\006\uffc4\027\uffc4\076" +
    "\uffc4\101\uffc4\001\002\000\016\002\uffc3\005\uffc3\006\uffc3" +
    "\027\uffc3\076\uffc3\101\uffc3\001\002\000\036\002\uffaa\005" +
    "\uffaa\006\uffaa\027\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\066\uffaa\067\uffaa\076\uffaa\101\uffaa\103\uffaa\133\uffaa\001" +
    "\002\000\004\132\243\001\002\000\004\100\245\001\002" +
    "\000\010\002\uff7e\006\163\130\254\001\002\000\004\132" +
    "\246\001\002\000\006\101\uff76\132\250\001\002\000\004" +
    "\101\252\001\002\000\006\101\uff76\132\250\001\002\000" +
    "\004\101\uff77\001\002\000\010\002\uff75\006\uff75\130\uff75" +
    "\001\002\000\004\002\uffed\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\uffec\001\002\000\004\103\264" +
    "\001\002\000\006\076\260\103\uffbb\001\002\000\060\027" +
    "\116\064\036\065\044\066\122\067\105\070\127\071\037" +
    "\072\130\073\126\074\074\075\032\100\056\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\004\103\uffbd\001" +
    "\002\000\006\076\260\103\uffbb\001\002\000\004\103\uffbc" +
    "\001\002\000\036\002\uffbe\005\uffbe\006\uffbe\027\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\066\uffbe\067\uffbe\076\uffbe" +
    "\101\uffbe\103\uffbe\133\uffbe\001\002\000\004\002\uffd7\001" +
    "\002\000\004\131\267\001\002\000\006\076\270\101\271" +
    "\001\002\000\004\131\273\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\036\002\uffa4\005" +
    "\uffa4\006\uffa4\027\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\066\uffa4\067\uffa4\076\uffa4\101\uffa4\103\uffa4\133\uffa4\001" +
    "\002\000\004\101\274\001\002\000\062\027\116\064\036" +
    "\065\044\066\122\067\105\070\127\071\037\072\130\073" +
    "\126\074\074\075\032\100\056\102\100\104\004\105\027" +
    "\106\035\107\114\110\045\111\111\112\131\113\065\114" +
    "\120\132\010\137\057\001\002\000\036\002\uffa5\005\uffa5" +
    "\006\uffa5\027\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\066" +
    "\uffa5\067\uffa5\076\uffa5\101\uffa5\103\uffa5\133\uffa5\001\002" +
    "\000\006\002\uff7e\006\163\001\002\000\004\002\uffd3\001" +
    "\002\000\006\002\uff7e\006\163\001\002\000\004\002\uffda" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\004\002" +
    "\uffdc\001\002\000\004\002\uffd6\001\002\000\004\002\uffd5" +
    "\001\002\000\062\027\116\064\036\065\044\066\122\067" +
    "\105\070\127\071\037\072\130\073\126\074\074\075\032" +
    "\100\056\102\100\104\004\105\027\106\035\107\114\110" +
    "\045\111\111\112\131\113\065\114\120\132\010\137\057" +
    "\001\002\000\004\076\310\001\002\000\016\027\116\100" +
    "\056\104\004\105\027\132\010\137\057\001\002\000\004" +
    "\101\312\001\002\000\036\002\uff9e\005\uff9e\006\uff9e\027" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e" +
    "\076\uff9e\101\uff9e\103\uff9e\133\uff9e\001\002\000\004\002" +
    "\uffd4\001\002\000\012\002\uff7a\005\145\006\150\027\146" +
    "\001\002\000\004\002\ufff7\001\002\000\004\002\uffef\001" +
    "\002\000\004\101\320\001\002\000\036\002\uff93\005\uff93" +
    "\006\uff93\027\uff93\060\uff93\061\uff93\062\uff93\063\uff93\066" +
    "\uff93\067\uff93\076\uff93\101\uff93\103\uff93\133\uff93\001\002" +
    "\000\004\002\000\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\004\002\uffde\001\002\000\060\027\116\064\036" +
    "\065\044\066\122\067\105\070\127\071\037\072\130\073" +
    "\126\074\074\075\032\100\056\104\004\105\027\106\035" +
    "\107\114\110\045\111\111\112\131\113\065\114\120\132" +
    "\010\137\057\001\002\000\060\027\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\100\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5" +
    "\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\132\uffc5\137" +
    "\uffc5\001\002\000\060\027\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\100\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\113\uffc7\114\uffc7\132\uffc7\137\uffc7\001" +
    "\002\000\060\027\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\100" +
    "\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6" +
    "\112\uffc6\113\uffc6\114\uffc6\132\uffc6\137\uffc6\001\002\000" +
    "\024\002\uffc8\005\uffc8\006\uffc8\027\uffc8\060\325\066\326" +
    "\067\327\076\uffc8\101\uffc8\001\002\000\016\002\uffc9\005" +
    "\uffc9\006\uffc9\027\uffc9\076\uffc9\101\uffc9\001\002\000\062" +
    "\027\116\064\036\065\044\066\122\067\105\070\127\071" +
    "\037\072\130\073\126\074\074\075\032\100\056\102\100" +
    "\104\004\105\027\106\035\107\114\110\045\111\111\112" +
    "\131\113\065\114\120\132\010\137\057\001\002\000\004" +
    "\002\uffd9\001\002\000\004\002\uffe1\001\002\000\062\027" +
    "\116\064\036\065\044\066\122\067\105\070\127\071\037" +
    "\072\130\073\126\074\074\075\032\100\056\102\100\104" +
    "\004\105\027\106\035\107\114\110\045\111\111\112\131" +
    "\113\065\114\120\132\010\137\057\001\002\000\004\076" +
    "\337\001\002\000\016\027\116\100\056\104\004\105\027" +
    "\132\010\137\057\001\002\000\004\101\341\001\002\000" +
    "\036\002\uffa1\005\uffa1\006\uffa1\027\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\066\uffa1\067\uffa1\076\uffa1\101\uffa1\103" +
    "\uffa1\133\uffa1\001\002\000\004\131\343\001\002\000\004" +
    "\076\344\001\002\000\004\131\345\001\002\000\004\101" +
    "\346\001\002\000\062\027\116\064\036\065\044\066\122" +
    "\067\105\070\127\071\037\072\130\073\126\074\074\075" +
    "\032\100\056\102\100\104\004\105\027\106\035\107\114" +
    "\110\045\111\111\112\131\113\065\114\120\132\010\137" +
    "\057\001\002\000\036\002\uffac\005\uffac\006\uffac\027\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\067\uffac\076" +
    "\uffac\101\uffac\103\uffac\133\uffac\001\002\000\004\002\uffdd" +
    "\001\002\000\036\002\uffa8\005\uffa8\006\uffa8\027\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\066\uffa8\067\uffa8\076\uffa8" +
    "\101\uffa8\103\uffa8\133\uffa8\001\002\000\036\002\uffad\005" +
    "\uffad\006\uffad\027\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\066\uffad\067\uffad\076\uffad\101\uffad\103\uffad\133\uffad\001" +
    "\002\000\062\027\116\064\036\065\044\066\122\067\105" +
    "\070\127\071\037\072\130\073\126\074\074\075\032\100" +
    "\056\102\100\104\004\105\027\106\035\107\114\110\045" +
    "\111\111\112\131\113\065\114\120\132\010\137\057\001" +
    "\002\000\004\076\355\001\002\000\016\027\116\100\056" +
    "\104\004\105\027\132\010\137\057\001\002\000\004\101" +
    "\357\001\002\000\036\002\uffa3\005\uffa3\006\uffa3\027\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\067\uffa3\076" +
    "\uffa3\101\uffa3\103\uffa3\133\uffa3\001\002\000\004\002\ufff3" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\002\ufff2\001\002\000\004" +
    "\002\ufff1\001\002\000\004\002\ufffd\001\002\000\004\132" +
    "\371\001\002\000\006\076\376\101\uff89\001\002\000\004" +
    "\101\372\001\002\000\006\076\uff86\101\uff86\001\002\000" +
    "\004\100\373\001\002\000\062\027\116\064\036\065\044" +
    "\066\122\067\105\070\127\071\037\072\130\073\126\074" +
    "\074\075\032\100\056\102\100\104\004\105\027\106\035" +
    "\107\114\110\045\111\111\112\131\113\065\114\120\132" +
    "\010\137\057\001\002\000\004\101\375\001\002\000\036" +
    "\002\uff9c\005\uff9c\006\uff9c\027\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\066\uff9c\067\uff9c\076\uff9c\101\uff9c\103\uff9c" +
    "\133\uff9c\001\002\000\004\132\371\001\002\000\004\101" +
    "\uff8b\001\002\000\006\076\376\101\uff89\001\002\000\004" +
    "\101\uff8a\001\002\000\006\002\uff7e\006\163\001\002\000" +
    "\004\002\uffe2\001\002\000\004\002\uffd0\001\002\000\004" +
    "\132\371\001\002\000\004\101\u0107\001\002\000\004\100" +
    "\u0108\001\002\000\062\027\116\064\036\065\044\066\122" +
    "\067\105\070\127\071\037\072\130\073\126\074\074\075" +
    "\032\100\056\102\100\104\004\105\027\106\035\107\114" +
    "\110\045\111\111\112\131\113\065\114\120\132\010\137" +
    "\057\001\002\000\004\076\u010a\001\002\000\062\027\116" +
    "\064\036\065\044\066\122\067\105\070\127\071\037\072" +
    "\130\073\126\074\074\075\032\100\056\102\100\104\004" +
    "\105\027\106\035\107\114\110\045\111\111\112\131\113" +
    "\065\114\120\132\010\137\057\001\002\000\006\076\u010c" +
    "\101\u010d\001\002\000\062\027\116\064\036\065\044\066" +
    "\122\067\105\070\127\071\037\072\130\073\126\074\074" +
    "\075\032\100\056\102\100\104\004\105\027\106\035\107" +
    "\114\110\045\111\111\112\131\113\065\114\120\132\010" +
    "\137\057\001\002\000\036\002\uff8f\005\uff8f\006\uff8f\027" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\066\uff8f\067\uff8f" +
    "\076\uff8f\101\uff8f\103\uff8f\133\uff8f\001\002\000\004\101" +
    "\u010f\001\002\000\036\002\uff90\005\uff90\006\uff90\027\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\066\uff90\067\uff90\076" +
    "\uff90\101\uff90\103\uff90\133\uff90\001\002\000\030\066\u0111" +
    "\067\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121\u0118\122" +
    "\u0114\123\u0115\124\u0112\132\u0119\001\002\000\004\100\u014d" +
    "\001\002\000\004\100\u0148\001\002\000\004\100\u0144\001" +
    "\002\000\004\100\u013c\001\002\000\004\100\u0134\001\002" +
    "\000\004\100\u0131\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\004\100\u012d\001\002\000\014\002\uff71\006\uff71" +
    "\076\uff71\100\uff71\101\uff71\001\002\000\004\100\u012a\001" +
    "\002\000\004\100\u0123\001\002\000\004\100\u011d\001\002" +
    "\000\034\066\u0111\067\u011b\115\u011c\116\u011a\117\u0113\120" +
    "\u0116\121\u0118\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f" +
    "\132\u0119\001\002\000\010\076\uff73\100\uff73\101\uff73\001" +
    "\002\000\010\076\uff72\100\uff72\101\uff72\001\002\000\010" +
    "\076\uff74\100\uff74\101\uff74\001\002\000\004\101\u0122\001" +
    "\002\000\014\002\uff6f\006\uff6f\076\uff6f\100\uff6f\101\uff6f" +
    "\001\002\000\036\066\u0111\067\u011b\101\u0124\115\u011c\116" +
    "\u011a\117\u0113\120\u0116\121\u0118\122\u0114\123\u0115\124\u0112" +
    "\125\u011e\126\u011f\132\u0119\001\002\000\014\002\uff6a\006" +
    "\uff6a\076\uff6a\100\uff6a\101\uff6a\001\002\000\004\101\u0129" +
    "\001\002\000\006\076\u0127\101\uff62\001\002\000\034\066" +
    "\u0111\067\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121\u0118" +
    "\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119\001" +
    "\002\000\004\101\uff63\001\002\000\014\002\uff6b\006\uff6b" +
    "\076\uff6b\100\uff6b\101\uff6b\001\002\000\034\066\u0111\067" +
    "\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121\u0118\122\u0114" +
    "\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119\001\002\000" +
    "\004\101\u012c\001\002\000\014\002\uff6e\006\uff6e\076\uff6e" +
    "\100\uff6e\101\uff6e\001\002\000\034\066\u0111\067\u011b\115" +
    "\u011c\116\u011a\117\u0113\120\u0116\121\u0118\122\u0114\123\u0115" +
    "\124\u0112\125\u011e\126\u011f\132\u0119\001\002\000\004\101" +
    "\u012f\001\002\000\014\002\uff66\006\uff66\076\uff66\100\uff66" +
    "\101\uff66\001\002\000\004\002\uffeb\001\002\000\034\066" +
    "\u0111\067\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121\u0118" +
    "\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119\001" +
    "\002\000\004\101\u0133\001\002\000\014\002\uff67\006\uff67" +
    "\076\uff67\100\uff67\101\uff67\001\002\000\034\066\u0111\067" +
    "\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121\u0118\122\u0114" +
    "\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119\001\002\000" +
    "\004\076\u0136\001\002\000\034\066\u0111\067\u011b\115\u011c" +
    "\116\u011a\117\u0113\120\u0116\121\u0118\122\u0114\123\u0115\124" +
    "\u0112\125\u011e\126\u011f\132\u0119\001\002\000\004\100\u0138" +
    "\001\002\000\062\027\116\064\036\065\044\066\122\067" +
    "\105\070\127\071\037\072\130\073\126\074\074\075\032" +
    "\100\056\102\100\104\004\105\027\106\035\107\114\110" +
    "\045\111\111\112\131\113\065\114\120\132\010\137\057" +
    "\001\002\000\004\101\u013a\001\002\000\004\101\u013b\001" +
    "\002\000\014\002\uff64\006\uff64\076\uff64\100\uff64\101\uff64" +
    "\001\002\000\034\066\u0111\067\u011b\115\u011c\116\u011a\117" +
    "\u0113\120\u0116\121\u0118\122\u0114\123\u0115\124\u0112\125\u011e" +
    "\126\u011f\132\u0119\001\002\000\004\100\u013e\001\002\000" +
    "\062\027\116\064\036\065\044\066\122\067\105\070\127" +
    "\071\037\072\130\073\126\074\074\075\032\100\056\102" +
    "\100\104\004\105\027\106\035\107\114\110\045\111\111" +
    "\112\131\113\065\114\120\132\010\137\057\001\002\000" +
    "\004\101\u0140\001\002\000\004\076\u0141\001\002\000\034" +
    "\066\u0111\067\u011b\115\u011c\116\u011a\117\u0113\120\u0116\121" +
    "\u0118\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119" +
    "\001\002\000\004\101\u0143\001\002\000\014\002\uff65\006" +
    "\uff65\076\uff65\100\uff65\101\uff65\001\002\000\036\066\u0111" +
    "\067\u011b\101\u0145\115\u011c\116\u011a\117\u0113\120\u0116\121" +
    "\u0118\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119" +
    "\001\002\000\014\002\uff68\006\uff68\076\uff68\100\uff68\101" +
    "\uff68\001\002\000\004\101\u0147\001\002\000\014\002\uff69" +
    "\006\uff69\076\uff69\100\uff69\101\uff69\001\002\000\004\132" +
    "\u0149\001\002\000\004\076\u014a\001\002\000\004\132\u014b" +
    "\001\002\000\004\101\u014c\001\002\000\014\002\uff70\006" +
    "\uff70\076\uff70\100\uff70\101\uff70\001\002\000\036\066\u0111" +
    "\067\u011b\101\u014e\115\u011c\116\u011a\117\u0113\120\u0116\121" +
    "\u0118\122\u0114\123\u0115\124\u0112\125\u011e\126\u011f\132\u0119" +
    "\001\002\000\014\002\uff6c\006\uff6c\076\uff6c\100\uff6c\101" +
    "\uff6c\001\002\000\004\101\u0150\001\002\000\014\002\uff6d" +
    "\006\uff6d\076\uff6d\100\uff6d\101\uff6d\001\002\000\062\027" +
    "\116\064\036\065\044\066\122\067\105\070\127\071\037" +
    "\072\130\073\126\074\074\075\032\100\056\102\100\104" +
    "\004\105\027\106\035\107\114\110\045\111\111\112\131" +
    "\113\065\114\120\132\010\137\057\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\002\ufff9\001\002\000\004" +
    "\002\ufffc\001\002\000\010\002\uff7e\006\163\132\u0157\001" +
    "\002\000\004\002\uffea\001\002\000\010\002\uff7e\006\163" +
    "\100\245\001\002\000\004\002\uffe9\001\002\000\006\002" +
    "\uff7e\006\163\001\002\000\004\002\uffe8\001\002\000\006" +
    "\002\uff7e\006\163\001\002\000\004\002\ufff4\001\002\000" +
    "\012\002\uff7a\005\145\006\150\027\146\001\002\000\004" +
    "\002\ufff8\001\002\000\012\002\uff7a\005\145\006\150\027" +
    "\146\001\002\000\004\002\ufff6\001\002\000\004\002\uffdf" +
    "\001\002\000\006\002\uff7e\006\163\001\002\000\006\002" +
    "\uffcc\006\uffcc\001\002\000\006\002\uffcd\006\uffcd\001\002" +
    "\000\006\002\uffce\006\uffce\001\002\000\004\002\uffd2\001" +
    "\002\000\004\132\u0168\001\002\000\014\002\uff7e\006\163" +
    "\134\u016a\135\u016b\136\u016c\001\002\000\004\002\uffe7\001" +
    "\002\000\004\131\u0171\001\002\000\004\131\u016f\001\002" +
    "\000\004\131\u016d\001\002\000\006\002\uff7e\006\163\001" +
    "\002\000\004\002\uffe4\001\002\000\006\002\uff7e\006\163" +
    "\001\002\000\004\002\uffe5\001\002\000\006\002\uff7e\006" +
    "\163\001\002\000\004\002\uffe6\001\002\000\004\002\uffdb" +
    "\001\002\000\004\132\u0178\001\002\000\062\027\116\064" +
    "\036\065\044\066\122\067\105\070\127\071\037\072\130" +
    "\073\126\074\074\075\032\100\056\102\100\104\004\105" +
    "\027\106\035\107\114\110\045\111\111\112\131\113\065" +
    "\114\120\132\010\137\057\001\002\000\004\101\u0177\001" +
    "\002\000\036\002\uff94\005\uff94\006\uff94\027\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\066\uff94\067\uff94\076\uff94\101" +
    "\uff94\103\uff94\133\uff94\001\002\000\036\002\uff98\005\uff98" +
    "\006\uff98\027\uff98\060\uff98\061\uff98\062\uff98\063\uff98\066" +
    "\uff98\067\uff98\076\uff98\101\uff98\103\uff98\133\uff98\001\002" +
    "\000\006\002\uff7e\006\163\001\002\000\004\002\uffcf\001" +
    "\002\000\006\002\uff7e\006\163\001\002\000\004\002\uffd1" +
    "\001\002\000\004\002\ufff0\001\002\000\004\132\371\001" +
    "\002\000\004\101\u0180\001\002\000\004\100\u0181\001\002" +
    "\000\062\027\116\064\036\065\044\066\122\067\105\070" +
    "\127\071\037\072\130\073\126\074\074\075\032\100\056" +
    "\102\100\104\004\105\027\106\035\107\114\110\045\111" +
    "\111\112\131\113\065\114\120\132\010\137\057\001\002" +
    "\000\004\076\u0183\001\002\000\062\027\116\064\036\065" +
    "\044\066\122\067\105\070\127\071\037\072\130\073\126" +
    "\074\074\075\032\100\056\102\100\104\004\105\027\106" +
    "\035\107\114\110\045\111\111\112\131\113\065\114\120" +
    "\132\010\137\057\001\002\000\006\076\u0185\101\u0186\001" +
    "\002\000\062\027\116\064\036\065\044\066\122\067\105" +
    "\070\127\071\037\072\130\073\126\074\074\075\032\100" +
    "\056\102\100\104\004\105\027\106\035\107\114\110\045" +
    "\111\111\112\131\113\065\114\120\132\010\137\057\001" +
    "\002\000\036\002\uff91\005\uff91\006\uff91\027\uff91\060\uff91" +
    "\061\uff91\062\uff91\063\uff91\066\uff91\067\uff91\076\uff91\101" +
    "\uff91\103\uff91\133\uff91\001\002\000\004\101\u0188\001\002" +
    "\000\036\002\uff92\005\uff92\006\uff92\027\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\066\uff92\067\uff92\076\uff92\101\uff92" +
    "\103\uff92\133\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0186\000\066\002\054\003\015\004\061\005\070\013" +
    "\032\022\023\023\112\024\016\025\047\026\051\027\103" +
    "\030\041\031\062\032\020\033\075\034\111\035\053\036" +
    "\050\037\106\040\100\041\037\042\040\043\101\044\074" +
    "\046\114\050\105\001\001\000\002\001\001\000\004\010" +
    "\u017c\001\001\000\002\001\001\000\004\006\u0178\001\001" +
    "\000\002\001\001\000\004\010\u0172\001\001\000\002\001" +
    "\001\000\004\006\u0161\001\001\000\004\010\u0160\001\001" +
    "\000\056\013\132\022\u015e\023\112\024\016\025\047\026" +
    "\051\027\103\030\041\031\062\032\020\033\075\034\111" +
    "\035\053\036\050\037\106\040\100\041\037\042\040\043" +
    "\101\044\074\046\114\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\013\132\022\u015c\023\112\024" +
    "\016\025\047\026\051\027\103\030\041\031\062\032\020" +
    "\033\075\034\111\035\053\036\050\037\106\040\100\041" +
    "\037\042\040\043\101\044\074\046\114\050\105\001\001" +
    "\000\002\001\001\000\052\013\132\025\140\026\051\027" +
    "\103\030\041\031\062\032\020\033\075\034\111\035\053" +
    "\036\050\037\106\040\100\041\037\042\040\043\101\044" +
    "\074\046\114\047\u015a\050\166\001\001\000\002\001\001" +
    "\000\004\007\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0103\001\001\000\054" +
    "\013\132\025\140\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\047\170\050" +
    "\166\055\u0101\001\001\000\002\001\001\000\004\007\364" +
    "\001\001\000\004\010\357\001\001\000\002\001\001\000" +
    "\014\013\132\033\351\034\111\035\053\046\114\001\001" +
    "\000\050\013\132\025\140\026\051\027\103\030\041\031" +
    "\062\032\020\033\075\034\111\035\053\036\050\037\106" +
    "\040\100\041\037\042\040\043\101\044\074\046\114\050" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\333\001\001\000\002\001\001" +
    "\000\004\012\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\013\132\025\140\026\051\027\103\030\041" +
    "\031\062\032\020\033\075\034\111\035\053\036\050\037" +
    "\106\040\100\041\037\042\040\043\101\044\074\046\114" +
    "\047\170\050\166\055\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\013\132\022\316\023\112\024\016" +
    "\025\047\026\051\027\103\030\041\031\062\032\020\033" +
    "\075\034\111\035\053\036\050\037\106\040\100\041\037" +
    "\042\040\043\101\044\074\046\114\050\105\001\001\000" +
    "\002\001\001\000\004\010\315\001\001\000\056\013\132" +
    "\022\313\023\112\024\016\025\047\026\051\027\103\030" +
    "\041\031\062\032\020\033\075\034\111\035\053\036\050" +
    "\037\106\040\100\041\037\042\040\043\101\044\074\046" +
    "\114\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\312\001\001\000\002\001\001\000\004\010" +
    "\304\001\001\000\004\010\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\132\033\277\034\111\035" +
    "\053\046\114\001\001\000\052\013\132\025\140\026\051" +
    "\027\103\030\041\031\062\032\020\033\075\034\111\035" +
    "\053\036\050\037\106\040\100\041\037\042\040\043\101" +
    "\044\074\046\114\047\275\050\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\013\132\025\256\026\051\027\103\030\041\031" +
    "\062\032\020\033\075\034\111\035\053\036\050\037\106" +
    "\040\100\041\037\042\040\043\101\044\074\046\114\051" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\013\132\025\140\026" +
    "\051\027\103\030\041\031\062\032\020\033\075\034\111" +
    "\035\053\036\050\037\106\040\100\041\037\042\040\043" +
    "\101\044\074\046\114\050\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\200\001" +
    "\001\000\002\001\001\000\004\010\172\001\001\000\050" +
    "\013\132\025\140\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\050\171\001" +
    "\001\000\002\001\001\000\056\013\132\022\160\023\112" +
    "\024\016\025\047\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\050\105\001" +
    "\001\000\056\013\132\022\143\023\112\024\016\025\047" +
    "\026\051\027\103\030\041\031\062\032\020\033\075\034" +
    "\111\035\053\036\050\037\106\040\100\041\037\042\040" +
    "\043\101\044\074\046\114\050\105\001\001\000\050\013" +
    "\132\025\140\026\051\027\103\030\041\031\062\032\020" +
    "\033\075\034\111\035\053\036\050\037\106\040\100\041" +
    "\037\042\040\043\101\044\074\046\114\050\142\001\001" +
    "\000\050\013\132\025\140\026\051\027\103\030\041\031" +
    "\062\032\020\033\075\034\111\035\053\036\050\037\106" +
    "\040\100\041\037\042\040\043\101\044\074\046\114\050" +
    "\141\001\001\000\050\013\132\025\140\026\051\027\103" +
    "\030\041\031\062\032\020\033\075\034\111\035\053\036" +
    "\050\037\106\040\100\041\037\042\040\043\101\044\074" +
    "\046\114\050\137\001\001\000\002\001\001\000\014\013" +
    "\132\033\133\034\111\035\053\046\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\013\132\022\135\023" +
    "\112\024\016\025\047\026\051\027\103\030\041\031\062" +
    "\032\020\033\075\034\111\035\053\036\050\037\106\040" +
    "\100\041\037\042\040\043\101\044\074\046\114\050\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\146\011\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\013\132\022\163\023\112\024\016\025\047\026" +
    "\051\027\103\030\041\031\062\032\020\033\075\034\111" +
    "\035\053\036\050\037\106\040\100\041\037\042\040\043" +
    "\101\044\074\046\114\050\105\001\001\000\004\010\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\146\011\164\001\001\000\002\001\001\000\054\013\132" +
    "\025\140\026\051\027\103\030\041\031\062\032\020\033" +
    "\075\034\111\035\053\036\050\037\106\040\100\041\037" +
    "\042\040\043\101\044\074\046\114\047\170\050\166\055" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\132\033\174\034\111\035\053\046\114\001\001\000\002" +
    "\001\001\000\056\013\132\022\176\023\112\024\016\025" +
    "\047\026\051\027\103\030\041\031\062\032\020\033\075" +
    "\034\111\035\053\036\050\037\106\040\100\041\037\042" +
    "\040\043\101\044\074\046\114\050\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\013\132\025\140\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\050\205\056" +
    "\206\001\001\000\004\057\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\013\132\025\140\026\051\027" +
    "\103\030\041\031\062\032\020\033\075\034\111\035\053" +
    "\036\050\037\106\040\100\041\037\042\040\043\101\044" +
    "\074\046\114\050\212\001\001\000\002\001\001\000\004" +
    "\057\213\001\001\000\002\001\001\000\056\013\132\022" +
    "\215\023\112\024\016\025\047\026\051\027\103\030\041" +
    "\031\062\032\020\033\075\034\111\035\053\036\050\037" +
    "\106\040\100\041\037\042\040\043\101\044\074\046\114" +
    "\050\105\001\001\000\002\001\001\000\014\013\132\033" +
    "\217\034\111\035\053\046\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\132\033\222\034\111\035" +
    "\053\046\114\001\001\000\002\001\001\000\014\013\132" +
    "\033\224\034\111\035\053\046\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\227\001\001\000\002" +
    "\001\001\000\050\013\132\025\140\026\051\027\103\030" +
    "\041\031\062\032\020\033\075\034\111\035\053\036\050" +
    "\037\106\040\100\041\037\042\040\043\101\044\074\046" +
    "\114\050\237\001\001\000\050\013\132\025\140\026\051" +
    "\027\103\030\041\031\062\032\020\033\075\034\111\035" +
    "\053\036\050\037\106\040\100\041\037\042\040\043\101" +
    "\044\074\046\114\050\236\001\001\000\050\013\132\025" +
    "\140\026\051\027\103\030\041\031\062\032\020\033\075" +
    "\034\111\035\053\036\050\037\106\040\100\041\037\042" +
    "\040\043\101\044\074\046\114\050\235\001\001\000\050" +
    "\013\132\025\140\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\050\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\243\001\001\000\004\010\252\001\001\000\002" +
    "\001\001\000\004\015\246\001\001\000\002\001\001\000" +
    "\004\015\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\260\001\001\000\046" +
    "\013\132\025\261\026\051\027\103\030\041\031\062\032" +
    "\020\033\075\034\111\035\053\036\050\037\106\040\100" +
    "\041\037\042\040\043\101\044\074\046\114\001\001\000" +
    "\002\001\001\000\004\052\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\013\132\025\140" +
    "\026\051\027\103\030\041\031\062\032\020\033\075\034" +
    "\111\035\053\036\050\037\106\040\100\041\037\042\040" +
    "\043\101\044\074\046\114\050\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\013\132\025\140\026\051" +
    "\027\103\030\041\031\062\032\020\033\075\034\111\035" +
    "\053\036\050\037\106\040\100\041\037\042\040\043\101" +
    "\044\074\046\114\050\274\001\001\000\002\001\001\000" +
    "\004\010\276\001\001\000\002\001\001\000\004\010\300" +
    "\001\001\000\002\001\001\000\004\010\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\013\132\022\306\023\112\024\016\025\047\026\051\027" +
    "\103\030\041\031\062\032\020\033\075\034\111\035\053" +
    "\036\050\037\106\040\100\041\037\042\040\043\101\044" +
    "\074\046\114\050\105\001\001\000\002\001\001\000\014" +
    "\013\132\033\310\034\111\035\053\046\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\146\011\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\322\001\001\000\002\001\001\000\050\013" +
    "\132\023\330\025\327\026\051\027\103\030\041\031\062" +
    "\032\020\033\075\034\111\035\053\036\050\037\106\040" +
    "\100\041\037\042\040\043\101\044\074\046\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\323\001\001\000\002\001\001\000\052\013\132" +
    "\025\140\026\051\027\103\030\041\031\062\032\020\033" +
    "\075\034\111\035\053\036\050\037\106\040\100\041\037" +
    "\042\040\043\101\044\074\046\114\047\332\050\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\013\132" +
    "\022\335\023\112\024\016\025\047\026\051\027\103\030" +
    "\041\031\062\032\020\033\075\034\111\035\053\036\050" +
    "\037\106\040\100\041\037\042\040\043\101\044\074\046" +
    "\114\050\105\001\001\000\002\001\001\000\014\013\132" +
    "\033\337\034\111\035\053\046\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\013\132\025" +
    "\140\026\051\027\103\030\041\031\062\032\020\033\075" +
    "\034\111\035\053\036\050\037\106\040\100\041\037\042" +
    "\040\043\101\044\074\046\114\050\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\013\132\022\353\023\112\024\016\025\047" +
    "\026\051\027\103\030\041\031\062\032\020\033\075\034" +
    "\111\035\053\036\050\037\106\040\100\041\037\042\040" +
    "\043\101\044\074\046\114\050\105\001\001\000\002\001" +
    "\001\000\014\013\132\033\355\034\111\035\053\046\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\363\001\001\000\004\010\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\366\053\367\001\001\000\004\054\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\013\132\022\373\023\112\024\016\025\047\026\051" +
    "\027\103\030\041\031\062\032\020\033\075\034\111\035" +
    "\053\036\050\037\106\040\100\041\037\042\040\043\101" +
    "\044\074\046\114\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\377\001\001\000\002\001\001" +
    "\000\004\054\u0100\001\001\000\002\001\001\000\004\010" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\366\053\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\013\132\025\140\026\051\027\103\030\041" +
    "\031\062\032\020\033\075\034\111\035\053\036\050\037" +
    "\106\040\100\041\037\042\040\043\101\044\074\046\114" +
    "\050\u0108\001\001\000\002\001\001\000\050\013\132\025" +
    "\140\026\051\027\103\030\041\031\062\032\020\033\075" +
    "\034\111\035\053\036\050\037\106\040\100\041\037\042" +
    "\040\043\101\044\074\046\114\050\u010a\001\001\000\002" +
    "\001\001\000\050\013\132\025\140\026\051\027\103\030" +
    "\041\031\062\032\020\033\075\034\111\035\053\036\050" +
    "\037\106\040\100\041\037\042\040\043\101\044\074\046" +
    "\114\050\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u0120\020" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0125\020\u011f\021\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u0125\020\u011f\021" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u012a\020\u011f\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u012d\020\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u0131\020" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u0134\020\u011f\001\001\000\002\001\001\000\006\017" +
    "\u0136\020\u011f\001\001\000\002\001\001\000\056\013\132" +
    "\022\u0138\023\112\024\016\025\047\026\051\027\103\030" +
    "\041\031\062\032\020\033\075\034\111\035\053\036\050" +
    "\037\106\040\100\041\037\042\040\043\101\044\074\046" +
    "\114\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u013c\020\u011f\001\001\000" +
    "\002\001\001\000\056\013\132\022\u013e\023\112\024\016" +
    "\025\047\026\051\027\103\030\041\031\062\032\020\033" +
    "\075\034\111\035\053\036\050\037\106\040\100\041\037" +
    "\042\040\043\101\044\074\046\114\050\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\u0141\020\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0125\020\u011f\021\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0125\020\u011f\021\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\013\132" +
    "\025\140\026\051\027\103\030\041\031\062\032\020\033" +
    "\075\034\111\035\053\036\050\037\106\040\100\041\037" +
    "\042\040\043\101\044\074\046\114\050\u0151\001\001\000" +
    "\004\010\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0155\001\001\000\002\001\001\000\006\010" +
    "\u0157\016\u0158\001\001\000\002\001\001\000\004\010\u0159" +
    "\001\001\000\002\001\001\000\004\010\u015b\001\001\000" +
    "\002\001\001\000\006\007\146\011\u015d\001\001\000\002" +
    "\001\001\000\006\007\146\011\u015f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u016d\001\001\000\002\001\001\000\004" +
    "\010\u016f\001\001\000\002\001\001\000\004\010\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\013\132\025\140\026\051\027\103\030\041\031" +
    "\062\032\020\033\075\034\111\035\053\036\050\037\106" +
    "\040\100\041\037\042\040\043\101\044\074\046\114\050" +
    "\205\056\u0175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0179\001\001\000\002\001" +
    "\001\000\004\010\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\366\053\u017e\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\013\132\025\140\026\051" +
    "\027\103\030\041\031\062\032\020\033\075\034\111\035" +
    "\053\036\050\037\106\040\100\041\037\042\040\043\101" +
    "\044\074\046\114\050\u0181\001\001\000\002\001\001\000" +
    "\050\013\132\025\140\026\051\027\103\030\041\031\062" +
    "\032\020\033\075\034\111\035\053\036\050\037\106\040" +
    "\100\041\037\042\040\043\101\044\074\046\114\050\u0183" +
    "\001\001\000\002\001\001\000\050\013\132\025\140\026" +
    "\051\027\103\030\041\031\062\032\020\033\075\034\111" +
    "\035\053\036\050\037\106\040\100\041\037\042\040\043" +
    "\101\044\074\046\114\050\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



String command;
String warning = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // command ::= wffNameCommand 
            {
              String RESULT =null;
		int wncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wnc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(warning.length()!=0){
				warning+="\n";
			}
			RESULT = warning + wnc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= command EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= snepslogCommand 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(warning.length()!=0){
				warning+="\n";
			}
			RESULT = warning + sc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= wffCommand 
            {
              String RESULT =null;
		int wcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(warning.length()!=0){
				warning+="\n";
			}
			RESULT = warning + wc;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wffNameCommand ::= wffName terminalPunctuation 
            {
              String RESULT =null;
		int wnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String wn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Node w = Network.getNodes().get("M"+wn.substring(3));   
				ArrayList<Node> nodes = new ArrayList<>();
				ArrayList<Node> matchingNodes = new ArrayList<>();
				switch (tp) {
				case ".":
					try {
						Controller.addPropToCurrentContext(w.getId());
						nodes.add(w);
						RESULT = AP.displayWffs(nodes);
					} catch (DuplicatePropositionException e) {
						RESULT = e.getMessage();
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "!":
					try {
						nodes = AP.forwardInference(w, "!");
						RESULT = AP.displayWffs(nodes);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "??":
					try{
						matchingNodes = AP.match(w);
						for(int i=0;i<matchingNodes.size();i++){
							if(Controller.getCurrentContext().isAsserted((PropositionNode) matchingNodes.get(i))){
								nodes.add(matchingNodes.get(i));
							}
						}
						if (!nodes.isEmpty()) {
							RESULT = AP.displayWffs(nodes);
						} else {
							RESULT = "";
						}
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				case "?":
						try {
							matchingNodes = AP.match(w);
							for(int i=0;i<matchingNodes.size();i++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(i), "?", -1, -1);
								for(int j=0;j<temp.size();j++){
									nodes.add(temp.get(j));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
						break;
				default:
					try{
						if (tp.startsWith("ONE")) {
							int i = Integer.parseInt(tp.substring(3));
							matchingNodes = AP.match(w);
					    		for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, -1);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} else {
							int i = Integer.parseInt(tp.substring(3).split(",")[0]);
							int j = Integer.parseInt(tp.substring(3).split(",")[1]);
							matchingNodes = AP.match(w);
							for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, j);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						}
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				}
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffNameCommand",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wffCommand ::= wff terminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		   		if(w.getTerm() instanceof Base){
		   			throw new IllegalAtomicSymbolException("wff must not be an atomic symbol");
		   		}
				ArrayList<Node> nodes = new ArrayList<>();
				ArrayList<Node> matchingNodes = new ArrayList<>();
				switch (tp) {
				case ".":
					try {
						Controller.addPropToCurrentContext(w.getId());
						nodes.add(w);
						RESULT = AP.displayWffs(nodes);
					} catch (DuplicatePropositionException e) {
						RESULT = e.getMessage();
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "!":
					try {
						nodes = AP.forwardInference(w, "!");
						RESULT = AP.displayWffs(nodes);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
					break;
				case "??":
					try{
					matchingNodes = AP.match(w);
						for(int i=0;i<matchingNodes.size();i++){
							if(Controller.getCurrentContext().isAsserted((PropositionNode) matchingNodes.get(i))){
								nodes.add(matchingNodes.get(i));
							}
						}
						if (!nodes.isEmpty()) {
							RESULT = AP.displayWffs(nodes);
						} else {
							RESULT = "";
						}
						}catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				case "?":
						try {
							matchingNodes = AP.match(w);
							for(int i=0;i<matchingNodes.size();i++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(i), "?", -1, -1);
								for(int j=0;j<temp.size();j++){
									nodes.add(temp.get(j));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
						break;
				default:
					try{
						if (tp.startsWith("ONE")) {
							int i = Integer.parseInt(tp.substring(3));
							matchingNodes = AP.match(w);
					    		for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, -1);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						} else {
							int i = Integer.parseInt(tp.substring(3).split(",")[0]);
							int j = Integer.parseInt(tp.substring(3).split(",")[1]);
							matchingNodes = AP.match(w);
							for(int a=0;a<matchingNodes.size();a++){
								ArrayList<Node> temp = AP.deduce(matchingNodes.get(a), "?", i, j);
								for(int b=0;b<temp.size();b++){
									nodes.add(temp.get(b));
								}
							}
							RESULT = AP.displayWffs(nodes);
						}
						} catch (NotAPropositionNodeException e) {
							RESULT = e.getMessage();
						} catch (NodeNotFoundInNetworkException e) {
							RESULT = e.getMessage();
						} catch (Exception e) {
							RESULT = e.getMessage();
						}
					break;
				}
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffCommand",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // snepslogCommand ::= ACTIVATE wff optionalDot 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.forwardInference(w, "activate");
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // snepslogCommand ::= ACTIVATE BANG wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                		try {
						ArrayList<Node> output = AP.forwardInference(w, "activate!");
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // snepslogCommand ::= ADD_TO_CONTEXT IDENTIFIER termSet optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						Controller.addPropsToContext(id, AP.arrayListToPropositionSet(ts));
						RESULT = "";
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (ContextNameDoesntExistException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // snepslogCommand ::= ASK wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "ask", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // snepslogCommand ::= ASKIFNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askifnot", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // snepslogCommand ::= ASKWH wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askwh", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // snepslogCommand ::= ASKWHNOT wff optionalTerminalPunctuation 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						ArrayList<Node> output = AP.deduce(w, "askwhnot", -1, -1);
						RESULT = AP.displayWffs(output);
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // snepslogCommand ::= BELIEFS_ABOUT pTermSet optionalDot 
            {
              String RESULT =null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try {
						RESULT = AP.displayWffs(AP.beliefsAbout(pts));
					} catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // snepslogCommand ::= BR_MODE optionalDot 
            {
              String RESULT =null;
		 
					RESULT = AP.getBrMode();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // snepslogCommand ::= BR_MODE AUTO optionalDot 
            {
              String RESULT =null;
		 
					AP.setBrMode("auto");
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // snepslogCommand ::= BR_MODE MANUAL optionalDot 
            {
              String RESULT =null;
		 
					AP.setBrMode("manual");
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // snepslogCommand ::= CLEAR_INFER optionalDot 
            {
              String RESULT =null;
		 
					AP.clearInfer();
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // snepslogCommand ::= CLEARKB optionalDot 
            {
              String RESULT =null;
		 
					AP.clearKnowledgeBase();
					RESULT = "The knowledge base is cleared.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // snepslogCommand ::= COPYRIGHT optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "copyright statement goes here.";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							AP.createModeThreeCaseFrame(id1, id2, idl, null);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // snepslogCommand ::= DEFINE_FRAME IDENTIFIER IDENTIFIER identifiers_list STRING_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							AP.createModeThreeCaseFrame(id1, id2, idl, sl);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // snepslogCommand ::= DEFINE_PATH IDENTIFIER snepsPath optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path sp = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							Network.definePath(Network.getRelation(id),sp);
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id,null,null);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id1,id2,null);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // snepslogCommand ::= DEFINE_SEMANTIC IDENTIFIER IDENTIFIER identifiers_list optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						AP.defineSemantic(id1,id2,ids);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2);
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER EXPAND INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER REDUCE INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // snepslogCommand ::= DEFINE_RELATION IDENTIFIER IDENTIFIER NONE INT_LIT optionalDot 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(AP.getSnepslogMode()==3){
						Network.defineRelation(id1, id2, a, Integer.valueOf(l));
						RESULT = "";
					}else{
						RESULT = "You can only use this command in Mode 3.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // snepslogCommand ::= DESCRIBE_CONTEXT optionalIdentifier optionalDot 
            {
              String RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(oid!=null){
						RESULT = Controller.getContextByName(oid).toString();
					}else{
						RESULT = Controller.getCurrentContext().toString();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // snepslogCommand ::= DESCRIBE_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(opts!=null){
						RESULT = AP.describeTerms(opts);
					}else{
						RESULT = AP.describeTerms(AP.getAllClosedNodesFromTheNetwork());
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // snepslogCommand ::= EXPERT optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("expert")) {
						AP.setPrintingMode("expert");
						RESULT = "expert mode is turned on.";
					}else{
						RESULT = "expert mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // snepslogCommand ::= LIST_ASSERTED_WFFS optionalIdentifier optionalDot 
            {
              String RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				try{
					if(oid!=null){
						RESULT = AP.displayWffs(AP.propositionSetToArrayList(Controller.getContextByName(oid).allAsserted()));
					}else{
						RESULT = AP.displayWffs(AP.propositionSetToArrayList(Controller.getCurrentContext().allAsserted()));
					}
				}  catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
				} catch (NodeNotFoundInNetworkException e) {
					RESULT = e.getMessage();
				} catch (Exception e) {
					RESULT = e.getMessage();
				}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // snepslogCommand ::= LIST_CONTEXTS optionalDot 
            {
              String RESULT =null;
		 
					Set<String> contexts = Controller.getAllNamesOfContexts();
					String output = "";
					for (String context : contexts) {
						output+=context+'\n';
					}
					if(output.length()!=0) {
						output=output.substring(0, output.length()-1);
					}
					RESULT = output;		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // snepslogCommand ::= LIST_TERMS optionalPTermSet optionalDot 
            {
              String RESULT =null;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(opts!=null){
							RESULT = AP.displayWffs(AP.getClosed(opts));
						}else{
							RESULT = AP.displayWffs(AP.getAllClosedNodesFromTheNetwork());
						}
					}  catch (NotAPropositionNodeException e) {
						RESULT = e.getMessage();
					} catch (NodeNotFoundInNetworkException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // snepslogCommand ::= LIST_WFFS optionalDot 
            {
              String RESULT =null;
		 
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // snepslogCommand ::= LOAD FILEPATH optionalDot 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					RESULT = AP.loadFile(fp);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // snepslogCommand ::= NORMAL optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("normal")) {
						AP.setPrintingMode("normal");
						RESULT = "normal mode is turned on.";
					}else{
						RESULT = "normal mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // snepslogCommand ::= PERFORM atomicTerm optionalDot 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node at = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.perform(at);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // snepslogCommand ::= REMOVE_FROM_CONTEXT IDENTIFIER pTermSet 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					AP.removeFromContext(id, AP.arrayListToPropositionSet(pts));
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // snepslogCommand ::= SET_CONTEXT IDENTIFIER optionalPTermSet 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> opts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					try{
						if(opts!=null){
							Controller.createContext(id, AP.arrayListToPropositionSet(opts));
						}else{
							Controller.createContext(id);
						}
						RESULT = "";
					} catch (DuplicateContextNameException e) {
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // snepslogCommand ::= SET_DEFAULT_CONTEXT IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					try{
						Controller.setCurrentContext(id);
						RESULT = "";
					} catch (DuplicateContextNameException e) {
						RESULT = e.getMessage();
					}catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // snepslogCommand ::= SET_MODE_1 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=1) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(1);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 1.";
					}else{
						RESULT = "Mode 1 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // snepslogCommand ::= SET_MODE_2 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=2) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(2);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 2.";
					}else{
						RESULT = "Mode 2 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // snepslogCommand ::= SET_MODE_3 optionalDot 
            {
              String RESULT =null;
		 
					if(AP.getSnepslogMode()!=3) {
						AP.clearKnowledgeBase();
						AP.setSnepslogMode(3);
						RESULT = "The knowledge base is cleared, and SNePSLOG is put into Mode 3.";
					}else{
						RESULT = "Mode 3 is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // snepslogCommand ::= SHOW pTermSet optionalDot 
            {
              String RESULT =null;
		 

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // snepslogCommand ::= TRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.activateTracing(sf);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // snepslogCommand ::= UNDEFINE_PATH IDENTIFIER optionalDot 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
						if(AP.getSnepslogMode()==3){
							Network.undefinePath(Network.getRelation(id));
							RESULT = "";
						}else{
							RESULT = "You can only use this command in Mode 3.";
						}
					} catch(RelationDoesntExistException e){
						RESULT = e.getMessage();
					} catch (Exception e) {
						RESULT = e.getMessage();
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // snepslogCommand ::= UNLABELED optionalDot 
            {
              String RESULT =null;
		 
					if(!AP.getPrintingMode().equals("unlabeled")) {
						AP.setPrintingMode("unlabeled");
						RESULT = "unlabeled mode is turned on.";
					}else{
						RESULT = "unlabeled mode is already in use.";
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // snepslogCommand ::= UNTRACE snepslogFunction optionalDot 
            {
              String RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					AP.deactivateTracing(sf);
					RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogCommand",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // snepslogFunction ::= INFERENCE 
            {
              String RESULT =null;
		
					RESULT = "inference";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // snepslogFunction ::= ACTING 
            {
              String RESULT =null;
		
					RESULT = "acting";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // snepslogFunction ::= PARSING 
            {
              String RESULT =null;
		
					RESULT = "parsing";
		     	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogFunction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // wff ::= infixedTerm 
            {
              Node RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = it;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // wff ::= entailment 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    		RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wff",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // infixedTerm ::= prefixedTerm andOrEquality infixedTerm 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		try{
    					RESULT = AP.buildInfixedTerm(type, arg1, arg2);
    				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // infixedTerm ::= prefixedTerm 
            {
              Node RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		RESULT = pt;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infixedTerm",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // andOrEquality ::= AND 
            {
              String RESULT =null;
		
             			RESULT = "and";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // andOrEquality ::= OR 
            {
              String RESULT =null;
		
             			RESULT = "or";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // andOrEquality ::= EQUALITY 
            {
              String RESULT =null;
		
             			RESULT = "equality";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOrEquality",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // entailment ::= termSet IMPLICATION termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    				try{
    					RESULT = AP.buildEntailment("Implication", antecedents, consequents, null);
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // entailment ::= termSet OR_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("OrEntailment", antecedents, consequents, null);
				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // entailment ::= termSet AND_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("AndEntailment", antecedents, consequents, null);
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // entailment ::= termSet NUMERICAL_ENTAILMENT termSet 
            {
              Node RESULT =null;
		int antecedentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int antecedentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> antecedents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consequentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consequentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> consequents = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		try{
           			RESULT = AP.buildEntailment("NumericalEntailment", antecedents, consequents, ne.substring(0,ne.length()-2));
           		} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entailment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pTermSet ::= termSet 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    			ArrayList<Node> out = new ArrayList<Node>();
			for (int i = 0; i < ts.size(); i++) {
				ArrayList<Node> temp = AP.match(ts.get(i));
				for (int j = 0; j < temp.size(); j++) {
					out.add(temp.get(j));
				}
			}
			RESULT = out;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pTermSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termSet ::= prefixedTerm 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ArrayList<Node> temp = new ArrayList<Node>();
			temp.add(pt);
			RESULT = temp;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termSet ::= OPEN_CURLY termSequence CLOSE_CURLY 
            {
              ArrayList<Node> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = ts;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSet",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termSequence ::= prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             	ArrayList<Node> out = new ArrayList<Node>();
             	out.add(pt);
				for (int i = 0; i < pts.size(); i++) {
					out.add(pts.get(i));				
				}
				RESULT = out;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSequence",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prefixedTerms ::= COMMA prefixedTerm prefixedTerms 
            {
              ArrayList<Node> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<Node> out = new ArrayList<Node>();
             		out.add(pt);
					for (int i = 0; i < pts.size(); i++) {
						out.add(pts.get(i));				
					}
					RESULT = out;
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prefixedTerms ::= 
            {
              ArrayList<Node> RESULT =null;
		
					ArrayList<Node> out = new ArrayList<Node>();
					RESULT = out;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerms",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prefixedTerm ::= negatedTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prefixedTerm ::= andorTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prefixedTerm ::= setTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prefixedTerm ::= threshTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prefixedTerm ::= ifdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prefixedTerm ::= whendoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixedTerm ::= wheneverdoTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixedTerm ::= actplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixedTerm ::= effectTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prefixedTerm ::= goalplanTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prefixedTerm ::= preconditionTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prefixedTerm ::= allTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prefixedTerm ::= atomicTerm 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = t;
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixedTerm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // negatedTerm ::= NOT atomicTerm 
            {
              Node RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		    		try{
					RESULT = AP.buildNegatedTerm(node);
				} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negatedTerm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // andorTerm ::= ANDOR OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  		if(Integer.valueOf(i)>=0&&Integer.valueOf(i)<=Integer.valueOf(j)){
		  			try{
						RESULT = AP.buildAndorTerm(i, j, arguments);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i<=j");
				}
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andorTerm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // setTerm ::= AND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        		try{
             	RESULT = AP.buildSetTerm("and", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // setTerm ::= OR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("or", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // setTerm ::= NAND termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("nand", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // setTerm ::= NOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("nor", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // setTerm ::= XOR termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("xor", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // setTerm ::= IFF termSet 
            {
              Node RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             try{
             	RESULT = AP.buildSetTerm("iff", arguments);
             } catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setTerm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // threshTerm ::= THRESH OPEN_PARAN INT_LIT COMMA INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int threshmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String threshmax = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(Integer.valueOf(thresh)>=0&&Integer.valueOf(thresh)<=Integer.valueOf(threshmax)){
           			try{
						RESULT = AP.buildThreshTerm(thresh, threshmax, arguments);
					} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i<=j");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // threshTerm ::= THRESH OPEN_PARAN INT_LIT CLOSE_PARAN termSet 
            {
              Node RESULT =null;
		int threshleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int threshright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String thresh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> arguments = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(Integer.valueOf(thresh)>=0){
           			try{
						RESULT = AP.buildThreshTerm(thresh, arguments.size()-1+"", arguments);
					} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}
				else{
					throw new InvalidArgumentsException("The arguments should be something like: 0<=i");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshTerm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ifdoTerm ::= IFDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
         		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("ifdo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdoTerm",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // whendoTerm ::= WHENDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("whendo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whendoTerm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // wheneverdoTerm ::= WHENEVERDO OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("wheneverdo", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wheneverdoTerm",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // actplanTerm ::= ACTPLAN OPEN_PARAN atomicTerm COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("ActPlan", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actplanTerm",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // effectTerm ::= EFFECT OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("Effect", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
	       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("effectTerm",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // goalplanTerm ::= GOALPLAN OPEN_PARAN wff COMMA atomicTerm CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("GoalPlan", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goalplanTerm",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // preconditionTerm ::= PRECONDITION OPEN_PARAN atomicTerm COMMA wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node arg1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arg2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(AP.getSnepslogMode()==3){
         			try{
           				RESULT = AP.buildSNeRETerm("Precondition", arg1, arg2);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preconditionTerm",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // allTerm ::= ALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Node> ss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(w.getTerm() instanceof Base){
		   		throw new IllegalAtomicSymbolException("wff must not be an atomic symbol");
		   	}
		   	try{
				RESULT = AP.buildAllTerm(ss, w);
			} catch(EquivalentNodeException e){
             	warning = e.getMessage();
				RESULT = e.getEquivalentNode();
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allTerm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atomicTerm ::= wffName 
            {
              Node RESULT =null;
		int wnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = Network.getNodes().get("M"+wn.substring(3));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomicTerm ::= qvar 
            {
              Node RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = q;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // atomicTerm ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = Network.buildBaseNode(id, Semantic.proposition);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // atomicTerm ::= IDENTIFIER COLON IDENTIFIER 
            {
              Node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		if(AP.getSnepslogMode()==3){
           			if (Network.getNodes().containsKey(id1)) {
           				throw new SemanticAlreadySetException("A semantic type was already set for this node");
					}else{
						RESULT = Network.buildBaseNode(id1, SemanticHierarchy.getSemantic(id2));
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // atomicTerm ::= withsomeTerm 
            {
              Node RESULT =null;
		int wstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node wst = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = wst;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // atomicTerm ::= withallTerm 
            {
              Node RESULT =null;
		int watleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int watright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node wat = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           		RESULT = wat;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // atomicTerm ::= qvar OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()==1){
           			ArrayList<Wire> wires = new ArrayList<Wire>();
					CaseFrame caseFrame = AP.createModeOneCaseFrame(tss.size());
					LinkedList<Relation> relations = caseFrame.getRelations();
					wires.add(new Wire(relations.get(0),q));
					for(int i = 0;i<tss.size();i++){
						for(int j=0;j<tss.get(i).size();j++){
							wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
						}
					}
					try{
						RESULT = Network.buildMolecularNode(wires, caseFrame);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}else{
					throw new ModeOneOnlyException("A predicate can start with a variable only in Mode 1");
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // atomicTerm ::= IDENTIFIER OPEN_PARAN termSetSequence CLOSE_PARAN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		if(AP.getSnepslogMode()!=3){
           			ArrayList<Wire> wires = new ArrayList<Wire>();
					CaseFrame caseFrame = null;
					if(AP.getSnepslogMode()==1){
						caseFrame = AP.createModeOneCaseFrame(tss.size());
					}else{
						caseFrame = AP.createModeTwoCaseFrame(id, tss.size());					
					}
					LinkedList<Relation> relations = caseFrame.getRelations();
					wires.add(new Wire(relations.get(0), Network.buildBaseNode(id, Semantic.proposition)));
					for(int i = 0;i<tss.size();i++){
						for(int j=0;j<tss.get(i).size();j++){
							wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
						}
					}
					try{
						RESULT = Network.buildMolecularNode(wires, caseFrame);
					} catch(EquivalentNodeException e){
						warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
				}else{
					String description = "";
					boolean flag = false;
					if(AP.getCfsDescriptions().containsKey(id)){
						description = AP.getCfsDescriptions().get(id);
						flag = true;
					}
					if(AP.getModeThreeCaseFrames().containsKey(id)){
						ArrayList<Wire> wires = new ArrayList<Wire>();
						CaseFrame caseFrame = AP.getModeThreeCaseFrames().get(id);
						LinkedList<Relation> relations = caseFrame.getRelations();
						wires.add(new Wire(relations.get(0), Network.buildBaseNode(id, SemanticHierarchy.createSemanticType(caseFrame.getRelations().get(0).getType()))));
						if(flag){
							description = description.replaceAll(relations.get(0).getName(), id);
						}
						for(int i = 0;i<tss.size();i++){
							for(int j=0;j<tss.get(i).size();j++){
								wires.add(new Wire(relations.get(i+1),tss.get(i).get(j)));
								if(flag){
									description = description.replaceAll(relations.get(i+1).getName(), tss.get(i).get(j).getIdentifier());
								}
							}
						}
						try{
							Node node = Network.buildMolecularNode(wires, caseFrame);
							if(flag){
								Set<Node> keys = AP.getNodesDescriptions().keySet();
								for (Node key : keys) {
									description = description.replaceAll(key.getIdentifier()+" ", AP.getNodesDescriptions().get(key).substring(1,AP.getNodesDescriptions().get(key).length()-1)+" ");
								}
								AP.getNodesDescriptions().put(node, description);
							}
							RESULT = node;
						} catch(EquivalentNodeException e){
							warning = e.getMessage();
							RESULT = e.getEquivalentNode();
						}
					}else{
						if(AP.getModeThreeCaseFrames().containsKey(id+"$")){
							ArrayList<Wire> wires = new ArrayList<Wire>();
							CaseFrame caseFrame = AP.getModeThreeCaseFrames().get(id+"$");
							LinkedList<Relation> relations = caseFrame.getRelations();
							for(int i = 0;i<tss.size();i++){
								for(int j=0;j<tss.get(i).size();j++){
									wires.add(new Wire(relations.get(i),tss.get(i).get(j)));
									if(flag){
										description = description.replaceAll(relations.get(i).getName(), tss.get(i).get(j).getIdentifier());
									}
								}
							}
							try{
								Node node = Network.buildMolecularNode(wires, caseFrame);
								if(flag){
									Set<Node> keys = AP.getNodesDescriptions().keySet();
									for (Node key : keys) {
										description = description.replaceAll(key.getIdentifier()+" ", AP.getNodesDescriptions().get(key).substring(1,AP.getNodesDescriptions().get(key).length()-1)+" ");
									}
									AP.getNodesDescriptions().put(node, description);
								}
								RESULT = node;
							} catch(EquivalentNodeException e){
								warning = e.getMessage();
								RESULT = e.getEquivalentNode();
							}
						}else{
							throw new CannotFindCaseFrameException("Unable to find a matching CaseFrame.");
						}
					}
				}
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // atomicTerm ::= OPEN_PARAN wff CLOSE_PARAN 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           		RESULT = w;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicTerm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> elsee = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withsome", vars, suchthat, doo, elsee);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // withsomeTerm ::= WITHSOME OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withsome", vars, suchthat, doo, null);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withsomeTerm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> elsee = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withall", vars, suchthat, doo, elsee);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // withallTerm ::= WITHALL OPEN_PARAN symbolSequence CLOSE_PARAN OPEN_PARAN termSet COMMA termSet CLOSE_PARAN 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Node> vars = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int suchthatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int suchthatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> suchthat = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> doo = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             	if(AP.getSnepslogMode()==3){
             		try{
           				RESULT = AP.buildWithsomeAllTerm("withall", vars, suchthat, doo, null);
           			} catch(EquivalentNodeException e){
             			warning = e.getMessage();
						RESULT = e.getEquivalentNode();
					}
           		}else{
           			throw new ModeThreeOnlyException("SNeRE in SNePSLOG is only allowed in Mode 3");
           		}
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("withallTerm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termSetSequence ::= termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<ArrayList<Node>> out = new ArrayList<ArrayList<Node>>();
             		out.add(ts);
					for (int i = 0; i < tss.size(); i++) {
						out.add(tss.get(i));				
					}
					RESULT = out;
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSetSequence",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // termSets ::= COMMA termSet termSets 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Node>> tss = (ArrayList<ArrayList<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			tss.add(0, ts);
			RESULT = tss;
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // termSets ::= 
            {
              ArrayList<ArrayList<Node>> RESULT =null;
		
			RESULT = new ArrayList<ArrayList<Node>>();
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termSets",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // symbolSequence ::= snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArrayList<Node> out = new ArrayList<Node>();
             		out.add(ss);
					for (int i = 0; i < sss.size(); i++) {
						out.add(sss.get(i));				
					}
					RESULT = out;
		       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolSequence",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // snepslogSymbols ::= COMMA snepslogSymbol snepslogSymbols 
            {
              ArrayList<Node> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sss = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	            		sss.add(ss);
					RESULT = sss;
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // snepslogSymbols ::= 
            {
              ArrayList<Node> RESULT =null;
		
					RESULT = new ArrayList<Node>();
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbols",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // wffName ::= WFF 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	    		if (Network.getNodes().containsKey("M"+w.substring(3))) {
        			RESULT = w;
			}else{
				throw new InvalidWffNameException("This wffName does not correspond to any wff in the Network");
			}
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wffName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // qvar ::= QUESTION_MARK IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = Network.buildVariableNode(id);
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qvar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // snepslogSymbol ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               		VariableNode vNode = Network.buildVariableNode(id);
					vNode.setSnepslogFlag(true);
					RESULT = vNode;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepslogSymbol",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminalPunctuation ::= DOT 
            {
              String RESULT =null;
		
           				RESULT = ".";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminalPunctuation ::= BANG 
            {
              String RESULT =null;
		
                     	RESULT = "!";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminalPunctuation ::= QUESTION_MARK QUESTION_MARK 
            {
              String RESULT =null;
		
           				RESULT = "??";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminalPunctuation ::= QUESTION_MARK 
            {
              String RESULT =null;
		
           				RESULT = "?";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           				RESULT = "ONE"+il;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // terminalPunctuation ::= QUESTION_MARK OPEN_PARAN INT_LIT INT_LIT CLOSE_PARAN 
            {
              String RESULT =null;
		int il1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String il1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int il2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int il2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String il2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           				RESULT = "TWO"+il1+","+il2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalPunctuation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // optionalDot ::= DOT 
            {
              String RESULT =null;
		
				RESULT = ".";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optionalDot ::= 
            {
              String RESULT =null;
		
				RESULT = null;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalDot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optionalIdentifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			       		RESULT = id;
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optionalIdentifier ::= 
            {
              String RESULT =null;
		
			       		RESULT = null;
			       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // optionalTerminalPunctuation ::= terminalPunctuation 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = tp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optionalTerminalPunctuation ::= 
            {
              String RESULT =null;
		
								RESULT = null;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalTerminalPunctuation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optionalPTermSet ::= pTermSet 
            {
              ArrayList<Node> RESULT =null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pts = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = pts;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optionalPTermSet ::= 
            {
              ArrayList<Node> RESULT =null;
		
					RESULT = null;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalPTermSet",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // identifiers ::= IDENTIFIER identifiers 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            		ids.add(0, id);
            		RESULT = ids;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // identifiers ::= 
            {
              ArrayList<String> RESULT =null;
		
				RESULT = new ArrayList<String>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // identifiers_list ::= OPEN_PARAN IDENTIFIER identifiers CLOSE_PARAN 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 	ArrayList<String> out = new ArrayList<String>();
             		out.add(id);
					for (int i = 0; i < ids.size(); i++) {
						out.add(ids.get(i));				
					}
					RESULT = out;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // path ::= snepsPath 
            {
              Path RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Path sp = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     	RESULT = sp;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // path ::= BANGPATH 
            {
              Path RESULT =null;
		
     	RESULT = new BangPath();
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // path ::= EMPTYPATH 
            {
              Path RESULT =null;
		
     	RESULT = new EmptyPath();
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // snepsPath ::= IDENTIFIER 
            {
              Path RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if(id.charAt(id.length()-1)=='-'){
					RESULT = new BUnitPath(Network.getRelation(id));
				}else{
					RESULT = new FUnitPath(Network.getRelation(id));
				}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // snepsPath ::= CFRES OPEN_PARAN IDENTIFIER COMMA IDENTIFIER CLOSE_PARAN 
            {
              Path RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(id1.charAt(id1.length()-1)=='-'){
					RESULT = new CFResBUnitPath(Network.getRelation(id1), Network.getCaseFrame(id2));
				}else{
					RESULT = new CFResFUnitPath(Network.getRelation(id1), Network.getCaseFrame(id2));
				}
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // snepsPath ::= KPLUS OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new KPlusPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // snepsPath ::= KSTAR OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new KStarPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // snepsPath ::= AND OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new AndPath(ps);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // snepsPath ::= AND OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new AndPath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // snepsPath ::= OR OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new OrPath(ps);
     	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // snepsPath ::= OR OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new OrPath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // snepsPath ::= COMPOSE OPEN_PARAN paths CLOSE_PARAN 
            {
              Path RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new ComposePath(ps);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // snepsPath ::= COMPOSE OPEN_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		
				RESULT = new ComposePath(new LinkedList<Path>());
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // snepsPath ::= CONVERSE OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new ConversePath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // snepsPath ::= IRREFLEXIVE_RESTRICT OPEN_PARAN path CLOSE_PARAN 
            {
              Path RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new IrreflexiveRestrictPath(p);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // snepsPath ::= DOMAIN_RESTRICT OPEN_PARAN path OPEN_PARAN wff CLOSE_PARAN COMMA path CLOSE_PARAN 
            {
              Path RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Path p1 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Path p2 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new DomainRestrictPath(p1,w,p2);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // snepsPath ::= RANGE_RESTRICT OPEN_PARAN path COMMA path OPEN_PARAN wff CLOSE_PARAN CLOSE_PARAN 
            {
              Path RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Path p1 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Path p2 = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT = new RangeRestrictPath(p1,p2,w);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("snepsPath",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paths ::= path COMMA paths 
            {
              LinkedList<Path> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Path> ps = (LinkedList<Path>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      		ps.add(p);
      		RESULT = ps;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // paths ::= path 
            {
              LinkedList<Path> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      		LinkedList<Path> out = new LinkedList<Path>();
      		out.add(p);
      		RESULT = out;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
